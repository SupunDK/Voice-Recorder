
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000031a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000800  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000697  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ef  00000000  00000000  0000128b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  0000167c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004dd  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000284  00000000  00000000  00001ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001f2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_13>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 36 01 	call	0x26c	; 0x26c <main>
  78:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z9start_adcv>:

	TCNT1 = 65534;
}

void start_adc(void){
	DIDR0 = 0b00010000; // Disabling digital mode in the ADC4 pin
  80:	80 e1       	ldi	r24, 0x10	; 16
  82:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	ADMUX = 0b01000100; // High = Vcc, Data register right aligned, ADC4 as the analog input
  86:	84 e4       	ldi	r24, 0x44	; 68
  88:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = 0b10000011; // Enabling the ADC, ADC Clock = 16 Mhz / 8 = 2 Mhz --> Sampling frequency = 137.9 Khz
  8c:	83 e8       	ldi	r24, 0x83	; 131
  8e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	sei();
  92:	78 94       	sei

	TCCR1B = 0X05; // Timer Frequency = 16 MHz / 1024 = 15.625 KHz
  94:	85 e0       	ldi	r24, 0x05	; 5
  96:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TCNT1 = 65534; 
  9a:	8e ef       	ldi	r24, 0xFE	; 254
  9c:	9f ef       	ldi	r25, 0xFF	; 255
  9e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  a2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIMSK1 |= (1<<TOIE1); //Enable the timer overflow interrupt
  a6:	ef e6       	ldi	r30, 0x6F	; 111
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	80 83       	st	Z, r24

	DDRD = 0b00001000;
  b0:	88 e0       	ldi	r24, 0x08	; 8
  b2:	8a b9       	out	0x0a, r24	; 10

	PORTD = 0b00001000;
  b4:	8b b9       	out	0x0b, r24	; 11
  b6:	08 95       	ret

000000b8 <_Z8stop_adcv>:

}

void stop_adc(void){
	DIDR0 = 0b00000000;
  b8:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	ADCSRA = 0b00000000;
  bc:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	
	cli();
  c0:	f8 94       	cli
	
	TIMSK1 = 0b00000000;
  c2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	
	PORTD = 0b00000000;
  c6:	1b b8       	out	0x0b, r1	; 11
	DDRD = 0b00000000;
  c8:	1a b8       	out	0x0a, r1	; 10
	
	sei();
  ca:	78 94       	sei
  cc:	08 95       	ret

000000ce <_Z7get_adcv>:

int get_adc(void)
{	
	uint8_t ADC_8_bit_out;

	ADCSRA |= 1<<ADSC; //starting conversion
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24
		
	while(ADCSRA & (1<<ADSC)); //waiting until the conversion is complete
  d8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  dc:	86 fd       	sbrc	r24, 6
  de:	fc cf       	rjmp	.-8      	; 0xd8 <_Z7get_adcv+0xa>
		
	ADC_8_bit_out = ADCL; //reading the 8 bits in the ADCL register
  e0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	ADCH;
  e4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
		
	ADCSRA |= 1<<ADIF; //clearing the ADIF	
  e8:	ea e7       	ldi	r30, 0x7A	; 122
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	90 81       	ld	r25, Z
  ee:	90 61       	ori	r25, 0x10	; 16
  f0:	90 83       	st	Z, r25
	
	return ADC_8_bit_out;
}
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	08 95       	ret

000000f6 <_Z14setup_usat_comv>:

void setup_usat_com(void){
	UBRR0L = 0b00011001; // Baud Rate = 38.4 kbps
  f6:	89 e1       	ldi	r24, 0x19	; 25
  f8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0C = 0x06; // Data - 8 bit, Start/Stop - 1 bit, No parity bit
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UCSR0B |= (1<<TXEN0); // Setting the microcontroller as a transmitter
 102:	e1 ec       	ldi	r30, 0xC1	; 193
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	88 60       	ori	r24, 0x08	; 8
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <_Z13stop_usat_comv>:
}

void stop_usat_com(void){
	UBRR0L = 0x00;
 10e:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0C = 0x00;
 112:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UCSR0B = 0x00;
 116:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 11a:	08 95       	ret

0000011c <_Z15display_adc_vali>:
}

void display_adc_val(int ADC_8_bit_out){
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	ec 01       	movw	r28, r24
	uint8_t hundred_pos;
	uint8_t ten_pos;
	uint8_t one_pos;

	one_pos = ADC_8_bit_out % 10;
 122:	ea e0       	ldi	r30, 0x0A	; 10
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	bf 01       	movw	r22, r30
 128:	0e 94 39 01 	call	0x272	; 0x272 <__divmodhi4>
 12c:	28 2f       	mov	r18, r24
	ADC_8_bit_out = ADC_8_bit_out / 10;

	ten_pos = ADC_8_bit_out % 10;
 12e:	cb 01       	movw	r24, r22
 130:	bf 01       	movw	r22, r30
 132:	0e 94 39 01 	call	0x272	; 0x272 <__divmodhi4>
 136:	38 2f       	mov	r19, r24
	ADC_8_bit_out = ADC_8_bit_out / 10;
 138:	ce 01       	movw	r24, r28
 13a:	64 e6       	ldi	r22, 0x64	; 100
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	0e 94 39 01 	call	0x272	; 0x272 <__divmodhi4>
 142:	cb 01       	movw	r24, r22

	hundred_pos = ADC_8_bit_out % 10;
 144:	bf 01       	movw	r22, r30
 146:	0e 94 39 01 	call	0x272	; 0x272 <__divmodhi4>

	one_pos += 0x30;
 14a:	20 5d       	subi	r18, 0xD0	; 208
	ten_pos += 0x30;
 14c:	30 5d       	subi	r19, 0xD0	; 208
	hundred_pos += 0x30;
 14e:	80 5d       	subi	r24, 0xD0	; 208

	while(!(UCSR0A & (1<<UDRE0)));
 150:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 154:	95 ff       	sbrs	r25, 5
 156:	fc cf       	rjmp	.-8      	; 0x150 <_Z15display_adc_vali+0x34>
	UDR0 = hundred_pos;
 158:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	while(!(UCSR0A & (1<<UDRE0)));
 15c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 160:	95 ff       	sbrs	r25, 5
 162:	fc cf       	rjmp	.-8      	; 0x15c <_Z15display_adc_vali+0x40>
	UDR0 = ten_pos;
 164:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	while(!(UCSR0A & (1<<UDRE0)));
 168:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 16c:	95 ff       	sbrs	r25, 5
 16e:	fc cf       	rjmp	.-8      	; 0x168 <_Z15display_adc_vali+0x4c>
	UDR0 = one_pos;
 170:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	while(!(UCSR0A & (1<<UDRE0)));
 174:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 178:	85 ff       	sbrs	r24, 5
 17a:	fc cf       	rjmp	.-8      	; 0x174 <_Z15display_adc_vali+0x58>
	UDR0 = '\r';
 17c:	8d e0       	ldi	r24, 0x0D	; 13
 17e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	while(!(UCSR0A & (1<<UDRE0)));
 182:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 186:	85 ff       	sbrs	r24, 5
 188:	fc cf       	rjmp	.-8      	; 0x182 <_Z15display_adc_vali+0x66>
	UDR0 = '\n';
 18a:	8a e0       	ldi	r24, 0x0A	; 10
 18c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <__vector_13>:
int get_adc(void);
void display_adc_val(int ADC_8_bit_out);

ISR(TIMER1_OVF_vect){
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	2f 93       	push	r18
 1a2:	3f 93       	push	r19
 1a4:	4f 93       	push	r20
 1a6:	5f 93       	push	r21
 1a8:	6f 93       	push	r22
 1aa:	7f 93       	push	r23
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
 1b0:	af 93       	push	r26
 1b2:	bf 93       	push	r27
 1b4:	ef 93       	push	r30
 1b6:	ff 93       	push	r31
	uint8_t ADC_8_bit_out = get_adc();
 1b8:	0e 94 67 00 	call	0xce	; 0xce <_Z7get_adcv>
	display_adc_val(ADC_8_bit_out);
 1bc:	99 27       	eor	r25, r25
 1be:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z15display_adc_vali>
	
	PORTD ^= 0b00001000;
 1c2:	9b b1       	in	r25, 0x0b	; 11
 1c4:	88 e0       	ldi	r24, 0x08	; 8
 1c6:	89 27       	eor	r24, r25
 1c8:	8b b9       	out	0x0b, r24	; 11

	TCNT1 = 65534;
 1ca:	8e ef       	ldi	r24, 0xFE	; 254
 1cc:	9f ef       	ldi	r25, 0xFF	; 255
 1ce:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 1d2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
}
 1d6:	ff 91       	pop	r31
 1d8:	ef 91       	pop	r30
 1da:	bf 91       	pop	r27
 1dc:	af 91       	pop	r26
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	7f 91       	pop	r23
 1e4:	6f 91       	pop	r22
 1e6:	5f 91       	pop	r21
 1e8:	4f 91       	pop	r20
 1ea:	3f 91       	pop	r19
 1ec:	2f 91       	pop	r18
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <__vector_1>:
ISR(INT0_vect){
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	2f 93       	push	r18
 204:	3f 93       	push	r19
 206:	4f 93       	push	r20
 208:	5f 93       	push	r21
 20a:	6f 93       	push	r22
 20c:	7f 93       	push	r23
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	af 93       	push	r26
 214:	bf 93       	push	r27
 216:	ef 93       	push	r30
 218:	ff 93       	push	r31
	if(!(ADCSRA & (1<<ADEN))){
 21a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 21e:	88 23       	and	r24, r24
 220:	2c f0       	brlt	.+10     	; 0x22c <__vector_1+0x34>
		setup_usat_com();
 222:	0e 94 7b 00 	call	0xf6	; 0xf6 <_Z14setup_usat_comv>
		start_adc();
 226:	0e 94 40 00 	call	0x80	; 0x80 <_Z9start_adcv>
 22a:	04 c0       	rjmp	.+8      	; 0x234 <__vector_1+0x3c>
	}
	else{
		stop_adc();
 22c:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z8stop_adcv>
		stop_usat_com();
 230:	0e 94 87 00 	call	0x10e	; 0x10e <_Z13stop_usat_comv>
	}
}
 234:	ff 91       	pop	r31
 236:	ef 91       	pop	r30
 238:	bf 91       	pop	r27
 23a:	af 91       	pop	r26
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	7f 91       	pop	r23
 242:	6f 91       	pop	r22
 244:	5f 91       	pop	r21
 246:	4f 91       	pop	r20
 248:	3f 91       	pop	r19
 24a:	2f 91       	pop	r18
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <_Z19setup_recording_btnv>:

void setup_recording_btn(void){
	cli();
 256:	f8 94       	cli
	
	EICRA |= (1<<ISC01) | (1<<ISC00);
 258:	e9 e6       	ldi	r30, 0x69	; 105
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	83 60       	ori	r24, 0x03	; 3
 260:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0);
 262:	8d b3       	in	r24, 0x1d	; 29
 264:	81 60       	ori	r24, 0x01	; 1
 266:	8d bb       	out	0x1d, r24	; 29
	
	sei();
 268:	78 94       	sei
 26a:	08 95       	ret

0000026c <main>:
#include "adc.h"
#include "buttons.h"

int main(void)
{
	setup_recording_btn();
 26c:	0e 94 2b 01 	call	0x256	; 0x256 <_Z19setup_recording_btnv>
 270:	ff cf       	rjmp	.-2      	; 0x270 <main+0x4>

00000272 <__divmodhi4>:
 272:	97 fb       	bst	r25, 7
 274:	07 2e       	mov	r0, r23
 276:	16 f4       	brtc	.+4      	; 0x27c <__divmodhi4+0xa>
 278:	00 94       	com	r0
 27a:	07 d0       	rcall	.+14     	; 0x28a <__divmodhi4_neg1>
 27c:	77 fd       	sbrc	r23, 7
 27e:	09 d0       	rcall	.+18     	; 0x292 <__divmodhi4_neg2>
 280:	0e 94 4d 01 	call	0x29a	; 0x29a <__udivmodhi4>
 284:	07 fc       	sbrc	r0, 7
 286:	05 d0       	rcall	.+10     	; 0x292 <__divmodhi4_neg2>
 288:	3e f4       	brtc	.+14     	; 0x298 <__divmodhi4_exit>

0000028a <__divmodhi4_neg1>:
 28a:	90 95       	com	r25
 28c:	81 95       	neg	r24
 28e:	9f 4f       	sbci	r25, 0xFF	; 255
 290:	08 95       	ret

00000292 <__divmodhi4_neg2>:
 292:	70 95       	com	r23
 294:	61 95       	neg	r22
 296:	7f 4f       	sbci	r23, 0xFF	; 255

00000298 <__divmodhi4_exit>:
 298:	08 95       	ret

0000029a <__udivmodhi4>:
 29a:	aa 1b       	sub	r26, r26
 29c:	bb 1b       	sub	r27, r27
 29e:	51 e1       	ldi	r21, 0x11	; 17
 2a0:	07 c0       	rjmp	.+14     	; 0x2b0 <__udivmodhi4_ep>

000002a2 <__udivmodhi4_loop>:
 2a2:	aa 1f       	adc	r26, r26
 2a4:	bb 1f       	adc	r27, r27
 2a6:	a6 17       	cp	r26, r22
 2a8:	b7 07       	cpc	r27, r23
 2aa:	10 f0       	brcs	.+4      	; 0x2b0 <__udivmodhi4_ep>
 2ac:	a6 1b       	sub	r26, r22
 2ae:	b7 0b       	sbc	r27, r23

000002b0 <__udivmodhi4_ep>:
 2b0:	88 1f       	adc	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	5a 95       	dec	r21
 2b6:	a9 f7       	brne	.-22     	; 0x2a2 <__udivmodhi4_loop>
 2b8:	80 95       	com	r24
 2ba:	90 95       	com	r25
 2bc:	bc 01       	movw	r22, r24
 2be:	cd 01       	movw	r24, r26
 2c0:	08 95       	ret

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
