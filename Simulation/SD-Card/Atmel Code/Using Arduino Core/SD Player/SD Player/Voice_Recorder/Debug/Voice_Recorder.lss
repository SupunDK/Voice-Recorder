
Voice_Recorder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000de  00800100  00003c5e  00003cf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000051a  008001de  008001de  00003dd0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003dd0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003e00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009e0  00000000  00000000  00003e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002225f  00000000  00000000  00004820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004764  00000000  00000000  00026a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000617c  00000000  00000000  0002b1e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002698  00000000  00000000  00031360  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005472  00000000  00000000  000339f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000fa7d  00000000  00000000  00038e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b80  00000000  00000000  000488e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 00 	jmp	0xda	; 0xda <__ctors_end>
       4:	0c 94 14 03 	jmp	0x628	; 0x628 <__vector_1>
       8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      10:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      14:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      1c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      24:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__vector_9>
      28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      2c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      40:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__vector_16>
      44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      48:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__vector_18>
      4c:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__vector_19>
      50:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      54:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      58:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      60:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      64:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <_ZZN6SdFile10make83NameEPKcPhE3__c>:
      c2:	7c 3c 3e 5e 2b 3d 3f 2f 5b 5d 3b 2c 2a 22 5c 00     |<>^+=?/[];,*"\.

000000d2 <__ctors_start>:
      d2:	3f 01       	movw	r6, r30
      d4:	cf 03       	fmulsu	r20, r23
      d6:	cd 0a       	sbc	r12, r29
      d8:	57 0e       	add	r5, r23

000000da <__ctors_end>:
      da:	11 24       	eor	r1, r1
      dc:	1f be       	out	0x3f, r1	; 63
      de:	cf ef       	ldi	r28, 0xFF	; 255
      e0:	d8 e0       	ldi	r29, 0x08	; 8
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	cd bf       	out	0x3d, r28	; 61

000000e6 <__do_copy_data>:
      e6:	11 e0       	ldi	r17, 0x01	; 1
      e8:	a0 e0       	ldi	r26, 0x00	; 0
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	ee e5       	ldi	r30, 0x5E	; 94
      ee:	fc e3       	ldi	r31, 0x3C	; 60
      f0:	02 c0       	rjmp	.+4      	; 0xf6 <__do_copy_data+0x10>
      f2:	05 90       	lpm	r0, Z+
      f4:	0d 92       	st	X+, r0
      f6:	ae 3d       	cpi	r26, 0xDE	; 222
      f8:	b1 07       	cpc	r27, r17
      fa:	d9 f7       	brne	.-10     	; 0xf2 <__do_copy_data+0xc>

000000fc <__do_clear_bss>:
      fc:	26 e0       	ldi	r18, 0x06	; 6
      fe:	ae ed       	ldi	r26, 0xDE	; 222
     100:	b1 e0       	ldi	r27, 0x01	; 1
     102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
     104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
     106:	a8 3f       	cpi	r26, 0xF8	; 248
     108:	b2 07       	cpc	r27, r18
     10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>

0000010c <__do_global_ctors>:
     10c:	10 e0       	ldi	r17, 0x00	; 0
     10e:	cd e6       	ldi	r28, 0x6D	; 109
     110:	d0 e0       	ldi	r29, 0x00	; 0
     112:	04 c0       	rjmp	.+8      	; 0x11c <__do_global_ctors+0x10>
     114:	21 97       	sbiw	r28, 0x01	; 1
     116:	fe 01       	movw	r30, r28
     118:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__tablejump2__>
     11c:	c9 36       	cpi	r28, 0x69	; 105
     11e:	d1 07       	cpc	r29, r17
     120:	c9 f7       	brne	.-14     	; 0x114 <__do_global_ctors+0x8>
     122:	0e 94 fd 03 	call	0x7fa	; 0x7fa <main>
     126:	0c 94 2d 1e 	jmp	0x3c5a	; 0x3c5a <_exit>

0000012a <__bad_interrupt>:
     12a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012e <_Z9UART_Initj>:
 */ 
//Functions for Serial Out
#include <avr/io.h>

void UART_Init(unsigned int baud){
	unsigned int ubrr = (16000000/16/baud-1);
     12e:	9c 01       	movw	r18, r24
     130:	40 e0       	ldi	r20, 0x00	; 0
     132:	50 e0       	ldi	r21, 0x00	; 0
     134:	60 e4       	ldi	r22, 0x40	; 64
     136:	72 e4       	ldi	r23, 0x42	; 66
     138:	8f e0       	ldi	r24, 0x0F	; 15
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	0e 94 99 1b 	call	0x3732	; 0x3732 <__divmodsi4>
     140:	21 50       	subi	r18, 0x01	; 1
     142:	31 09       	sbc	r19, r1
	UBRR0H =(unsigned char)(ubrr>>8);
     144:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
     148:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B =(1 << RXEN0) | (1 << TXEN0);
     14c:	88 e1       	ldi	r24, 0x18	; 24
     14e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
     152:	86 e0       	ldi	r24, 0x06	; 6
     154:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     158:	08 95       	ret

0000015a <_Z9UART_putch>:
}

void UART_putc(unsigned char data)
{
	// wait for transmit buffer to be empty
	while(!(UCSR0A & (1 << UDRE0)));
     15a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     15e:	95 ff       	sbrs	r25, 5
     160:	fc cf       	rjmp	.-8      	; 0x15a <_Z9UART_putch>
	// load data into transmit register
	UDR0 = data;
     162:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     166:	08 95       	ret

00000168 <_Z9UART_putsPc>:
}

/*Sending a String*/
void UART_puts(char* s)
{
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	ec 01       	movw	r28, r24
	// transmit character until NULL is reached
	while(*s > 0) UART_putc(*s++);
     16e:	89 91       	ld	r24, Y+
     170:	88 23       	and	r24, r24
     172:	19 f0       	breq	.+6      	; 0x17a <_Z9UART_putsPc+0x12>
     174:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z9UART_putch>
     178:	fa cf       	rjmp	.-12     	; 0x16e <_Z9UART_putsPc+0x6>
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	08 95       	ret

00000180 <_Z9Port_Initv>:




void Port_Init(){	
	DDRD = 0b10011011;//Setting Speaker as Output and PlayBtn as Input
     180:	8b e9       	ldi	r24, 0x9B	; 155
     182:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PLAYBtn)|(1<<RECBtn)|(1<<STOPBtn);//Adding Input pull up to that buttons
     184:	3b b1       	in	r19, 0x0b	; 11
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	bc 01       	movw	r22, r24
     18c:	00 90 4b 01 	lds	r0, 0x014B	; 0x80014b <PLAYBtn>
     190:	02 c0       	rjmp	.+4      	; 0x196 <_Z9Port_Initv+0x16>
     192:	66 0f       	add	r22, r22
     194:	77 1f       	adc	r23, r23
     196:	0a 94       	dec	r0
     198:	e2 f7       	brpl	.-8      	; 0x192 <_Z9Port_Initv+0x12>
     19a:	ac 01       	movw	r20, r24
     19c:	00 90 4a 01 	lds	r0, 0x014A	; 0x80014a <RECBtn>
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <_Z9Port_Initv+0x26>
     1a2:	44 0f       	add	r20, r20
     1a4:	55 1f       	adc	r21, r21
     1a6:	0a 94       	dec	r0
     1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <_Z9Port_Initv+0x22>
     1aa:	26 2f       	mov	r18, r22
     1ac:	24 2b       	or	r18, r20
     1ae:	23 2b       	or	r18, r19
     1b0:	00 90 49 01 	lds	r0, 0x0149	; 0x800149 <STOPBtn>
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <_Z9Port_Initv+0x3a>
     1b6:	88 0f       	add	r24, r24
     1b8:	99 1f       	adc	r25, r25
     1ba:	0a 94       	dec	r0
     1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <_Z9Port_Initv+0x36>
     1be:	82 2b       	or	r24, r18
     1c0:	8b b9       	out	0x0b, r24	; 11
	
 	EIMSK = (1<< INT0);//(1<<INT1);//Adding External interrupts
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	8d bb       	out	0x1d, r24	; 29
 	EICRA =  (1<<ISC00) |(1<<ISC01);//(1<<ISC10)|(1<<ISC11);  //Interrupt occur at rising edge
     1c6:	83 e0       	ldi	r24, 0x03	; 3
     1c8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	 
	// set up Timer2 to run at 11025 Hz (or near it)
    TCCR2A = 0b00100011; // fast PWM mode with OC2B changed
     1cc:	83 e2       	ldi	r24, 0x23	; 35
     1ce:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    TCCR2B = 0b00000010; // last 3 bits 010 select clock/8 or 16MHz/8 = 2MHz
     1d2:	82 e0       	ldi	r24, 0x02	; 2
     1d4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    OCR2A = 179; // should give 11025 Hz, might need tweaking
     1d8:	83 eb       	ldi	r24, 0xB3	; 179
     1da:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = 80;
     1de:	80 e5       	ldi	r24, 0x50	; 80
     1e0:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     1e4:	08 95       	ret

000001e6 <setup>:
//void saveFile(String filename);
ISR(TIMER2_OVF_vect );


void setup() {
  UART_Init(9600);//Initializing Serial
     1e6:	80 e8       	ldi	r24, 0x80	; 128
     1e8:	95 e2       	ldi	r25, 0x25	; 37
     1ea:	0e 94 97 00 	call	0x12e	; 0x12e <_Z9UART_Initj>
  UART_puts("Starting simple WAV demo\n");
     1ee:	80 e5       	ldi	r24, 0x50	; 80
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	0e 94 b4 00 	call	0x168	; 0x168 <_Z9UART_putsPc>
  Port_Init();//Initializing Ports
     1f6:	0e 94 c0 00 	call	0x180	; 0x180 <_Z9Port_Initv>
  
  if (!SD.begin(10)) {
     1fa:	6a e0       	ldi	r22, 0x0A	; 10
     1fc:	8b e9       	ldi	r24, 0x9B	; 155
     1fe:	94 e0       	ldi	r25, 0x04	; 4
     200:	0e 94 29 09 	call	0x1252	; 0x1252 <_ZN5SDLib7SDClass5beginEh>
     204:	81 11       	cpse	r24, r1
     206:	04 c0       	rjmp	.+8      	; 0x210 <setup+0x2a>
    UART_puts("SD fail\n");  
     208:	8a e6       	ldi	r24, 0x6A	; 106
     20a:	91 e0       	ldi	r25, 0x01	; 1
     20c:	0c 94 b4 00 	jmp	0x168	; 0x168 <_Z9UART_putsPc>
    return;
  }
  SD.remove(recfilename);
     210:	62 e3       	ldi	r22, 0x32	; 50
     212:	71 e0       	ldi	r23, 0x01	; 1
     214:	8b e9       	ldi	r24, 0x9B	; 155
     216:	94 e0       	ldi	r25, 0x04	; 4
     218:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <_ZN5SDLib7SDClass6removeEPKc>

0000021c <_ZN5SDLib4FileaSEOS0_>:
#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT | O_APPEND)

namespace SDLib {

class File : public Stream {
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	fb 01       	movw	r30, r22
     222:	22 81       	ldd	r18, Z+2	; 0x02
     224:	33 81       	ldd	r19, Z+3	; 0x03
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
     226:	dc 01       	movw	r26, r24
     228:	13 96       	adiw	r26, 0x03	; 3
     22a:	3c 93       	st	X, r19
     22c:	2e 93       	st	-X, r18
     22e:	12 97       	sbiw	r26, 0x02	; 2
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
     230:	44 81       	ldd	r20, Z+4	; 0x04
     232:	55 81       	ldd	r21, Z+5	; 0x05
     234:	66 81       	ldd	r22, Z+6	; 0x06
     236:	77 81       	ldd	r23, Z+7	; 0x07
     238:	14 96       	adiw	r26, 0x04	; 4
     23a:	4d 93       	st	X+, r20
     23c:	5d 93       	st	X+, r21
     23e:	6d 93       	st	X+, r22
     240:	7c 93       	st	X, r23
     242:	17 97       	sbiw	r26, 0x07	; 7
     244:	40 85       	ldd	r20, Z+8	; 0x08
     246:	51 85       	ldd	r21, Z+9	; 0x09
     248:	62 85       	ldd	r22, Z+10	; 0x0a
     24a:	73 85       	ldd	r23, Z+11	; 0x0b
     24c:	18 96       	adiw	r26, 0x08	; 8
     24e:	4d 93       	st	X+, r20
     250:	5d 93       	st	X+, r21
     252:	6d 93       	st	X+, r22
     254:	7c 93       	st	X, r23
     256:	1b 97       	sbiw	r26, 0x0b	; 11
     258:	1c 96       	adiw	r26, 0x0c	; 12
     25a:	ef 01       	movw	r28, r30
     25c:	2c 96       	adiw	r28, 0x0c	; 12
     25e:	9c 01       	movw	r18, r24
     260:	27 5e       	subi	r18, 0xE7	; 231
     262:	3f 4f       	sbci	r19, 0xFF	; 255
     264:	49 91       	ld	r20, Y+
     266:	4d 93       	st	X+, r20
     268:	a2 17       	cp	r26, r18
     26a:	b3 07       	cpc	r27, r19
     26c:	d9 f7       	brne	.-10     	; 0x264 <_ZN5SDLib4FileaSEOS0_+0x48>
     26e:	21 8d       	ldd	r18, Z+25	; 0x19
     270:	32 8d       	ldd	r19, Z+26	; 0x1a
     272:	fc 01       	movw	r30, r24
     274:	32 8f       	std	Z+26, r19	; 0x1a
     276:	21 8f       	std	Z+25, r18	; 0x19
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	08 95       	ret

0000027e <_GLOBAL__sub_I_PlayFlag>:

const byte Speaker = 3; // OC2B
int dataCount = 0;
unsigned int numBytes;

File PlayFile;
     27e:	84 e1       	ldi	r24, 0x14	; 20
     280:	92 e0       	ldi	r25, 0x02	; 2
     282:	0e 94 a0 07 	call	0xf40	; 0xf40 <_ZN5SDLib4FileC1Ev>
File RecFile;
     286:	89 ef       	ldi	r24, 0xF9	; 249
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	0e 94 a0 07 	call	0xf40	; 0xf40 <_ZN5SDLib4FileC1Ev>
File temp;
     28e:	8e ed       	ldi	r24, 0xDE	; 222
     290:	91 e0       	ldi	r25, 0x01	; 1
     292:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <_ZN5SDLib4FileC1Ev>

00000296 <_Z9playAudio6String>:
	}
}



void playAudio(String file){
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
     2a6:	6b 97       	sbiw	r28, 0x1b	; 27
     2a8:	0f b6       	in	r0, 0x3f	; 63
     2aa:	f8 94       	cli
     2ac:	de bf       	out	0x3e, r29	; 62
     2ae:	0f be       	out	0x3f, r0	; 63
     2b0:	cd bf       	out	0x3d, r28	; 61
	if (PlayFlag==0){
     2b2:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <PlayFlag>
     2b6:	21 11       	cpse	r18, r1
     2b8:	62 c0       	rjmp	.+196    	; 0x37e <_Z9playAudio6String+0xe8>
		PlayFlag=1;
     2ba:	21 e0       	ldi	r18, 0x01	; 1
     2bc:	20 93 34 02 	sts	0x0234, r18	; 0x800234 <PlayFlag>

  // Open the specified file/directory with the supplied mode (e.g. read or
  // write, etc). Returns a File object for interacting with the file.
  // Note that currently only one file can be open at a time.
  File open(const char *filename, uint8_t mode = FILE_READ);
  File open(const String &filename, uint8_t mode = FILE_READ) { return open( filename.c_str(), mode ); }
     2c0:	fc 01       	movw	r30, r24
     2c2:	40 81       	ld	r20, Z
     2c4:	51 81       	ldd	r21, Z+1	; 0x01
     2c6:	6b e9       	ldi	r22, 0x9B	; 155
     2c8:	74 e0       	ldi	r23, 0x04	; 4
     2ca:	ce 01       	movw	r24, r28
     2cc:	01 96       	adiw	r24, 0x01	; 1
     2ce:	0e 94 4b 0a 	call	0x1496	; 0x1496 <_ZN5SDLib7SDClass4openEPKch>
		PlayFile = SD.open(file,FILE_READ);
     2d2:	be 01       	movw	r22, r28
     2d4:	6f 5f       	subi	r22, 0xFF	; 255
     2d6:	7f 4f       	sbci	r23, 0xFF	; 255
     2d8:	84 e1       	ldi	r24, 0x14	; 20
     2da:	92 e0       	ldi	r25, 0x02	; 2
     2dc:	0e 94 0e 01 	call	0x21c	; 0x21c <_ZN5SDLib4FileaSEOS0_>
		if( !PlayFile ){
     2e0:	84 e1       	ldi	r24, 0x14	; 20
     2e2:	92 e0       	ldi	r25, 0x02	; 2
     2e4:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZN5SDLib4FilecvbEv>
     2e8:	81 11       	cpse	r24, r1
     2ea:	05 c0       	rjmp	.+10     	; 0x2f6 <_Z9playAudio6String+0x60>
			UART_puts("File not opened\n");
     2ec:	83 e7       	ldi	r24, 0x73	; 115
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	0e 94 b4 00 	call	0x168	; 0x168 <_Z9UART_putsPc>
     2f4:	4c c0       	rjmp	.+152    	; 0x38e <_Z9playAudio6String+0xf8>
		}
		else {
			byte numByteArray[4];
			PlayFile.seek(40);
     2f6:	48 e2       	ldi	r20, 0x28	; 40
     2f8:	50 e0       	ldi	r21, 0x00	; 0
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	84 e1       	ldi	r24, 0x14	; 20
     300:	92 e0       	ldi	r25, 0x02	; 2
     302:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5SDLib4File4seekEm>
     306:	8e 01       	movw	r16, r28
     308:	0f 5f       	subi	r16, 0xFF	; 255
     30a:	1f 4f       	sbci	r17, 0xFF	; 255
     30c:	7e 01       	movw	r14, r28
     30e:	f5 e0       	ldi	r31, 0x05	; 5
     310:	ef 0e       	add	r14, r31
     312:	f1 1c       	adc	r15, r1
			for(uint8_t b=0; b<4;b++)
			{
			numByteArray[b] = PlayFile.read();
     314:	84 e1       	ldi	r24, 0x14	; 20
     316:	92 e0       	ldi	r25, 0x02	; 2
     318:	0e 94 37 07 	call	0xe6e	; 0xe6e <_ZN5SDLib4File4readEv>
     31c:	f8 01       	movw	r30, r16
     31e:	81 93       	st	Z+, r24
     320:	8f 01       	movw	r16, r30
			UART_puts("File not opened\n");
		}
		else {
			byte numByteArray[4];
			PlayFile.seek(40);
			for(uint8_t b=0; b<4;b++)
     322:	ee 15       	cp	r30, r14
     324:	ff 05       	cpc	r31, r15
     326:	b1 f7       	brne	.-20     	; 0x314 <_Z9playAudio6String+0x7e>
			{
			numByteArray[b] = PlayFile.read();
			}
			numBytes = numByteArray[0] + (numByteArray[1] << 8) + (numByteArray[2] << 16) + (numByteArray[3] << 24);
     328:	8a 81       	ldd	r24, Y+2	; 0x02
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	98 2f       	mov	r25, r24
     32e:	88 27       	eor	r24, r24
     330:	29 81       	ldd	r18, Y+1	; 0x01
     332:	82 0f       	add	r24, r18
     334:	91 1d       	adc	r25, r1
     336:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <numBytes+0x1>
     33a:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <numBytes>
			Serial.print("Num Bytes:");
     33e:	64 e8       	ldi	r22, 0x84	; 132
     340:	71 e0       	ldi	r23, 0x01	; 1
     342:	85 e3       	ldi	r24, 0x35	; 53
     344:	92 e0       	ldi	r25, 0x02	; 2
     346:	0e 94 4b 04 	call	0x896	; 0x896 <_ZN5Print5printEPKc>
			Serial.print(numBytes);
     34a:	60 91 2f 02 	lds	r22, 0x022F	; 0x80022f <numBytes>
     34e:	70 91 30 02 	lds	r23, 0x0230	; 0x800230 <numBytes+0x1>
     352:	4a e0       	ldi	r20, 0x0A	; 10
     354:	50 e0       	ldi	r21, 0x00	; 0
     356:	85 e3       	ldi	r24, 0x35	; 53
     358:	92 e0       	ldi	r25, 0x02	; 2
     35a:	0e 94 ae 04 	call	0x95c	; 0x95c <_ZN5Print5printEji>
			Serial.println();
     35e:	85 e3       	ldi	r24, 0x35	; 53
     360:	92 e0       	ldi	r25, 0x02	; 2
     362:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_ZN5Print7printlnEv>
			
			// move the pointer back to the start of the data
			PlayFile.seek(44);
     366:	4c e2       	ldi	r20, 0x2C	; 44
     368:	50 e0       	ldi	r21, 0x00	; 0
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	84 e1       	ldi	r24, 0x14	; 20
     370:	92 e0       	ldi	r25, 0x02	; 2
     372:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5SDLib4File4seekEm>
			TIMSK2 = 0b00000001;//Start playing Wav file
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     37c:	08 c0       	rjmp	.+16     	; 0x38e <_Z9playAudio6String+0xf8>
		}		
		
	}
	else{
		TIMSK2 = 0b00000000;//stop playing Wav file
     37e:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
		PlayFile.close();
     382:	84 e1       	ldi	r24, 0x14	; 20
     384:	92 e0       	ldi	r25, 0x02	; 2
     386:	0e 94 0f 08 	call	0x101e	; 0x101e <_ZN5SDLib4File5closeEv>
		PlayFlag=0;
     38a:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <PlayFlag>
	}	
}
     38e:	6b 96       	adiw	r28, 0x1b	; 27
     390:	0f b6       	in	r0, 0x3f	; 63
     392:	f8 94       	cli
     394:	de bf       	out	0x3e, r29	; 62
     396:	0f be       	out	0x3f, r0	; 63
     398:	cd bf       	out	0x3d, r28	; 61
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	ff 90       	pop	r15
     3a4:	ef 90       	pop	r14
     3a6:	08 95       	ret

000003a8 <__vector_9>:
	}
	
}


ISR (TIMER2_OVF_vect) {
     3a8:	1f 92       	push	r1
     3aa:	0f 92       	push	r0
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	0f 92       	push	r0
     3b0:	11 24       	eor	r1, r1
     3b2:	2f 93       	push	r18
     3b4:	3f 93       	push	r19
     3b6:	4f 93       	push	r20
     3b8:	5f 93       	push	r21
     3ba:	6f 93       	push	r22
     3bc:	7f 93       	push	r23
     3be:	8f 93       	push	r24
     3c0:	9f 93       	push	r25
     3c2:	af 93       	push	r26
     3c4:	bf 93       	push	r27
     3c6:	ef 93       	push	r30
     3c8:	ff 93       	push	r31
	if(PlayFlag==1)
     3ca:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <PlayFlag>
     3ce:	88 23       	and	r24, r24
     3d0:	11 f1       	breq	.+68     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
	{	
	OCR2B = PlayFile.read(); // this represents the amplitude of each sample
     3d2:	84 e1       	ldi	r24, 0x14	; 20
     3d4:	92 e0       	ldi	r25, 0x02	; 2
     3d6:	0e 94 37 07 	call	0xe6e	; 0xe6e <_ZN5SDLib4File4readEv>
     3da:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	dataCount ++;
     3de:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <dataCount>
     3e2:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <dataCount+0x1>
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <dataCount+0x1>
     3ec:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <dataCount>
		if (dataCount >= numBytes) { // go back to the start of the file
     3f0:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <numBytes>
     3f4:	30 91 30 02 	lds	r19, 0x0230	; 0x800230 <numBytes+0x1>
     3f8:	82 17       	cp	r24, r18
     3fa:	93 07       	cpc	r25, r19
     3fc:	60 f0       	brcs	.+24     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
			dataCount = 0;
     3fe:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <dataCount+0x1>
     402:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <dataCount>
			PlayFile.seek(44);
     406:	4c e2       	ldi	r20, 0x2C	; 44
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	84 e1       	ldi	r24, 0x14	; 20
     410:	92 e0       	ldi	r25, 0x02	; 2
     412:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5SDLib4File4seekEm>
		}
	}
	
	if(RecFlag==1)
     416:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <RecFlag>
     41a:	88 23       	and	r24, r24
     41c:	71 f0       	breq	.+28     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
	{
		//Serial.write(0x24);
		RecFile.write(0x24);
     41e:	64 e2       	ldi	r22, 0x24	; 36
     420:	89 ef       	ldi	r24, 0xF9	; 249
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5SDLib4File5writeEh>
		dataCount++;	
     428:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <dataCount>
     42c:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <dataCount+0x1>
     430:	01 96       	adiw	r24, 0x01	; 1
     432:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <dataCount+0x1>
     436:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <dataCount>

	}
}
     43a:	ff 91       	pop	r31
     43c:	ef 91       	pop	r30
     43e:	bf 91       	pop	r27
     440:	af 91       	pop	r26
     442:	9f 91       	pop	r25
     444:	8f 91       	pop	r24
     446:	7f 91       	pop	r23
     448:	6f 91       	pop	r22
     44a:	5f 91       	pop	r21
     44c:	4f 91       	pop	r20
     44e:	3f 91       	pop	r19
     450:	2f 91       	pop	r18
     452:	0f 90       	pop	r0
     454:	0f be       	out	0x3f, r0	; 63
     456:	0f 90       	pop	r0
     458:	1f 90       	pop	r1
     45a:	18 95       	reti

0000045c <_Z11RecordAudio6String>:
		PlayFlag=0;
	}	
}

void RecordAudio(String file)
{
     45c:	ef 92       	push	r14
     45e:	ff 92       	push	r15
     460:	0f 93       	push	r16
     462:	1f 93       	push	r17
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	6b 97       	sbiw	r28, 0x1b	; 27
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	f8 94       	cli
     472:	de bf       	out	0x3e, r29	; 62
     474:	0f be       	out	0x3f, r0	; 63
     476:	cd bf       	out	0x3d, r28	; 61
	unsigned int i;
	if (RecFlag==0){
     478:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <RecFlag>
     47c:	81 11       	cpse	r24, r1
     47e:	36 c0       	rjmp	.+108    	; 0x4ec <_Z11RecordAudio6String+0x90>
		RecFlag=1;
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <RecFlag>
		RecFile = SD.open(recfilename,FILE_WRITE);
     486:	27 e1       	ldi	r18, 0x17	; 23
     488:	42 e3       	ldi	r20, 0x32	; 50
     48a:	51 e0       	ldi	r21, 0x01	; 1
     48c:	6b e9       	ldi	r22, 0x9B	; 155
     48e:	74 e0       	ldi	r23, 0x04	; 4
     490:	ce 01       	movw	r24, r28
     492:	01 96       	adiw	r24, 0x01	; 1
     494:	0e 94 4b 0a 	call	0x1496	; 0x1496 <_ZN5SDLib7SDClass4openEPKch>
     498:	be 01       	movw	r22, r28
     49a:	6f 5f       	subi	r22, 0xFF	; 255
     49c:	7f 4f       	sbci	r23, 0xFF	; 255
     49e:	89 ef       	ldi	r24, 0xF9	; 249
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	0e 94 0e 01 	call	0x21c	; 0x21c <_ZN5SDLib4FileaSEOS0_>
		if( !RecFile ){
     4a6:	89 ef       	ldi	r24, 0xF9	; 249
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZN5SDLib4FilecvbEv>
     4ae:	81 11       	cpse	r24, r1
     4b0:	05 c0       	rjmp	.+10     	; 0x4bc <_Z11RecordAudio6String+0x60>
			UART_puts("File not opened\n");
     4b2:	83 e7       	ldi	r24, 0x73	; 115
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	0e 94 b4 00 	call	0x168	; 0x168 <_Z9UART_putsPc>
     4ba:	5f c0       	rjmp	.+190    	; 0x57a <_Z11RecordAudio6String+0x11e>
     4bc:	06 e0       	ldi	r16, 0x06	; 6
     4be:	11 e0       	ldi	r17, 0x01	; 1
     4c0:	82 e3       	ldi	r24, 0x32	; 50
     4c2:	e8 2e       	mov	r14, r24
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	f8 2e       	mov	r15, r24
		}
		else 
		{
		for(i=0;i<44;i++)
		{
			RecFile.write(sampleData[i]);
     4c8:	f8 01       	movw	r30, r16
     4ca:	61 91       	ld	r22, Z+
     4cc:	8f 01       	movw	r16, r30
     4ce:	89 ef       	ldi	r24, 0xF9	; 249
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5SDLib4File5writeEh>
		if( !RecFile ){
			UART_puts("File not opened\n");
		}
		else 
		{
		for(i=0;i<44;i++)
     4d6:	e0 16       	cp	r14, r16
     4d8:	f1 06       	cpc	r15, r17
     4da:	b1 f7       	brne	.-20     	; 0x4c8 <_Z11RecordAudio6String+0x6c>
		{
			RecFile.write(sampleData[i]);
		}
		UART_puts("Rec Started\n");
     4dc:	8f e8       	ldi	r24, 0x8F	; 143
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	0e 94 b4 00 	call	0x168	; 0x168 <_Z9UART_putsPc>
		TIMSK2 = 0b00000001;//Start Recording Wav file
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     4ea:	47 c0       	rjmp	.+142    	; 0x57a <_Z11RecordAudio6String+0x11e>
		}
	}
	else{
		TIMSK2 = 0b00000000;//stop Recording Wav file
     4ec:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
		RecFile.close();
     4f0:	89 ef       	ldi	r24, 0xF9	; 249
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	0e 94 0f 08 	call	0x101e	; 0x101e <_ZN5SDLib4File5closeEv>
		RecFile = SD.open(recfilename,O_RDWR);
     4f8:	23 e0       	ldi	r18, 0x03	; 3
     4fa:	42 e3       	ldi	r20, 0x32	; 50
     4fc:	51 e0       	ldi	r21, 0x01	; 1
     4fe:	6b e9       	ldi	r22, 0x9B	; 155
     500:	74 e0       	ldi	r23, 0x04	; 4
     502:	ce 01       	movw	r24, r28
     504:	01 96       	adiw	r24, 0x01	; 1
     506:	0e 94 4b 0a 	call	0x1496	; 0x1496 <_ZN5SDLib7SDClass4openEPKch>
     50a:	be 01       	movw	r22, r28
     50c:	6f 5f       	subi	r22, 0xFF	; 255
     50e:	7f 4f       	sbci	r23, 0xFF	; 255
     510:	89 ef       	ldi	r24, 0xF9	; 249
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	0e 94 0e 01 	call	0x21c	; 0x21c <_ZN5SDLib4FileaSEOS0_>
		RecFile.seek(40);
     518:	48 e2       	ldi	r20, 0x28	; 40
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	60 e0       	ldi	r22, 0x00	; 0
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	89 ef       	ldi	r24, 0xF9	; 249
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5SDLib4File4seekEm>
     528:	00 e0       	ldi	r16, 0x00	; 0
     52a:	10 e0       	ldi	r17, 0x00	; 0
		for(i=0;i<4;i++)
		{
			//Serial.println();
			//Serial.println(dataCount>>(8*i)&0xFF,HEX);
			RecFile.write(dataCount>>(8*i)&0xFF);
     52c:	60 91 31 02 	lds	r22, 0x0231	; 0x800231 <dataCount>
     530:	70 91 32 02 	lds	r23, 0x0232	; 0x800232 <dataCount+0x1>
     534:	00 2e       	mov	r0, r16
     536:	02 c0       	rjmp	.+4      	; 0x53c <_Z11RecordAudio6String+0xe0>
     538:	75 95       	asr	r23
     53a:	67 95       	ror	r22
     53c:	0a 94       	dec	r0
     53e:	e2 f7       	brpl	.-8      	; 0x538 <_Z11RecordAudio6String+0xdc>
     540:	89 ef       	ldi	r24, 0xF9	; 249
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5SDLib4File5writeEh>
     548:	08 5f       	subi	r16, 0xF8	; 248
     54a:	1f 4f       	sbci	r17, 0xFF	; 255
	else{
		TIMSK2 = 0b00000000;//stop Recording Wav file
		RecFile.close();
		RecFile = SD.open(recfilename,O_RDWR);
		RecFile.seek(40);
		for(i=0;i<4;i++)
     54c:	00 32       	cpi	r16, 0x20	; 32
     54e:	11 05       	cpc	r17, r1
     550:	69 f7       	brne	.-38     	; 0x52c <_Z11RecordAudio6String+0xd0>
		{
			//Serial.println();
			//Serial.println(dataCount>>(8*i)&0xFF,HEX);
			RecFile.write(dataCount>>(8*i)&0xFF);
		}
		Serial.println(dataCount);
     552:	60 91 31 02 	lds	r22, 0x0231	; 0x800231 <dataCount>
     556:	70 91 32 02 	lds	r23, 0x0232	; 0x800232 <dataCount+0x1>
     55a:	4a e0       	ldi	r20, 0x0A	; 10
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	85 e3       	ldi	r24, 0x35	; 53
     560:	92 e0       	ldi	r25, 0x02	; 2
     562:	0e 94 03 05 	call	0xa06	; 0xa06 <_ZN5Print7printlnEii>
		RecFile.close();		
     566:	89 ef       	ldi	r24, 0xF9	; 249
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	0e 94 0f 08 	call	0x101e	; 0x101e <_ZN5SDLib4File5closeEv>
		dataCount=0;		
     56e:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <dataCount+0x1>
     572:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <dataCount>
		RecFlag=0;
     576:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <RecFlag>
	}
}
     57a:	6b 96       	adiw	r28, 0x1b	; 27
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	de bf       	out	0x3e, r29	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	cd bf       	out	0x3d, r28	; 61
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	0f 91       	pop	r16
     58e:	ff 90       	pop	r15
     590:	ef 90       	pop	r14
     592:	08 95       	ret

00000594 <loop>:
  }
  SD.remove(recfilename);


}
void loop(){
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	00 d0       	rcall	.+0      	; 0x59a <loop+0x6>
     59a:	00 d0       	rcall	.+0      	; 0x59c <loop+0x8>
     59c:	00 d0       	rcall	.+0      	; 0x59e <loop+0xa>
     59e:	cd b7       	in	r28, 0x3d	; 61
     5a0:	de b7       	in	r29, 0x3e	; 62
	if(digitalRead(PLAYBtn)==LOW){//Check whether Playing button is pressed.
     5a2:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <PLAYBtn>
     5a6:	0e 94 3a 06 	call	0xc74	; 0xc74 <digitalRead>
     5aa:	89 2b       	or	r24, r25
     5ac:	b9 f4       	brne	.+46     	; 0x5dc <loop+0x48>
		playAudio(playfilename);
     5ae:	6e e3       	ldi	r22, 0x3E	; 62
     5b0:	71 e0       	ldi	r23, 0x01	; 1
     5b2:	ce 01       	movw	r24, r28
     5b4:	01 96       	adiw	r24, 0x01	; 1
     5b6:	0e 94 d1 06 	call	0xda2	; 0xda2 <_ZN6StringC1EPKc>
     5ba:	ce 01       	movw	r24, r28
     5bc:	01 96       	adiw	r24, 0x01	; 1
     5be:	0e 94 4b 01 	call	0x296	; 0x296 <_Z9playAudio6String>
     5c2:	ce 01       	movw	r24, r28
     5c4:	01 96       	adiw	r24, 0x01	; 1
     5c6:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN6StringD1Ev>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5ca:	2f ef       	ldi	r18, 0xFF	; 255
     5cc:	89 e6       	ldi	r24, 0x69	; 105
     5ce:	98 e1       	ldi	r25, 0x18	; 24
     5d0:	21 50       	subi	r18, 0x01	; 1
     5d2:	80 40       	sbci	r24, 0x00	; 0
     5d4:	90 40       	sbci	r25, 0x00	; 0
     5d6:	e1 f7       	brne	.-8      	; 0x5d0 <loop+0x3c>
     5d8:	00 c0       	rjmp	.+0      	; 0x5da <loop+0x46>
     5da:	00 00       	nop
		_delay_ms(500);	
	}
	if(digitalRead(RECBtn)==LOW){//Check whether Recording button is pressed.
     5dc:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <RECBtn>
     5e0:	0e 94 3a 06 	call	0xc74	; 0xc74 <digitalRead>
     5e4:	89 2b       	or	r24, r25
     5e6:	b9 f4       	brne	.+46     	; 0x616 <loop+0x82>
		RecordAudio(recfilename);
     5e8:	62 e3       	ldi	r22, 0x32	; 50
     5ea:	71 e0       	ldi	r23, 0x01	; 1
     5ec:	ce 01       	movw	r24, r28
     5ee:	01 96       	adiw	r24, 0x01	; 1
     5f0:	0e 94 d1 06 	call	0xda2	; 0xda2 <_ZN6StringC1EPKc>
     5f4:	ce 01       	movw	r24, r28
     5f6:	01 96       	adiw	r24, 0x01	; 1
     5f8:	0e 94 2e 02 	call	0x45c	; 0x45c <_Z11RecordAudio6String>
     5fc:	ce 01       	movw	r24, r28
     5fe:	01 96       	adiw	r24, 0x01	; 1
     600:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN6StringD1Ev>
     604:	2f ef       	ldi	r18, 0xFF	; 255
     606:	89 e6       	ldi	r24, 0x69	; 105
     608:	98 e1       	ldi	r25, 0x18	; 24
     60a:	21 50       	subi	r18, 0x01	; 1
     60c:	80 40       	sbci	r24, 0x00	; 0
     60e:	90 40       	sbci	r25, 0x00	; 0
     610:	e1 f7       	brne	.-8      	; 0x60a <loop+0x76>
     612:	00 c0       	rjmp	.+0      	; 0x614 <loop+0x80>
     614:	00 00       	nop
		_delay_ms(500);
	}
	
	
}
     616:	26 96       	adiw	r28, 0x06	; 6
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	f8 94       	cli
     61c:	de bf       	out	0x3e, r29	; 62
     61e:	0f be       	out	0x3f, r0	; 63
     620:	cd bf       	out	0x3d, r28	; 61
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	08 95       	ret

00000628 <__vector_1>:
    OCR2A = 179; // should give 11025 Hz, might need tweaking
    OCR2B = 80;
      // set the interrupt last thing so other stuff is not affected
}

ISR(INT0_vect){
     628:	1f 92       	push	r1
     62a:	0f 92       	push	r0
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	0f 92       	push	r0
     630:	11 24       	eor	r1, r1
     632:	2f 93       	push	r18
     634:	3f 93       	push	r19
     636:	4f 93       	push	r20
     638:	5f 93       	push	r21
     63a:	6f 93       	push	r22
     63c:	7f 93       	push	r23
     63e:	8f 93       	push	r24
     640:	9f 93       	push	r25
     642:	af 93       	push	r26
     644:	bf 93       	push	r27
     646:	ef 93       	push	r30
     648:	ff 93       	push	r31
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	cd b7       	in	r28, 0x3d	; 61
     650:	de b7       	in	r29, 0x3e	; 62
     652:	26 97       	sbiw	r28, 0x06	; 6
     654:	de bf       	out	0x3e, r29	; 62
     656:	cd bf       	out	0x3d, r28	; 61
	if(PlayFlag==1)
     658:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <PlayFlag>
     65c:	88 23       	and	r24, r24
     65e:	71 f0       	breq	.+28     	; 0x67c <__vector_1+0x54>
	{
		playAudio(playfilename);
     660:	6e e3       	ldi	r22, 0x3E	; 62
     662:	71 e0       	ldi	r23, 0x01	; 1
     664:	ce 01       	movw	r24, r28
     666:	01 96       	adiw	r24, 0x01	; 1
     668:	0e 94 d1 06 	call	0xda2	; 0xda2 <_ZN6StringC1EPKc>
     66c:	ce 01       	movw	r24, r28
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	0e 94 4b 01 	call	0x296	; 0x296 <_Z9playAudio6String>
     674:	ce 01       	movw	r24, r28
     676:	01 96       	adiw	r24, 0x01	; 1
     678:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN6StringD1Ev>
	}
	if(RecFlag==1)
     67c:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <RecFlag>
     680:	88 23       	and	r24, r24
     682:	71 f0       	breq	.+28     	; 0x6a0 <__vector_1+0x78>
	{
		RecordAudio(recfilename);
     684:	62 e3       	ldi	r22, 0x32	; 50
     686:	71 e0       	ldi	r23, 0x01	; 1
     688:	ce 01       	movw	r24, r28
     68a:	01 96       	adiw	r24, 0x01	; 1
     68c:	0e 94 d1 06 	call	0xda2	; 0xda2 <_ZN6StringC1EPKc>
     690:	ce 01       	movw	r24, r28
     692:	01 96       	adiw	r24, 0x01	; 1
     694:	0e 94 2e 02 	call	0x45c	; 0x45c <_Z11RecordAudio6String>
     698:	ce 01       	movw	r24, r28
     69a:	01 96       	adiw	r24, 0x01	; 1
     69c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <_ZN6StringD1Ev>
	}
	
}
     6a0:	26 96       	adiw	r28, 0x06	; 6
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	de bf       	out	0x3e, r29	; 62
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	cd bf       	out	0x3d, r28	; 61
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	ff 91       	pop	r31
     6b2:	ef 91       	pop	r30
     6b4:	bf 91       	pop	r27
     6b6:	af 91       	pop	r26
     6b8:	9f 91       	pop	r25
     6ba:	8f 91       	pop	r24
     6bc:	7f 91       	pop	r23
     6be:	6f 91       	pop	r22
     6c0:	5f 91       	pop	r21
     6c2:	4f 91       	pop	r20
     6c4:	3f 91       	pop	r19
     6c6:	2f 91       	pop	r18
     6c8:	0f 90       	pop	r0
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	0f 90       	pop	r0
     6ce:	1f 90       	pop	r1
     6d0:	18 95       	reti

000006d2 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	08 95       	ret

000006d8 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     6d8:	08 95       	ret

000006da <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     6da:	1f 92       	push	r1
     6dc:	0f 92       	push	r0
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	0f 92       	push	r0
     6e2:	11 24       	eor	r1, r1
     6e4:	2f 93       	push	r18
     6e6:	8f 93       	push	r24
     6e8:	9f 93       	push	r25
     6ea:	ef 93       	push	r30
     6ec:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     6ee:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <Serial+0x10>
     6f2:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <Serial+0x11>
     6f6:	80 81       	ld	r24, Z
     6f8:	e0 91 4b 02 	lds	r30, 0x024B	; 0x80024b <Serial+0x16>
     6fc:	f0 91 4c 02 	lds	r31, 0x024C	; 0x80024c <Serial+0x17>
     700:	82 fd       	sbrc	r24, 2
     702:	12 c0       	rjmp	.+36     	; 0x728 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     704:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     706:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <Serial+0x19>
     70a:	8f 5f       	subi	r24, 0xFF	; 255
     70c:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     70e:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <Serial+0x1a>
     712:	82 17       	cp	r24, r18
     714:	51 f0       	breq	.+20     	; 0x72a <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     716:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <Serial+0x19>
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	eb 5c       	subi	r30, 0xCB	; 203
     71e:	fd 4f       	sbci	r31, 0xFD	; 253
     720:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     722:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <Serial+0x19>
     726:	01 c0       	rjmp	.+2      	; 0x72a <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     728:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     72a:	ff 91       	pop	r31
     72c:	ef 91       	pop	r30
     72e:	9f 91       	pop	r25
     730:	8f 91       	pop	r24
     732:	2f 91       	pop	r18
     734:	0f 90       	pop	r0
     736:	0f be       	out	0x3f, r0	; 63
     738:	0f 90       	pop	r0
     73a:	1f 90       	pop	r1
     73c:	18 95       	reti

0000073e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     73e:	1f 92       	push	r1
     740:	0f 92       	push	r0
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	0f 92       	push	r0
     746:	11 24       	eor	r1, r1
     748:	2f 93       	push	r18
     74a:	3f 93       	push	r19
     74c:	4f 93       	push	r20
     74e:	5f 93       	push	r21
     750:	6f 93       	push	r22
     752:	7f 93       	push	r23
     754:	8f 93       	push	r24
     756:	9f 93       	push	r25
     758:	af 93       	push	r26
     75a:	bf 93       	push	r27
     75c:	ef 93       	push	r30
     75e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     760:	85 e3       	ldi	r24, 0x35	; 53
     762:	92 e0       	ldi	r25, 0x02	; 2
     764:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     768:	ff 91       	pop	r31
     76a:	ef 91       	pop	r30
     76c:	bf 91       	pop	r27
     76e:	af 91       	pop	r26
     770:	9f 91       	pop	r25
     772:	8f 91       	pop	r24
     774:	7f 91       	pop	r23
     776:	6f 91       	pop	r22
     778:	5f 91       	pop	r21
     77a:	4f 91       	pop	r20
     77c:	3f 91       	pop	r19
     77e:	2f 91       	pop	r18
     780:	0f 90       	pop	r0
     782:	0f be       	out	0x3f, r0	; 63
     784:	0f 90       	pop	r0
     786:	1f 90       	pop	r1
     788:	18 95       	reti

0000078a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     78a:	85 e3       	ldi	r24, 0x35	; 53
     78c:	92 e0       	ldi	r25, 0x02	; 2
     78e:	0e 94 9b 1a 	call	0x3536	; 0x3536 <_ZN14HardwareSerial9availableEv>
     792:	21 e0       	ldi	r18, 0x01	; 1
     794:	89 2b       	or	r24, r25
     796:	09 f4       	brne	.+2      	; 0x79a <_Z17Serial0_availablev+0x10>
     798:	20 e0       	ldi	r18, 0x00	; 0
}
     79a:	82 2f       	mov	r24, r18
     79c:	08 95       	ret

0000079e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     79e:	e5 e3       	ldi	r30, 0x35	; 53
     7a0:	f2 e0       	ldi	r31, 0x02	; 2
     7a2:	13 82       	std	Z+3, r1	; 0x03
     7a4:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     7a6:	88 ee       	ldi	r24, 0xE8	; 232
     7a8:	93 e0       	ldi	r25, 0x03	; 3
     7aa:	a0 e0       	ldi	r26, 0x00	; 0
     7ac:	b0 e0       	ldi	r27, 0x00	; 0
     7ae:	84 83       	std	Z+4, r24	; 0x04
     7b0:	95 83       	std	Z+5, r25	; 0x05
     7b2:	a6 83       	std	Z+6, r26	; 0x06
     7b4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     7b6:	8f ec       	ldi	r24, 0xCF	; 207
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	91 83       	std	Z+1, r25	; 0x01
     7bc:	80 83       	st	Z, r24
     7be:	85 ec       	ldi	r24, 0xC5	; 197
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	95 87       	std	Z+13, r25	; 0x0d
     7c4:	84 87       	std	Z+12, r24	; 0x0c
     7c6:	84 ec       	ldi	r24, 0xC4	; 196
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	97 87       	std	Z+15, r25	; 0x0f
     7cc:	86 87       	std	Z+14, r24	; 0x0e
     7ce:	80 ec       	ldi	r24, 0xC0	; 192
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	91 8b       	std	Z+17, r25	; 0x11
     7d4:	80 8b       	std	Z+16, r24	; 0x10
     7d6:	81 ec       	ldi	r24, 0xC1	; 193
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	93 8b       	std	Z+19, r25	; 0x13
     7dc:	82 8b       	std	Z+18, r24	; 0x12
     7de:	82 ec       	ldi	r24, 0xC2	; 194
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	95 8b       	std	Z+21, r25	; 0x15
     7e4:	84 8b       	std	Z+20, r24	; 0x14
     7e6:	86 ec       	ldi	r24, 0xC6	; 198
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	97 8b       	std	Z+23, r25	; 0x17
     7ec:	86 8b       	std	Z+22, r24	; 0x16
     7ee:	11 8e       	std	Z+25, r1	; 0x19
     7f0:	12 8e       	std	Z+26, r1	; 0x1a
     7f2:	13 8e       	std	Z+27, r1	; 0x1b
     7f4:	14 8e       	std	Z+28, r1	; 0x1c
     7f6:	08 95       	ret

000007f8 <initVariant>:
     7f8:	08 95       	ret

000007fa <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     7fa:	0e 94 6b 05 	call	0xad6	; 0xad6 <init>

	initVariant();
     7fe:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     802:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     806:	cc ed       	ldi	r28, 0xDC	; 220
     808:	da e1       	ldi	r29, 0x1A	; 26
#endif
	
	setup();
    
	for (;;) {
		loop();
     80a:	0e 94 ca 02 	call	0x594	; 0x594 <loop>
		if (serialEventRun) serialEventRun();
     80e:	20 97       	sbiw	r28, 0x00	; 0
     810:	e1 f3       	breq	.-8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     812:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <_Z14serialEventRunv>
     816:	f9 cf       	rjmp	.-14     	; 0x80a <__DATA_REGION_LENGTH__+0xa>

00000818 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     818:	cf 92       	push	r12
     81a:	df 92       	push	r13
     81c:	ef 92       	push	r14
     81e:	ff 92       	push	r15
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	6c 01       	movw	r12, r24
     82a:	7a 01       	movw	r14, r20
     82c:	8b 01       	movw	r16, r22
     82e:	c0 e0       	ldi	r28, 0x00	; 0
     830:	d0 e0       	ldi	r29, 0x00	; 0
     832:	ce 15       	cp	r28, r14
     834:	df 05       	cpc	r29, r15
     836:	81 f0       	breq	.+32     	; 0x858 <_ZN5Print5writeEPKhj+0x40>
     838:	d8 01       	movw	r26, r16
     83a:	6d 91       	ld	r22, X+
     83c:	8d 01       	movw	r16, r26
     83e:	d6 01       	movw	r26, r12
     840:	ed 91       	ld	r30, X+
     842:	fc 91       	ld	r31, X
     844:	01 90       	ld	r0, Z+
     846:	f0 81       	ld	r31, Z
     848:	e0 2d       	mov	r30, r0
     84a:	c6 01       	movw	r24, r12
     84c:	09 95       	icall
     84e:	89 2b       	or	r24, r25
     850:	11 f0       	breq	.+4      	; 0x856 <_ZN5Print5writeEPKhj+0x3e>
     852:	21 96       	adiw	r28, 0x01	; 1
     854:	ee cf       	rjmp	.-36     	; 0x832 <_ZN5Print5writeEPKhj+0x1a>
     856:	7e 01       	movw	r14, r28
     858:	c7 01       	movw	r24, r14
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	df 90       	pop	r13
     868:	cf 90       	pop	r12
     86a:	08 95       	ret

0000086c <_ZN5Print5writeEPKc>:
     86c:	61 15       	cp	r22, r1
     86e:	71 05       	cpc	r23, r1
     870:	79 f0       	breq	.+30     	; 0x890 <_ZN5Print5writeEPKc+0x24>
     872:	fb 01       	movw	r30, r22
     874:	01 90       	ld	r0, Z+
     876:	00 20       	and	r0, r0
     878:	e9 f7       	brne	.-6      	; 0x874 <_ZN5Print5writeEPKc+0x8>
     87a:	31 97       	sbiw	r30, 0x01	; 1
     87c:	af 01       	movw	r20, r30
     87e:	46 1b       	sub	r20, r22
     880:	57 0b       	sbc	r21, r23
     882:	dc 01       	movw	r26, r24
     884:	ed 91       	ld	r30, X+
     886:	fc 91       	ld	r31, X
     888:	02 80       	ldd	r0, Z+2	; 0x02
     88a:	f3 81       	ldd	r31, Z+3	; 0x03
     88c:	e0 2d       	mov	r30, r0
     88e:	09 94       	ijmp
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	08 95       	ret

00000896 <_ZN5Print5printEPKc>:
     896:	0c 94 36 04 	jmp	0x86c	; 0x86c <_ZN5Print5writeEPKc>

0000089a <_ZN5Print5printEc>:
     89a:	dc 01       	movw	r26, r24
     89c:	ed 91       	ld	r30, X+
     89e:	fc 91       	ld	r31, X
     8a0:	01 90       	ld	r0, Z+
     8a2:	f0 81       	ld	r31, Z
     8a4:	e0 2d       	mov	r30, r0
     8a6:	09 94       	ijmp

000008a8 <_ZN5Print7printlnEv>:
     8a8:	6c e9       	ldi	r22, 0x9C	; 156
     8aa:	71 e0       	ldi	r23, 0x01	; 1
     8ac:	0c 94 36 04 	jmp	0x86c	; 0x86c <_ZN5Print5writeEPKc>

000008b0 <_ZN5Print11printNumberEmh>:
     8b0:	8f 92       	push	r8
     8b2:	9f 92       	push	r9
     8b4:	af 92       	push	r10
     8b6:	bf 92       	push	r11
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
     8c8:	a1 97       	sbiw	r28, 0x21	; 33
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	cd bf       	out	0x3d, r28	; 61
     8d4:	7c 01       	movw	r14, r24
     8d6:	fa 01       	movw	r30, r20
     8d8:	cb 01       	movw	r24, r22
     8da:	19 a2       	std	Y+33, r1	; 0x21
     8dc:	22 30       	cpi	r18, 0x02	; 2
     8de:	08 f4       	brcc	.+2      	; 0x8e2 <_ZN5Print11printNumberEmh+0x32>
     8e0:	2a e0       	ldi	r18, 0x0A	; 10
     8e2:	8e 01       	movw	r16, r28
     8e4:	0f 5d       	subi	r16, 0xDF	; 223
     8e6:	1f 4f       	sbci	r17, 0xFF	; 255
     8e8:	82 2e       	mov	r8, r18
     8ea:	91 2c       	mov	r9, r1
     8ec:	a1 2c       	mov	r10, r1
     8ee:	b1 2c       	mov	r11, r1
     8f0:	bf 01       	movw	r22, r30
     8f2:	a5 01       	movw	r20, r10
     8f4:	94 01       	movw	r18, r8
     8f6:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__udivmodsi4>
     8fa:	f9 01       	movw	r30, r18
     8fc:	ca 01       	movw	r24, r20
     8fe:	01 50       	subi	r16, 0x01	; 1
     900:	11 09       	sbc	r17, r1
     902:	6a 30       	cpi	r22, 0x0A	; 10
     904:	10 f4       	brcc	.+4      	; 0x90a <__stack+0xb>
     906:	60 5d       	subi	r22, 0xD0	; 208
     908:	01 c0       	rjmp	.+2      	; 0x90c <__stack+0xd>
     90a:	69 5c       	subi	r22, 0xC9	; 201
     90c:	d8 01       	movw	r26, r16
     90e:	6c 93       	st	X, r22
     910:	23 2b       	or	r18, r19
     912:	24 2b       	or	r18, r20
     914:	25 2b       	or	r18, r21
     916:	61 f7       	brne	.-40     	; 0x8f0 <_ZN5Print11printNumberEmh+0x40>
     918:	b8 01       	movw	r22, r16
     91a:	c7 01       	movw	r24, r14
     91c:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN5Print5writeEPKc>
     920:	a1 96       	adiw	r28, 0x21	; 33
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	bf 90       	pop	r11
     93a:	af 90       	pop	r10
     93c:	9f 90       	pop	r9
     93e:	8f 90       	pop	r8
     940:	08 95       	ret

00000942 <_ZN5Print5printEmi>:
     942:	21 15       	cp	r18, r1
     944:	31 05       	cpc	r19, r1
     946:	41 f4       	brne	.+16     	; 0x958 <_ZN5Print5printEmi+0x16>
     948:	dc 01       	movw	r26, r24
     94a:	ed 91       	ld	r30, X+
     94c:	fc 91       	ld	r31, X
     94e:	01 90       	ld	r0, Z+
     950:	f0 81       	ld	r31, Z
     952:	e0 2d       	mov	r30, r0
     954:	64 2f       	mov	r22, r20
     956:	09 94       	ijmp
     958:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <_ZN5Print11printNumberEmh>

0000095c <_ZN5Print5printEji>:
     95c:	9a 01       	movw	r18, r20
     95e:	ab 01       	movw	r20, r22
     960:	60 e0       	ldi	r22, 0x00	; 0
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	0c 94 a1 04 	jmp	0x942	; 0x942 <_ZN5Print5printEmi>

00000968 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     968:	cf 92       	push	r12
     96a:	df 92       	push	r13
     96c:	ef 92       	push	r14
     96e:	ff 92       	push	r15
     970:	0f 93       	push	r16
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
  if (base == 0) {
     978:	21 15       	cp	r18, r1
     97a:	31 05       	cpc	r19, r1
     97c:	81 f4       	brne	.+32     	; 0x99e <_ZN5Print5printEli+0x36>
    return write(n);
     97e:	dc 01       	movw	r26, r24
     980:	ed 91       	ld	r30, X+
     982:	fc 91       	ld	r31, X
     984:	01 90       	ld	r0, Z+
     986:	f0 81       	ld	r31, Z
     988:	e0 2d       	mov	r30, r0
     98a:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	ff 90       	pop	r15
     996:	ef 90       	pop	r14
     998:	df 90       	pop	r13
     99a:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     99c:	09 94       	ijmp
  } else if (base == 10) {
     99e:	2a 30       	cpi	r18, 0x0A	; 10
     9a0:	31 05       	cpc	r19, r1
     9a2:	01 f5       	brne	.+64     	; 0x9e4 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
     9a4:	77 ff       	sbrs	r23, 7
     9a6:	1d c0       	rjmp	.+58     	; 0x9e2 <_ZN5Print5printEli+0x7a>
     9a8:	6a 01       	movw	r12, r20
     9aa:	7b 01       	movw	r14, r22
     9ac:	ec 01       	movw	r28, r24
      int t = print('-');
     9ae:	6d e2       	ldi	r22, 0x2D	; 45
     9b0:	0e 94 4d 04 	call	0x89a	; 0x89a <_ZN5Print5printEc>
     9b4:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     9b6:	44 27       	eor	r20, r20
     9b8:	55 27       	eor	r21, r21
     9ba:	ba 01       	movw	r22, r20
     9bc:	4c 19       	sub	r20, r12
     9be:	5d 09       	sbc	r21, r13
     9c0:	6e 09       	sbc	r22, r14
     9c2:	7f 09       	sbc	r23, r15
     9c4:	2a e0       	ldi	r18, 0x0A	; 10
     9c6:	ce 01       	movw	r24, r28
     9c8:	0e 94 58 04 	call	0x8b0	; 0x8b0 <_ZN5Print11printNumberEmh>
     9cc:	80 0f       	add	r24, r16
     9ce:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	ff 90       	pop	r15
     9da:	ef 90       	pop	r14
     9dc:	df 90       	pop	r13
     9de:	cf 90       	pop	r12
     9e0:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     9e2:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	1f 91       	pop	r17
     9ea:	0f 91       	pop	r16
     9ec:	ff 90       	pop	r15
     9ee:	ef 90       	pop	r14
     9f0:	df 90       	pop	r13
     9f2:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     9f4:	0c 94 58 04 	jmp	0x8b0	; 0x8b0 <_ZN5Print11printNumberEmh>

000009f8 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     9f8:	9a 01       	movw	r18, r20
  return print((long) n, base);
     9fa:	ab 01       	movw	r20, r22
     9fc:	77 0f       	add	r23, r23
     9fe:	66 0b       	sbc	r22, r22
     a00:	77 0b       	sbc	r23, r23
     a02:	0c 94 b4 04 	jmp	0x968	; 0x968 <_ZN5Print5printEli>

00000a06 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
     a10:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <_ZN5Print5printEii>
     a14:	8c 01       	movw	r16, r24
  n += println();
     a16:	ce 01       	movw	r24, r28
     a18:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_ZN5Print7printlnEv>
  return n;
}
     a1c:	80 0f       	add	r24, r16
     a1e:	91 1f       	adc	r25, r17
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	08 95       	ret

00000a2a <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     a2a:	1f 92       	push	r1
     a2c:	0f 92       	push	r0
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	0f 92       	push	r0
     a32:	11 24       	eor	r1, r1
     a34:	2f 93       	push	r18
     a36:	3f 93       	push	r19
     a38:	8f 93       	push	r24
     a3a:	9f 93       	push	r25
     a3c:	af 93       	push	r26
     a3e:	bf 93       	push	r27
     a40:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <timer0_millis>
     a44:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <timer0_millis+0x1>
     a48:	a0 91 95 04 	lds	r26, 0x0495	; 0x800495 <timer0_millis+0x2>
     a4c:	b0 91 96 04 	lds	r27, 0x0496	; 0x800496 <timer0_millis+0x3>
     a50:	30 91 92 04 	lds	r19, 0x0492	; 0x800492 <timer0_fract>
     a54:	23 e0       	ldi	r18, 0x03	; 3
     a56:	23 0f       	add	r18, r19
     a58:	2d 37       	cpi	r18, 0x7D	; 125
     a5a:	20 f4       	brcc	.+8      	; 0xa64 <__vector_16+0x3a>
     a5c:	01 96       	adiw	r24, 0x01	; 1
     a5e:	a1 1d       	adc	r26, r1
     a60:	b1 1d       	adc	r27, r1
     a62:	05 c0       	rjmp	.+10     	; 0xa6e <__vector_16+0x44>
     a64:	26 e8       	ldi	r18, 0x86	; 134
     a66:	23 0f       	add	r18, r19
     a68:	02 96       	adiw	r24, 0x02	; 2
     a6a:	a1 1d       	adc	r26, r1
     a6c:	b1 1d       	adc	r27, r1
     a6e:	20 93 92 04 	sts	0x0492, r18	; 0x800492 <timer0_fract>
     a72:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <timer0_millis>
     a76:	90 93 94 04 	sts	0x0494, r25	; 0x800494 <timer0_millis+0x1>
     a7a:	a0 93 95 04 	sts	0x0495, r26	; 0x800495 <timer0_millis+0x2>
     a7e:	b0 93 96 04 	sts	0x0496, r27	; 0x800496 <timer0_millis+0x3>
     a82:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <timer0_overflow_count>
     a86:	90 91 98 04 	lds	r25, 0x0498	; 0x800498 <timer0_overflow_count+0x1>
     a8a:	a0 91 99 04 	lds	r26, 0x0499	; 0x800499 <timer0_overflow_count+0x2>
     a8e:	b0 91 9a 04 	lds	r27, 0x049A	; 0x80049a <timer0_overflow_count+0x3>
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	a1 1d       	adc	r26, r1
     a96:	b1 1d       	adc	r27, r1
     a98:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <timer0_overflow_count>
     a9c:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <timer0_overflow_count+0x1>
     aa0:	a0 93 99 04 	sts	0x0499, r26	; 0x800499 <timer0_overflow_count+0x2>
     aa4:	b0 93 9a 04 	sts	0x049A, r27	; 0x80049a <timer0_overflow_count+0x3>
     aa8:	bf 91       	pop	r27
     aaa:	af 91       	pop	r26
     aac:	9f 91       	pop	r25
     aae:	8f 91       	pop	r24
     ab0:	3f 91       	pop	r19
     ab2:	2f 91       	pop	r18
     ab4:	0f 90       	pop	r0
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	0f 90       	pop	r0
     aba:	1f 90       	pop	r1
     abc:	18 95       	reti

00000abe <millis>:
     abe:	2f b7       	in	r18, 0x3f	; 63
     ac0:	f8 94       	cli
     ac2:	60 91 93 04 	lds	r22, 0x0493	; 0x800493 <timer0_millis>
     ac6:	70 91 94 04 	lds	r23, 0x0494	; 0x800494 <timer0_millis+0x1>
     aca:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <timer0_millis+0x2>
     ace:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <timer0_millis+0x3>
     ad2:	2f bf       	out	0x3f, r18	; 63
     ad4:	08 95       	ret

00000ad6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     ad6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     ad8:	84 b5       	in	r24, 0x24	; 36
     ada:	82 60       	ori	r24, 0x02	; 2
     adc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     ade:	84 b5       	in	r24, 0x24	; 36
     ae0:	81 60       	ori	r24, 0x01	; 1
     ae2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     ae4:	85 b5       	in	r24, 0x25	; 37
     ae6:	82 60       	ori	r24, 0x02	; 2
     ae8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     aea:	85 b5       	in	r24, 0x25	; 37
     aec:	81 60       	ori	r24, 0x01	; 1
     aee:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     af0:	ee e6       	ldi	r30, 0x6E	; 110
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	80 81       	ld	r24, Z
     af6:	81 60       	ori	r24, 0x01	; 1
     af8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     afa:	e1 e8       	ldi	r30, 0x81	; 129
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     b00:	80 81       	ld	r24, Z
     b02:	82 60       	ori	r24, 0x02	; 2
     b04:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     b06:	80 81       	ld	r24, Z
     b08:	81 60       	ori	r24, 0x01	; 1
     b0a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     b0c:	e0 e8       	ldi	r30, 0x80	; 128
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	80 81       	ld	r24, Z
     b12:	81 60       	ori	r24, 0x01	; 1
     b14:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     b16:	e1 eb       	ldi	r30, 0xB1	; 177
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	80 81       	ld	r24, Z
     b1c:	84 60       	ori	r24, 0x04	; 4
     b1e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     b20:	e0 eb       	ldi	r30, 0xB0	; 176
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z
     b26:	81 60       	ori	r24, 0x01	; 1
     b28:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     b2a:	ea e7       	ldi	r30, 0x7A	; 122
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	80 81       	ld	r24, Z
     b30:	84 60       	ori	r24, 0x04	; 4
     b32:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     b34:	80 81       	ld	r24, Z
     b36:	82 60       	ori	r24, 0x02	; 2
     b38:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     b3a:	80 81       	ld	r24, Z
     b3c:	81 60       	ori	r24, 0x01	; 1
     b3e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     b40:	80 81       	ld	r24, Z
     b42:	80 68       	ori	r24, 0x80	; 128
     b44:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     b46:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     b4a:	08 95       	ret

00000b4c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     b4c:	83 30       	cpi	r24, 0x03	; 3
     b4e:	81 f0       	breq	.+32     	; 0xb70 <turnOffPWM+0x24>
     b50:	28 f4       	brcc	.+10     	; 0xb5c <turnOffPWM+0x10>
     b52:	81 30       	cpi	r24, 0x01	; 1
     b54:	99 f0       	breq	.+38     	; 0xb7c <turnOffPWM+0x30>
     b56:	82 30       	cpi	r24, 0x02	; 2
     b58:	a1 f0       	breq	.+40     	; 0xb82 <turnOffPWM+0x36>
     b5a:	08 95       	ret
     b5c:	87 30       	cpi	r24, 0x07	; 7
     b5e:	a9 f0       	breq	.+42     	; 0xb8a <turnOffPWM+0x3e>
     b60:	88 30       	cpi	r24, 0x08	; 8
     b62:	b9 f0       	breq	.+46     	; 0xb92 <turnOffPWM+0x46>
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	d1 f4       	brne	.+52     	; 0xb9c <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     b68:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     b6c:	8f 7d       	andi	r24, 0xDF	; 223
     b6e:	03 c0       	rjmp	.+6      	; 0xb76 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     b70:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     b74:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     b76:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     b7a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     b7c:	84 b5       	in	r24, 0x24	; 36
     b7e:	8f 77       	andi	r24, 0x7F	; 127
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     b82:	84 b5       	in	r24, 0x24	; 36
     b84:	8f 7d       	andi	r24, 0xDF	; 223
     b86:	84 bd       	out	0x24, r24	; 36
     b88:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     b8a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     b8e:	8f 77       	andi	r24, 0x7F	; 127
     b90:	03 c0       	rjmp	.+6      	; 0xb98 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     b92:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     b96:	8f 7d       	andi	r24, 0xDF	; 223
     b98:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     b9c:	08 95       	ret

00000b9e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	fc 01       	movw	r30, r24
     ba6:	e4 58       	subi	r30, 0x84	; 132
     ba8:	ff 4f       	sbci	r31, 0xFF	; 255
     baa:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     bac:	fc 01       	movw	r30, r24
     bae:	e0 57       	subi	r30, 0x70	; 112
     bb0:	ff 4f       	sbci	r31, 0xFF	; 255
     bb2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     bb4:	88 23       	and	r24, r24
     bb6:	61 f1       	breq	.+88     	; 0xc10 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	fc 01       	movw	r30, r24
     bc0:	e8 54       	subi	r30, 0x48	; 72
     bc2:	ff 4f       	sbci	r31, 0xFF	; 255
     bc4:	c5 91       	lpm	r28, Z+
     bc6:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     bc8:	fc 01       	movw	r30, r24
     bca:	e2 55       	subi	r30, 0x52	; 82
     bcc:	ff 4f       	sbci	r31, 0xFF	; 255
     bce:	a5 91       	lpm	r26, Z+
     bd0:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     bd2:	61 11       	cpse	r22, r1
     bd4:	09 c0       	rjmp	.+18     	; 0xbe8 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     bd6:	9f b7       	in	r25, 0x3f	; 63
                cli();
     bd8:	f8 94       	cli
		*reg &= ~bit;
     bda:	88 81       	ld	r24, Y
     bdc:	20 95       	com	r18
     bde:	82 23       	and	r24, r18
     be0:	88 83       	st	Y, r24
		*out &= ~bit;
     be2:	ec 91       	ld	r30, X
     be4:	2e 23       	and	r18, r30
     be6:	0b c0       	rjmp	.+22     	; 0xbfe <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     be8:	62 30       	cpi	r22, 0x02	; 2
     bea:	61 f4       	brne	.+24     	; 0xc04 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     bec:	9f b7       	in	r25, 0x3f	; 63
                cli();
     bee:	f8 94       	cli
		*reg &= ~bit;
     bf0:	88 81       	ld	r24, Y
     bf2:	32 2f       	mov	r19, r18
     bf4:	30 95       	com	r19
     bf6:	83 23       	and	r24, r19
     bf8:	88 83       	st	Y, r24
		*out |= bit;
     bfa:	ec 91       	ld	r30, X
     bfc:	2e 2b       	or	r18, r30
     bfe:	2c 93       	st	X, r18
		SREG = oldSREG;
     c00:	9f bf       	out	0x3f, r25	; 63
     c02:	06 c0       	rjmp	.+12     	; 0xc10 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     c04:	8f b7       	in	r24, 0x3f	; 63
                cli();
     c06:	f8 94       	cli
		*reg |= bit;
     c08:	e8 81       	ld	r30, Y
     c0a:	2e 2b       	or	r18, r30
     c0c:	28 83       	st	Y, r18
		SREG = oldSREG;
     c0e:	8f bf       	out	0x3f, r24	; 63
	}
}
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	08 95       	ret

00000c16 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     c16:	1f 93       	push	r17
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	f9 01       	movw	r30, r18
     c22:	e8 59       	subi	r30, 0x98	; 152
     c24:	ff 4f       	sbci	r31, 0xFF	; 255
     c26:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     c28:	f9 01       	movw	r30, r18
     c2a:	e4 58       	subi	r30, 0x84	; 132
     c2c:	ff 4f       	sbci	r31, 0xFF	; 255
     c2e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     c30:	f9 01       	movw	r30, r18
     c32:	e0 57       	subi	r30, 0x70	; 112
     c34:	ff 4f       	sbci	r31, 0xFF	; 255
     c36:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     c38:	cc 23       	and	r28, r28
     c3a:	c1 f0       	breq	.+48     	; 0xc6c <digitalWrite+0x56>
     c3c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     c3e:	81 11       	cpse	r24, r1
     c40:	0e 94 a6 05 	call	0xb4c	; 0xb4c <turnOffPWM>

	out = portOutputRegister(port);
     c44:	ec 2f       	mov	r30, r28
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	ee 0f       	add	r30, r30
     c4a:	ff 1f       	adc	r31, r31
     c4c:	e2 55       	subi	r30, 0x52	; 82
     c4e:	ff 4f       	sbci	r31, 0xFF	; 255
     c50:	a5 91       	lpm	r26, Z+
     c52:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     c54:	9f b7       	in	r25, 0x3f	; 63
	cli();
     c56:	f8 94       	cli

	if (val == LOW) {
     c58:	11 11       	cpse	r17, r1
     c5a:	04 c0       	rjmp	.+8      	; 0xc64 <digitalWrite+0x4e>
		*out &= ~bit;
     c5c:	8c 91       	ld	r24, X
     c5e:	d0 95       	com	r29
     c60:	d8 23       	and	r29, r24
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <digitalWrite+0x52>
	} else {
		*out |= bit;
     c64:	ec 91       	ld	r30, X
     c66:	de 2b       	or	r29, r30
     c68:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     c6a:	9f bf       	out	0x3f, r25	; 63
}
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	1f 91       	pop	r17
     c72:	08 95       	ret

00000c74 <digitalRead>:

int digitalRead(uint8_t pin)
{
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     c78:	28 2f       	mov	r18, r24
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	f9 01       	movw	r30, r18
     c7e:	e8 59       	subi	r30, 0x98	; 152
     c80:	ff 4f       	sbci	r31, 0xFF	; 255
     c82:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     c84:	f9 01       	movw	r30, r18
     c86:	e4 58       	subi	r30, 0x84	; 132
     c88:	ff 4f       	sbci	r31, 0xFF	; 255
     c8a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     c8c:	f9 01       	movw	r30, r18
     c8e:	e0 57       	subi	r30, 0x70	; 112
     c90:	ff 4f       	sbci	r31, 0xFF	; 255
     c92:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
     c94:	cc 23       	and	r28, r28
     c96:	91 f0       	breq	.+36     	; 0xcbc <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     c98:	81 11       	cpse	r24, r1
     c9a:	0e 94 a6 05 	call	0xb4c	; 0xb4c <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
     c9e:	ec 2f       	mov	r30, r28
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	ee 0f       	add	r30, r30
     ca4:	ff 1f       	adc	r31, r31
     ca6:	ec 55       	subi	r30, 0x5C	; 92
     ca8:	ff 4f       	sbci	r31, 0xFF	; 255
     caa:	a5 91       	lpm	r26, Z+
     cac:	b4 91       	lpm	r27, Z
     cae:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
     cb0:	ed 23       	and	r30, r29
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	21 f4       	brne	.+8      	; 0xcc0 <digitalRead+0x4c>
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <digitalRead+0x4c>
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	08 95       	ret

00000cc6 <_ZN6StringD1Ev>:
	*this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String()
{
	free(buffer);
     cc6:	fc 01       	movw	r30, r24
     cc8:	80 81       	ld	r24, Z
     cca:	91 81       	ldd	r25, Z+1	; 0x01
     ccc:	0c 94 70 1c 	jmp	0x38e0	; 0x38e0 <free>

00000cd0 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
}

void String::invalidate(void)
{
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
     cd6:	88 81       	ld	r24, Y
     cd8:	99 81       	ldd	r25, Y+1	; 0x01
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	11 f0       	breq	.+4      	; 0xce2 <_ZN6String10invalidateEv+0x12>
     cde:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <free>
	buffer = NULL;
     ce2:	19 82       	std	Y+1, r1	; 0x01
     ce4:	18 82       	st	Y, r1
	capacity = len = 0;
     ce6:	1d 82       	std	Y+5, r1	; 0x05
     ce8:	1c 82       	std	Y+4, r1	; 0x04
     cea:	1b 82       	std	Y+3, r1	; 0x03
     cec:	1a 82       	std	Y+2, r1	; 0x02
}
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	08 95       	ret

00000cf4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
     cf4:	0f 93       	push	r16
     cf6:	1f 93       	push	r17
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	ec 01       	movw	r28, r24
     cfe:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     d00:	6f 5f       	subi	r22, 0xFF	; 255
     d02:	7f 4f       	sbci	r23, 0xFF	; 255
     d04:	88 81       	ld	r24, Y
     d06:	99 81       	ldd	r25, Y+1	; 0x01
     d08:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <realloc>
	if (newbuffer) {
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	31 f0       	breq	.+12     	; 0xd1c <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
     d10:	99 83       	std	Y+1, r25	; 0x01
     d12:	88 83       	st	Y, r24
		capacity = maxStrLen;
     d14:	1b 83       	std	Y+3, r17	; 0x03
     d16:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	01 c0       	rjmp	.+2      	; 0xd1e <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
     d1c:	80 e0       	ldi	r24, 0x00	; 0
}
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	1f 91       	pop	r17
     d24:	0f 91       	pop	r16
     d26:	08 95       	ret

00000d28 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
     d2e:	88 81       	ld	r24, Y
     d30:	99 81       	ldd	r25, Y+1	; 0x01
     d32:	89 2b       	or	r24, r25
     d34:	29 f0       	breq	.+10     	; 0xd40 <_ZN6String7reserveEj+0x18>
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	9b 81       	ldd	r25, Y+3	; 0x03
     d3a:	86 17       	cp	r24, r22
     d3c:	97 07       	cpc	r25, r23
     d3e:	60 f4       	brcc	.+24     	; 0xd58 <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
     d40:	ce 01       	movw	r24, r28
     d42:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <_ZN6String12changeBufferEj>
     d46:	88 23       	and	r24, r24
     d48:	41 f0       	breq	.+16     	; 0xd5a <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	89 2b       	or	r24, r25
     d50:	19 f4       	brne	.+6      	; 0xd58 <_ZN6String7reserveEj+0x30>
     d52:	e8 81       	ld	r30, Y
     d54:	f9 81       	ldd	r31, Y+1	; 0x01
     d56:	10 82       	st	Z, r1
     d58:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	08 95       	ret

00000d60 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
     d60:	ef 92       	push	r14
     d62:	ff 92       	push	r15
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	ec 01       	movw	r28, r24
     d6e:	7b 01       	movw	r14, r22
     d70:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
     d72:	ba 01       	movw	r22, r20
     d74:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN6String7reserveEj>
     d78:	81 11       	cpse	r24, r1
     d7a:	04 c0       	rjmp	.+8      	; 0xd84 <_ZN6String4copyEPKcj+0x24>
		invalidate();
     d7c:	ce 01       	movw	r24, r28
     d7e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_ZN6String10invalidateEv>
		return *this;
     d82:	07 c0       	rjmp	.+14     	; 0xd92 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
     d84:	1d 83       	std	Y+5, r17	; 0x05
     d86:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
     d88:	b7 01       	movw	r22, r14
     d8a:	88 81       	ld	r24, Y
     d8c:	99 81       	ldd	r25, Y+1	; 0x01
     d8e:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <strcpy>
	return *this;
}
     d92:	ce 01       	movw	r24, r28
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	1f 91       	pop	r17
     d9a:	0f 91       	pop	r16
     d9c:	ff 90       	pop	r15
     d9e:	ef 90       	pop	r14
     da0:	08 95       	ret

00000da2 <_ZN6StringC1EPKc>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
     da2:	fc 01       	movw	r30, r24
     da4:	11 82       	std	Z+1, r1	; 0x01
     da6:	10 82       	st	Z, r1
	capacity = 0;
     da8:	13 82       	std	Z+3, r1	; 0x03
     daa:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
     dac:	15 82       	std	Z+5, r1	; 0x05
     dae:	14 82       	std	Z+4, r1	; 0x04
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
     db0:	61 15       	cp	r22, r1
     db2:	71 05       	cpc	r23, r1
     db4:	51 f0       	breq	.+20     	; 0xdca <_ZN6StringC1EPKc+0x28>
     db6:	fb 01       	movw	r30, r22
     db8:	01 90       	ld	r0, Z+
     dba:	00 20       	and	r0, r0
     dbc:	e9 f7       	brne	.-6      	; 0xdb8 <_ZN6StringC1EPKc+0x16>
     dbe:	31 97       	sbiw	r30, 0x01	; 1
     dc0:	af 01       	movw	r20, r30
     dc2:	46 1b       	sub	r20, r22
     dc4:	57 0b       	sbc	r21, r23
     dc6:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <_ZN6String4copyEPKcj>
     dca:	08 95       	ret

00000dcc <_ZN5SDLib4File5writeEh>:
// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	1f 92       	push	r1
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	69 83       	std	Y+1, r22	; 0x01
     dd8:	dc 01       	movw	r26, r24
     dda:	ed 91       	ld	r30, X+
     ddc:	fc 91       	ld	r31, X
     dde:	02 80       	ldd	r0, Z+2	; 0x02
     de0:	f3 81       	ldd	r31, Z+3	; 0x03
     de2:	e0 2d       	mov	r30, r0
     de4:	41 e0       	ldi	r20, 0x01	; 1
     de6:	50 e0       	ldi	r21, 0x00	; 0
     de8:	be 01       	movw	r22, r28
     dea:	6f 5f       	subi	r22, 0xFF	; 255
     dec:	7f 4f       	sbci	r23, 0xFF	; 255
     dee:	09 95       	icall
     df0:	0f 90       	pop	r0
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	08 95       	ret

00000df8 <_ZN5SDLib4File5writeEPKhj>:
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
     dfc:	ec 01       	movw	r28, r24
     dfe:	89 8d       	ldd	r24, Y+25	; 0x19
     e00:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e02:	00 97       	sbiw	r24, 0x00	; 0
     e04:	39 f4       	brne	.+14     	; 0xe14 <_ZN5SDLib4File5writeEPKhj+0x1c>
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	9b 83       	std	Y+3, r25	; 0x03
     e0c:	8a 83       	std	Y+2, r24	; 0x02
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0b c0       	rjmp	.+22     	; 0xe2a <_ZN5SDLib4File5writeEPKhj+0x32>
     e14:	fc 01       	movw	r30, r24
     e16:	13 82       	std	Z+3, r1	; 0x03
     e18:	12 82       	std	Z+2, r1	; 0x02
     e1a:	0e 94 0a 14 	call	0x2814	; 0x2814 <_ZN6SdFile5writeEPKvj>
     e1e:	e9 8d       	ldd	r30, Y+25	; 0x19
     e20:	fa 8d       	ldd	r31, Y+26	; 0x1a
     e22:	22 81       	ldd	r18, Z+2	; 0x02
     e24:	33 81       	ldd	r19, Z+3	; 0x03
     e26:	23 2b       	or	r18, r19
     e28:	71 f7       	brne	.-36     	; 0xe06 <_ZN5SDLib4File5writeEPKhj+0xe>
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	08 95       	ret

00000e30 <_ZN5SDLib4File5flushEv>:
     e30:	fc 01       	movw	r30, r24
     e32:	81 8d       	ldd	r24, Z+25	; 0x19
     e34:	92 8d       	ldd	r25, Z+26	; 0x1a
     e36:	00 97       	sbiw	r24, 0x00	; 0
     e38:	11 f0       	breq	.+4      	; 0xe3e <_ZN5SDLib4File5flushEv+0xe>
     e3a:	0c 94 6c 11 	jmp	0x22d8	; 0x22d8 <_ZN6SdFile4syncEv>
     e3e:	08 95       	ret

00000e40 <_ZN6SdFile4readEv>:
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	1f 92       	push	r1
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	41 e0       	ldi	r20, 0x01	; 1
     e4c:	50 e0       	ldi	r21, 0x00	; 0
     e4e:	be 01       	movw	r22, r28
     e50:	6f 5f       	subi	r22, 0xFF	; 255
     e52:	7f 4f       	sbci	r23, 0xFF	; 255
     e54:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <_ZN6SdFile4readEPvj>
     e58:	01 97       	sbiw	r24, 0x01	; 1
     e5a:	19 f4       	brne	.+6      	; 0xe62 <_ZN6SdFile4readEv+0x22>
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <_ZN6SdFile4readEv+0x26>
     e62:	8f ef       	ldi	r24, 0xFF	; 255
     e64:	9f ef       	ldi	r25, 0xFF	; 255
     e66:	0f 90       	pop	r0
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	08 95       	ret

00000e6e <_ZN5SDLib4File4readEv>:
     e6e:	fc 01       	movw	r30, r24
     e70:	81 8d       	ldd	r24, Z+25	; 0x19
     e72:	92 8d       	ldd	r25, Z+26	; 0x1a
     e74:	00 97       	sbiw	r24, 0x00	; 0
     e76:	11 f0       	breq	.+4      	; 0xe7c <_ZN5SDLib4File4readEv+0xe>
     e78:	0c 94 20 07 	jmp	0xe40	; 0xe40 <_ZN6SdFile4readEv>
     e7c:	8f ef       	ldi	r24, 0xFF	; 255
     e7e:	9f ef       	ldi	r25, 0xFF	; 255
     e80:	08 95       	ret

00000e82 <_ZN5SDLib4File4peekEv>:
     e82:	0f 93       	push	r16
     e84:	1f 93       	push	r17
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	fc 01       	movw	r30, r24
     e8c:	81 8d       	ldd	r24, Z+25	; 0x19
     e8e:	92 8d       	ldd	r25, Z+26	; 0x1a
     e90:	00 97       	sbiw	r24, 0x00	; 0
     e92:	b9 f0       	breq	.+46     	; 0xec2 <_ZN5SDLib4File4peekEv+0x40>
     e94:	ef 01       	movw	r28, r30
     e96:	0e 94 20 07 	call	0xe40	; 0xe40 <_ZN6SdFile4readEv>
     e9a:	8c 01       	movw	r16, r24
     e9c:	0f 3f       	cpi	r16, 0xFF	; 255
     e9e:	8f ef       	ldi	r24, 0xFF	; 255
     ea0:	18 07       	cpc	r17, r24
     ea2:	91 f0       	breq	.+36     	; 0xec8 <_ZN5SDLib4File4peekEv+0x46>
     ea4:	89 8d       	ldd	r24, Y+25	; 0x19
     ea6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ea8:	fc 01       	movw	r30, r24
     eaa:	42 85       	ldd	r20, Z+10	; 0x0a
     eac:	53 85       	ldd	r21, Z+11	; 0x0b
     eae:	64 85       	ldd	r22, Z+12	; 0x0c
     eb0:	75 85       	ldd	r23, Z+13	; 0x0d
     eb2:	41 50       	subi	r20, 0x01	; 1
     eb4:	51 09       	sbc	r21, r1
     eb6:	61 09       	sbc	r22, r1
     eb8:	71 09       	sbc	r23, r1
     eba:	0e 94 d5 10 	call	0x21aa	; 0x21aa <_ZN6SdFile7seekSetEm>
     ebe:	c8 01       	movw	r24, r16
     ec0:	05 c0       	rjmp	.+10     	; 0xecc <_ZN5SDLib4File4peekEv+0x4a>
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <_ZN5SDLib4File4peekEv+0x4a>
     ec8:	8f ef       	ldi	r24, 0xFF	; 255
     eca:	9f ef       	ldi	r25, 0xFF	; 255
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	08 95       	ret

00000ed6 <_ZN5SDLib4FileC1E6SdFilePKc>:
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	ec 01       	movw	r28, r24
     ee4:	7b 01       	movw	r14, r22
     ee6:	8a 01       	movw	r16, r20
     ee8:	1b 82       	std	Y+3, r1	; 0x03
     eea:	1a 82       	std	Y+2, r1	; 0x02
     eec:	88 ee       	ldi	r24, 0xE8	; 232
     eee:	93 e0       	ldi	r25, 0x03	; 3
     ef0:	a0 e0       	ldi	r26, 0x00	; 0
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	8c 83       	std	Y+4, r24	; 0x04
     ef6:	9d 83       	std	Y+5, r25	; 0x05
     ef8:	ae 83       	std	Y+6, r26	; 0x06
     efa:	bf 83       	std	Y+7, r27	; 0x07
     efc:	8f ea       	ldi	r24, 0xAF	; 175
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	99 83       	std	Y+1, r25	; 0x01
     f02:	88 83       	st	Y, r24
     f04:	8d e1       	ldi	r24, 0x1D	; 29
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <malloc>
     f0c:	9a 8f       	std	Y+26, r25	; 0x1a
     f0e:	89 8f       	std	Y+25, r24	; 0x19
     f10:	00 97       	sbiw	r24, 0x00	; 0
     f12:	79 f0       	breq	.+30     	; 0xf32 <_ZN5SDLib4FileC1E6SdFilePKc+0x5c>
     f14:	2d e1       	ldi	r18, 0x1D	; 29
     f16:	f7 01       	movw	r30, r14
     f18:	dc 01       	movw	r26, r24
     f1a:	01 90       	ld	r0, Z+
     f1c:	0d 92       	st	X+, r0
     f1e:	2a 95       	dec	r18
     f20:	e1 f7       	brne	.-8      	; 0xf1a <_ZN5SDLib4FileC1E6SdFilePKc+0x44>
     f22:	4c e0       	ldi	r20, 0x0C	; 12
     f24:	50 e0       	ldi	r21, 0x00	; 0
     f26:	b8 01       	movw	r22, r16
     f28:	ce 01       	movw	r24, r28
     f2a:	0c 96       	adiw	r24, 0x0c	; 12
     f2c:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <strncpy>
     f30:	18 8e       	std	Y+24, r1	; 0x18
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	ff 90       	pop	r15
     f3c:	ef 90       	pop	r14
     f3e:	08 95       	ret

00000f40 <_ZN5SDLib4FileC1Ev>:
     f40:	fc 01       	movw	r30, r24
     f42:	13 82       	std	Z+3, r1	; 0x03
     f44:	12 82       	std	Z+2, r1	; 0x02
     f46:	88 ee       	ldi	r24, 0xE8	; 232
     f48:	93 e0       	ldi	r25, 0x03	; 3
     f4a:	a0 e0       	ldi	r26, 0x00	; 0
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	84 83       	std	Z+4, r24	; 0x04
     f50:	95 83       	std	Z+5, r25	; 0x05
     f52:	a6 83       	std	Z+6, r26	; 0x06
     f54:	b7 83       	std	Z+7, r27	; 0x07
     f56:	8f ea       	ldi	r24, 0xAF	; 175
     f58:	91 e0       	ldi	r25, 0x01	; 1
     f5a:	91 83       	std	Z+1, r25	; 0x01
     f5c:	80 83       	st	Z, r24
     f5e:	12 8e       	std	Z+26, r1	; 0x1a
     f60:	11 8e       	std	Z+25, r1	; 0x19
     f62:	14 86       	std	Z+12, r1	; 0x0c
     f64:	08 95       	ret

00000f66 <_ZN5SDLib4File4seekEm>:
  if (_file)
    _file->sync();
}

boolean File::seek(uint32_t pos) {
  if (! _file) return false;
     f66:	fc 01       	movw	r30, r24
     f68:	81 8d       	ldd	r24, Z+25	; 0x19
     f6a:	92 8d       	ldd	r25, Z+26	; 0x1a
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	29 f0       	breq	.+10     	; 0xf7a <_ZN5SDLib4File4seekEm+0x14>

  return _file->seekSet(pos);
     f70:	0e 94 d5 10 	call	0x21aa	; 0x21aa <_ZN6SdFile7seekSetEm>
     f74:	91 e0       	ldi	r25, 0x01	; 1
     f76:	81 11       	cpse	r24, r1
     f78:	01 c0       	rjmp	.+2      	; 0xf7c <_ZN5SDLib4File4seekEm+0x16>
  if (_file)
    _file->sync();
}

boolean File::seek(uint32_t pos) {
  if (! _file) return false;
     f7a:	90 e0       	ldi	r25, 0x00	; 0

  return _file->seekSet(pos);
}
     f7c:	89 2f       	mov	r24, r25
     f7e:	08 95       	ret

00000f80 <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) return -1;
     f80:	dc 01       	movw	r26, r24
     f82:	59 96       	adiw	r26, 0x19	; 25
     f84:	ed 91       	ld	r30, X+
     f86:	fc 91       	ld	r31, X
     f88:	5a 97       	sbiw	r26, 0x1a	; 26
     f8a:	30 97       	sbiw	r30, 0x00	; 0
     f8c:	29 f0       	breq	.+10     	; 0xf98 <_ZN5SDLib4File8positionEv+0x18>
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
     f8e:	62 85       	ldd	r22, Z+10	; 0x0a
     f90:	73 85       	ldd	r23, Z+11	; 0x0b
     f92:	84 85       	ldd	r24, Z+12	; 0x0c
     f94:	95 85       	ldd	r25, Z+13	; 0x0d
  return _file->curPosition();
     f96:	08 95       	ret

  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) return -1;
     f98:	6f ef       	ldi	r22, 0xFF	; 255
     f9a:	7f ef       	ldi	r23, 0xFF	; 255
     f9c:	cb 01       	movw	r24, r22
  return _file->curPosition();
}
     f9e:	08 95       	ret

00000fa0 <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) return 0;
     fa0:	dc 01       	movw	r26, r24
     fa2:	59 96       	adiw	r26, 0x19	; 25
     fa4:	ed 91       	ld	r30, X+
     fa6:	fc 91       	ld	r31, X
     fa8:	5a 97       	sbiw	r26, 0x1a	; 26
     faa:	30 97       	sbiw	r30, 0x00	; 0
     fac:	29 f0       	breq	.+10     	; 0xfb8 <_ZN5SDLib4File4sizeEv+0x18>
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
     fae:	63 89       	ldd	r22, Z+19	; 0x13
     fb0:	74 89       	ldd	r23, Z+20	; 0x14
     fb2:	85 89       	ldd	r24, Z+21	; 0x15
     fb4:	96 89       	ldd	r25, Z+22	; 0x16
  return _file->fileSize();
     fb6:	08 95       	ret
  if (! _file) return -1;
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) return 0;
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	cb 01       	movw	r24, r22
  return _file->fileSize();
}
     fbe:	08 95       	ret

00000fc0 <_ZN5SDLib4File9availableEv>:
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
     fc0:	cf 92       	push	r12
     fc2:	df 92       	push	r13
     fc4:	ef 92       	push	r14
     fc6:	ff 92       	push	r15
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
  if (! _file) return 0;
     fcc:	fc 01       	movw	r30, r24
     fce:	21 8d       	ldd	r18, Z+25	; 0x19
     fd0:	32 8d       	ldd	r19, Z+26	; 0x1a
     fd2:	23 2b       	or	r18, r19
     fd4:	d9 f0       	breq	.+54     	; 0x100c <_ZN5SDLib4File9availableEv+0x4c>
     fd6:	ec 01       	movw	r28, r24

  uint32_t n = size() - position();
     fd8:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <_ZN5SDLib4File4sizeEv>
     fdc:	6b 01       	movw	r12, r22
     fde:	7c 01       	movw	r14, r24
     fe0:	ce 01       	movw	r24, r28
     fe2:	0e 94 c0 07 	call	0xf80	; 0xf80 <_ZN5SDLib4File8positionEv>

  return n > 0X7FFF ? 0X7FFF : n;
     fe6:	a7 01       	movw	r20, r14
     fe8:	96 01       	movw	r18, r12
     fea:	26 1b       	sub	r18, r22
     fec:	37 0b       	sbc	r19, r23
     fee:	48 0b       	sbc	r20, r24
     ff0:	59 0b       	sbc	r21, r25
     ff2:	da 01       	movw	r26, r20
     ff4:	c9 01       	movw	r24, r18
     ff6:	81 15       	cp	r24, r1
     ff8:	30 e8       	ldi	r19, 0x80	; 128
     ffa:	93 07       	cpc	r25, r19
     ffc:	a1 05       	cpc	r26, r1
     ffe:	b1 05       	cpc	r27, r1
    1000:	38 f0       	brcs	.+14     	; 0x1010 <_ZN5SDLib4File9availableEv+0x50>
    1002:	8f ef       	ldi	r24, 0xFF	; 255
    1004:	9f e7       	ldi	r25, 0x7F	; 127
    1006:	a0 e0       	ldi	r26, 0x00	; 0
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <_ZN5SDLib4File9availableEv+0x50>
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	90 e0       	ldi	r25, 0x00	; 0

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	ff 90       	pop	r15
    1016:	ef 90       	pop	r14
    1018:	df 90       	pop	r13
    101a:	cf 90       	pop	r12
    101c:	08 95       	ret

0000101e <_ZN5SDLib4File5closeEv>:
uint32_t File::size() {
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	ec 01       	movw	r28, r24
  if (_file) {
    1024:	89 8d       	ldd	r24, Y+25	; 0x19
    1026:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	41 f0       	breq	.+16     	; 0x103c <_ZN5SDLib4File5closeEv+0x1e>
    _file->close();
    102c:	0e 94 b3 11 	call	0x2366	; 0x2366 <_ZN6SdFile5closeEv>
    free(_file); 
    1030:	89 8d       	ldd	r24, Y+25	; 0x19
    1032:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1034:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <free>
    _file = 0;
    1038:	1a 8e       	std	Y+26, r1	; 0x1a
    103a:	19 8e       	std	Y+25, r1	; 0x19
    nfilecount--;
    Serial.print("Deleted ");
    Serial.println(nfilecount, DEC);
    */
  }
}
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	08 95       	ret

00001042 <_ZN5SDLib4FilecvbEv>:

File::operator bool() {
  if (_file) 
    1042:	dc 01       	movw	r26, r24
    1044:	59 96       	adiw	r26, 0x19	; 25
    1046:	ed 91       	ld	r30, X+
    1048:	fc 91       	ld	r31, X
    104a:	5a 97       	sbiw	r26, 0x1a	; 26
    104c:	30 97       	sbiw	r30, 0x00	; 0
    104e:	21 f0       	breq	.+8      	; 0x1058 <_ZN5SDLib4FilecvbEv+0x16>
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	95 81       	ldd	r25, Z+5	; 0x05
    1054:	91 11       	cpse	r25, r1
    1056:	01 c0       	rjmp	.+2      	; 0x105a <_ZN5SDLib4FilecvbEv+0x18>
    return  _file->isOpen();
  return false;
    1058:	80 e0       	ldi	r24, 0x00	; 0
}
    105a:	08 95       	ret

0000105c <_ZN5SDLib15callback_removeER6SdFilePKcbPv>:
}

void File::rewindDirectory(void) {  
  if (isDirectory())
    _file->rewind();
}
    105c:	44 23       	and	r20, r20
    105e:	39 f0       	breq	.+14     	; 0x106e <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x12>
    1060:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <_ZN6SdFile6removeEPS_PKc>
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	81 11       	cpse	r24, r1
    1068:	03 c0       	rjmp	.+6      	; 0x1070 <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x14>
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	01 c0       	rjmp	.+2      	; 0x1070 <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x14>
    106e:	91 e0       	ldi	r25, 0x01	; 1
    1070:	89 2f       	mov	r24, r25
    1072:	08 95       	ret

00001074 <_ZN8SdVolume4initEP7Sd2Card>:
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	ec 01       	movw	r28, r24
    107e:	8b 01       	movw	r16, r22
    1080:	41 e0       	ldi	r20, 0x01	; 1
    1082:	0e 94 4e 19 	call	0x329c	; 0x329c <_ZN8SdVolume4initEP7Sd2Cardh>
    1086:	81 11       	cpse	r24, r1
    1088:	09 c0       	rjmp	.+18     	; 0x109c <_ZN8SdVolume4initEP7Sd2Card+0x28>
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	b8 01       	movw	r22, r16
    108e:	ce 01       	movw	r24, r28
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	0c 94 4e 19 	jmp	0x329c	; 0x329c <_ZN8SdVolume4initEP7Sd2Cardh>
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	08 95       	ret

000010a8 <_ZN5SDLib20getNextPathComponentEPKcPjPc>:
    10a8:	ef 92       	push	r14
    10aa:	ff 92       	push	r15
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	da 01       	movw	r26, r20
    10b6:	eb 01       	movw	r28, r22
    10b8:	28 81       	ld	r18, Y
    10ba:	39 81       	ldd	r19, Y+1	; 0x01
    10bc:	fc 01       	movw	r30, r24
    10be:	e2 0f       	add	r30, r18
    10c0:	f3 1f       	adc	r31, r19
    10c2:	40 81       	ld	r20, Z
    10c4:	4f 32       	cpi	r20, 0x2F	; 47
    10c6:	11 f4       	brne	.+4      	; 0x10cc <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x24>
    10c8:	2f 5f       	subi	r18, 0xFF	; 255
    10ca:	3f 4f       	sbci	r19, 0xFF	; 255
    10cc:	8c 01       	movw	r16, r24
    10ce:	02 0f       	add	r16, r18
    10d0:	13 1f       	adc	r17, r19
    10d2:	7d 01       	movw	r14, r26
    10d4:	e0 e0       	ldi	r30, 0x00	; 0
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	e8 01       	movw	r28, r16
    10da:	59 91       	ld	r21, Y+
    10dc:	8e 01       	movw	r16, r28
    10de:	5f 32       	cpi	r21, 0x2F	; 47
    10e0:	59 f0       	breq	.+22     	; 0x10f8 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x50>
    10e2:	55 23       	and	r21, r21
    10e4:	49 f0       	breq	.+18     	; 0x10f8 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x50>
    10e6:	31 96       	adiw	r30, 0x01	; 1
    10e8:	2f 5f       	subi	r18, 0xFF	; 255
    10ea:	3f 4f       	sbci	r19, 0xFF	; 255
    10ec:	e7 01       	movw	r28, r14
    10ee:	59 93       	st	Y+, r21
    10f0:	7e 01       	movw	r14, r28
    10f2:	ec 30       	cpi	r30, 0x0C	; 12
    10f4:	f1 05       	cpc	r31, r1
    10f6:	81 f7       	brne	.-32     	; 0x10d8 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x30>
    10f8:	ea 0f       	add	r30, r26
    10fa:	fb 1f       	adc	r31, r27
    10fc:	10 82       	st	Z, r1
    10fe:	fc 01       	movw	r30, r24
    1100:	e2 0f       	add	r30, r18
    1102:	f3 1f       	adc	r31, r19
    1104:	40 81       	ld	r20, Z
    1106:	4f 32       	cpi	r20, 0x2F	; 47
    1108:	11 f4       	brne	.+4      	; 0x110e <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x66>
    110a:	2f 5f       	subi	r18, 0xFF	; 255
    110c:	3f 4f       	sbci	r19, 0xFF	; 255
    110e:	fb 01       	movw	r30, r22
    1110:	31 83       	std	Z+1, r19	; 0x01
    1112:	20 83       	st	Z, r18
    1114:	fc 01       	movw	r30, r24
    1116:	e2 0f       	add	r30, r18
    1118:	f3 1f       	adc	r31, r19
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 81       	ld	r25, Z
    111e:	91 11       	cpse	r25, r1
    1120:	01 c0       	rjmp	.+2      	; 0x1124 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x7c>
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	ff 90       	pop	r15
    112e:	ef 90       	pop	r14
    1130:	08 95       	ret

00001132 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>:
    1132:	4f 92       	push	r4
    1134:	5f 92       	push	r5
    1136:	6f 92       	push	r6
    1138:	7f 92       	push	r7
    113a:	8f 92       	push	r8
    113c:	9f 92       	push	r9
    113e:	af 92       	push	r10
    1140:	bf 92       	push	r11
    1142:	cf 92       	push	r12
    1144:	df 92       	push	r13
    1146:	ef 92       	push	r14
    1148:	ff 92       	push	r15
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	c9 54       	subi	r28, 0x49	; 73
    1158:	d1 09       	sbc	r29, r1
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	5c 01       	movw	r10, r24
    1166:	6b 01       	movw	r12, r22
    1168:	3a 01       	movw	r6, r20
    116a:	49 01       	movw	r8, r18
    116c:	19 a2       	std	Y+33, r1	; 0x21
    116e:	18 a2       	std	Y+32, r1	; 0x20
    1170:	83 ec       	ldi	r24, 0xC3	; 195
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	9f 8f       	std	Y+31, r25	; 0x1f
    1176:	8e 8f       	std	Y+30, r24	; 0x1e
    1178:	1b a2       	std	Y+35, r1	; 0x23
    117a:	1c 82       	std	Y+4, r1	; 0x04
    117c:	1b 82       	std	Y+3, r1	; 0x03
    117e:	9a 83       	std	Y+2, r25	; 0x02
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	1e 82       	std	Y+6, r1	; 0x06
    1184:	2a 96       	adiw	r28, 0x0a	; 10
    1186:	1f ae       	std	Y+63, r1	; 0x3f
    1188:	1e ae       	std	Y+62, r1	; 0x3e
    118a:	2a 97       	sbiw	r28, 0x0a	; 10
    118c:	8b 01       	movw	r16, r22
    118e:	7e 01       	movw	r14, r28
    1190:	8e e1       	ldi	r24, 0x1E	; 30
    1192:	e8 0e       	add	r14, r24
    1194:	f1 1c       	adc	r15, r1
    1196:	44 24       	eor	r4, r4
    1198:	43 94       	inc	r4
    119a:	ae 01       	movw	r20, r28
    119c:	45 5c       	subi	r20, 0xC5	; 197
    119e:	5f 4f       	sbci	r21, 0xFF	; 255
    11a0:	be 01       	movw	r22, r28
    11a2:	68 5b       	subi	r22, 0xB8	; 184
    11a4:	7f 4f       	sbci	r23, 0xFF	; 255
    11a6:	c5 01       	movw	r24, r10
    11a8:	0e 94 54 08 	call	0x10a8	; 0x10a8 <_ZN5SDLib20getNextPathComponentEPKcPjPc>
    11ac:	58 2e       	mov	r5, r24
    11ae:	48 2f       	mov	r20, r24
    11b0:	44 25       	eor	r20, r4
    11b2:	94 01       	movw	r18, r8
    11b4:	be 01       	movw	r22, r28
    11b6:	65 5c       	subi	r22, 0xC5	; 197
    11b8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ba:	c8 01       	movw	r24, r16
    11bc:	f3 01       	movw	r30, r6
    11be:	09 95       	icall
    11c0:	81 11       	cpse	r24, r1
    11c2:	08 c0       	rjmp	.+16     	; 0x11d4 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xa2>
    11c4:	0c 15       	cp	r16, r12
    11c6:	1d 05       	cpc	r17, r13
    11c8:	19 f0       	breq	.+6      	; 0x11d0 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x9e>
    11ca:	c8 01       	movw	r24, r16
    11cc:	0e 94 b3 11 	call	0x2366	; 0x2366 <_ZN6SdFile5closeEv>
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	27 c0       	rjmp	.+78     	; 0x1222 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xf0>
    11d4:	55 20       	and	r5, r5
    11d6:	b9 f0       	breq	.+46     	; 0x1206 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xd4>
    11d8:	21 e0       	ldi	r18, 0x01	; 1
    11da:	ae 01       	movw	r20, r28
    11dc:	45 5c       	subi	r20, 0xC5	; 197
    11de:	5f 4f       	sbci	r21, 0xFF	; 255
    11e0:	b8 01       	movw	r22, r16
    11e2:	c7 01       	movw	r24, r14
    11e4:	0e 94 db 12 	call	0x25b6	; 0x25b6 <_ZN6SdFile4openEPS_PKch>
    11e8:	58 2e       	mov	r5, r24
    11ea:	0c 15       	cp	r16, r12
    11ec:	1d 05       	cpc	r17, r13
    11ee:	99 f0       	breq	.+38     	; 0x1216 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xe4>
    11f0:	c8 01       	movw	r24, r16
    11f2:	0e 94 b3 11 	call	0x2366	; 0x2366 <_ZN6SdFile5closeEv>
    11f6:	55 20       	and	r5, r5
    11f8:	59 f3       	breq	.-42     	; 0x11d0 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x9e>
    11fa:	90 2f       	mov	r25, r16
    11fc:	81 2f       	mov	r24, r17
    11fe:	87 01       	movw	r16, r14
    1200:	e9 2e       	mov	r14, r25
    1202:	f8 2e       	mov	r15, r24
    1204:	ca cf       	rjmp	.-108    	; 0x119a <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x68>
    1206:	0c 15       	cp	r16, r12
    1208:	1d 05       	cpc	r17, r13
    120a:	19 f0       	breq	.+6      	; 0x1212 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xe0>
    120c:	c8 01       	movw	r24, r16
    120e:	0e 94 b3 11 	call	0x2366	; 0x2366 <_ZN6SdFile5closeEv>
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	06 c0       	rjmp	.+12     	; 0x1222 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xf0>
    1216:	88 23       	and	r24, r24
    1218:	d9 f2       	breq	.-74     	; 0x11d0 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x9e>
    121a:	8e 01       	movw	r16, r28
    121c:	0f 5f       	subi	r16, 0xFF	; 255
    121e:	1f 4f       	sbci	r17, 0xFF	; 255
    1220:	ec cf       	rjmp	.-40     	; 0x11fa <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xc8>
    1222:	c7 5b       	subi	r28, 0xB7	; 183
    1224:	df 4f       	sbci	r29, 0xFF	; 255
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
    1238:	ff 90       	pop	r15
    123a:	ef 90       	pop	r14
    123c:	df 90       	pop	r13
    123e:	cf 90       	pop	r12
    1240:	bf 90       	pop	r11
    1242:	af 90       	pop	r10
    1244:	9f 90       	pop	r9
    1246:	8f 90       	pop	r8
    1248:	7f 90       	pop	r7
    124a:	6f 90       	pop	r6
    124c:	5f 90       	pop	r5
    124e:	4f 90       	pop	r4
    1250:	08 95       	ret

00001252 <_ZN5SDLib7SDClass5beginEh>:
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	ec 01       	movw	r28, r24
    125c:	16 2f       	mov	r17, r22
    125e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1260:	88 23       	and	r24, r24
    1262:	21 f0       	breq	.+8      	; 0x126c <_ZN5SDLib7SDClass5beginEh+0x1a>
    1264:	ce 01       	movw	r24, r28
    1266:	8a 96       	adiw	r24, 0x2a	; 42
    1268:	0e 94 b3 11 	call	0x2366	; 0x2366 <_ZN6SdFile5closeEv>
    126c:	41 2f       	mov	r20, r17
    126e:	61 e0       	ldi	r22, 0x01	; 1
    1270:	ce 01       	movw	r24, r28
    1272:	0e 94 3f 0c 	call	0x187e	; 0x187e <_ZN7Sd2Card4initEhh>
    1276:	88 23       	and	r24, r24
    1278:	89 f0       	breq	.+34     	; 0x129c <_ZN5SDLib7SDClass5beginEh+0x4a>
    127a:	8e 01       	movw	r16, r28
    127c:	04 5f       	subi	r16, 0xF4	; 244
    127e:	1f 4f       	sbci	r17, 0xFF	; 255
    1280:	be 01       	movw	r22, r28
    1282:	c8 01       	movw	r24, r16
    1284:	0e 94 3a 08 	call	0x1074	; 0x1074 <_ZN8SdVolume4initEP7Sd2Card>
    1288:	88 23       	and	r24, r24
    128a:	41 f0       	breq	.+16     	; 0x129c <_ZN5SDLib7SDClass5beginEh+0x4a>
    128c:	b8 01       	movw	r22, r16
    128e:	ce 01       	movw	r24, r28
    1290:	8a 96       	adiw	r24, 0x2a	; 42
    1292:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <_ZN6SdFile8openRootEP8SdVolume>
    1296:	91 e0       	ldi	r25, 0x01	; 1
    1298:	81 11       	cpse	r24, r1
    129a:	01 c0       	rjmp	.+2      	; 0x129e <_ZN5SDLib7SDClass5beginEh+0x4c>
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	89 2f       	mov	r24, r25
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	1f 91       	pop	r17
    12a6:	0f 91       	pop	r16
    12a8:	08 95       	ret

000012aa <_ZN6SdFileC1ERKS_>:
    12aa:	fc 01       	movw	r30, r24
    12ac:	db 01       	movw	r26, r22
    12ae:	12 96       	adiw	r26, 0x02	; 2
    12b0:	8d 91       	ld	r24, X+
    12b2:	9c 91       	ld	r25, X
    12b4:	13 97       	sbiw	r26, 0x03	; 3
    12b6:	93 83       	std	Z+3, r25	; 0x03
    12b8:	82 83       	std	Z+2, r24	; 0x02
    12ba:	83 ec       	ldi	r24, 0xC3	; 195
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	91 83       	std	Z+1, r25	; 0x01
    12c0:	80 83       	st	Z, r24
    12c2:	14 96       	adiw	r26, 0x04	; 4
    12c4:	8c 91       	ld	r24, X
    12c6:	14 97       	sbiw	r26, 0x04	; 4
    12c8:	84 83       	std	Z+4, r24	; 0x04
    12ca:	15 96       	adiw	r26, 0x05	; 5
    12cc:	8c 91       	ld	r24, X
    12ce:	15 97       	sbiw	r26, 0x05	; 5
    12d0:	85 83       	std	Z+5, r24	; 0x05
    12d2:	16 96       	adiw	r26, 0x06	; 6
    12d4:	4d 91       	ld	r20, X+
    12d6:	5d 91       	ld	r21, X+
    12d8:	6d 91       	ld	r22, X+
    12da:	7c 91       	ld	r23, X
    12dc:	19 97       	sbiw	r26, 0x09	; 9
    12de:	46 83       	std	Z+6, r20	; 0x06
    12e0:	57 83       	std	Z+7, r21	; 0x07
    12e2:	60 87       	std	Z+8, r22	; 0x08
    12e4:	71 87       	std	Z+9, r23	; 0x09
    12e6:	1a 96       	adiw	r26, 0x0a	; 10
    12e8:	4d 91       	ld	r20, X+
    12ea:	5d 91       	ld	r21, X+
    12ec:	6d 91       	ld	r22, X+
    12ee:	7c 91       	ld	r23, X
    12f0:	1d 97       	sbiw	r26, 0x0d	; 13
    12f2:	42 87       	std	Z+10, r20	; 0x0a
    12f4:	53 87       	std	Z+11, r21	; 0x0b
    12f6:	64 87       	std	Z+12, r22	; 0x0c
    12f8:	75 87       	std	Z+13, r23	; 0x0d
    12fa:	1e 96       	adiw	r26, 0x0e	; 14
    12fc:	4d 91       	ld	r20, X+
    12fe:	5d 91       	ld	r21, X+
    1300:	6d 91       	ld	r22, X+
    1302:	7c 91       	ld	r23, X
    1304:	51 97       	sbiw	r26, 0x11	; 17
    1306:	46 87       	std	Z+14, r20	; 0x0e
    1308:	57 87       	std	Z+15, r21	; 0x0f
    130a:	60 8b       	std	Z+16, r22	; 0x10
    130c:	71 8b       	std	Z+17, r23	; 0x11
    130e:	52 96       	adiw	r26, 0x12	; 18
    1310:	8c 91       	ld	r24, X
    1312:	52 97       	sbiw	r26, 0x12	; 18
    1314:	82 8b       	std	Z+18, r24	; 0x12
    1316:	53 96       	adiw	r26, 0x13	; 19
    1318:	4d 91       	ld	r20, X+
    131a:	5d 91       	ld	r21, X+
    131c:	6d 91       	ld	r22, X+
    131e:	7c 91       	ld	r23, X
    1320:	56 97       	sbiw	r26, 0x16	; 22
    1322:	43 8b       	std	Z+19, r20	; 0x13
    1324:	54 8b       	std	Z+20, r21	; 0x14
    1326:	65 8b       	std	Z+21, r22	; 0x15
    1328:	76 8b       	std	Z+22, r23	; 0x16
    132a:	57 96       	adiw	r26, 0x17	; 23
    132c:	4d 91       	ld	r20, X+
    132e:	5d 91       	ld	r21, X+
    1330:	6d 91       	ld	r22, X+
    1332:	7c 91       	ld	r23, X
    1334:	5a 97       	sbiw	r26, 0x1a	; 26
    1336:	47 8b       	std	Z+23, r20	; 0x17
    1338:	50 8f       	std	Z+24, r21	; 0x18
    133a:	61 8f       	std	Z+25, r22	; 0x19
    133c:	72 8f       	std	Z+26, r23	; 0x1a
    133e:	5b 96       	adiw	r26, 0x1b	; 27
    1340:	8d 91       	ld	r24, X+
    1342:	9c 91       	ld	r25, X
    1344:	5c 97       	sbiw	r26, 0x1c	; 28
    1346:	94 8f       	std	Z+28, r25	; 0x1c
    1348:	83 8f       	std	Z+27, r24	; 0x1b
    134a:	08 95       	ret

0000134c <_ZN5SDLib7SDClass12getParentDirEPKcPi>:
    134c:	4f 92       	push	r4
    134e:	5f 92       	push	r5
    1350:	6f 92       	push	r6
    1352:	7f 92       	push	r7
    1354:	8f 92       	push	r8
    1356:	9f 92       	push	r9
    1358:	af 92       	push	r10
    135a:	bf 92       	push	r11
    135c:	cf 92       	push	r12
    135e:	df 92       	push	r13
    1360:	ef 92       	push	r14
    1362:	ff 92       	push	r15
    1364:	0f 93       	push	r16
    1366:	1f 93       	push	r17
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    1370:	c7 54       	subi	r28, 0x47	; 71
    1372:	d1 09       	sbc	r29, r1
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	5c 01       	movw	r10, r24
    1380:	4a 01       	movw	r8, r20
    1382:	39 01       	movw	r6, r18
    1384:	19 a2       	std	Y+33, r1	; 0x21
    1386:	18 a2       	std	Y+32, r1	; 0x20
    1388:	83 ec       	ldi	r24, 0xC3	; 195
    138a:	91 e0       	ldi	r25, 0x01	; 1
    138c:	9f 8f       	std	Y+31, r25	; 0x1f
    138e:	8e 8f       	std	Y+30, r24	; 0x1e
    1390:	1b a2       	std	Y+35, r1	; 0x23
    1392:	1c 82       	std	Y+4, r1	; 0x04
    1394:	1b 82       	std	Y+3, r1	; 0x03
    1396:	9a 83       	std	Y+2, r25	; 0x02
    1398:	89 83       	std	Y+1, r24	; 0x01
    139a:	1e 82       	std	Y+6, r1	; 0x06
    139c:	64 5f       	subi	r22, 0xF4	; 244
    139e:	7f 4f       	sbci	r23, 0xFF	; 255
    13a0:	6e 01       	movw	r12, r28
    13a2:	8e e1       	ldi	r24, 0x1E	; 30
    13a4:	c8 0e       	add	r12, r24
    13a6:	d1 1c       	adc	r13, r1
    13a8:	c6 01       	movw	r24, r12
    13aa:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <_ZN6SdFile8openRootEP8SdVolume>
    13ae:	74 01       	movw	r14, r8
    13b0:	8e 01       	movw	r16, r28
    13b2:	0f 5f       	subi	r16, 0xFF	; 255
    13b4:	1f 4f       	sbci	r17, 0xFF	; 255
    13b6:	5c 2c       	mov	r5, r12
    13b8:	4d 2c       	mov	r4, r13
    13ba:	6f e2       	ldi	r22, 0x2F	; 47
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	c7 01       	movw	r24, r14
    13c0:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <strchr>
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	09 f4       	brne	.+2      	; 0x13ca <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x7e>
    13c8:	43 c0       	rjmp	.+134    	; 0x1450 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x104>
    13ca:	f7 01       	movw	r30, r14
    13cc:	20 81       	ld	r18, Z
    13ce:	2f 32       	cpi	r18, 0x2F	; 47
    13d0:	71 f4       	brne	.+28     	; 0x13ee <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xa2>
    13d2:	ff ef       	ldi	r31, 0xFF	; 255
    13d4:	ef 1a       	sub	r14, r31
    13d6:	ff 0a       	sbc	r15, r31
    13d8:	90 2f       	mov	r25, r16
    13da:	81 2f       	mov	r24, r17
    13dc:	05 2d       	mov	r16, r5
    13de:	14 2d       	mov	r17, r4
    13e0:	2c 01       	movw	r4, r24
    13e2:	c2 01       	movw	r24, r4
    13e4:	50 2e       	mov	r5, r16
    13e6:	41 2e       	mov	r4, r17
    13e8:	09 2f       	mov	r16, r25
    13ea:	18 2f       	mov	r17, r24
    13ec:	e6 cf       	rjmp	.-52     	; 0x13ba <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x6e>
    13ee:	8e 19       	sub	r24, r14
    13f0:	8d 30       	cpi	r24, 0x0D	; 13
    13f2:	08 f0       	brcs	.+2      	; 0x13f6 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xaa>
    13f4:	8c e0       	ldi	r24, 0x0C	; 12
    13f6:	c8 2e       	mov	r12, r24
    13f8:	d1 2c       	mov	r13, r1
    13fa:	a6 01       	movw	r20, r12
    13fc:	b7 01       	movw	r22, r14
    13fe:	ce 01       	movw	r24, r28
    1400:	cb 96       	adiw	r24, 0x3b	; 59
    1402:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <strncpy>
    1406:	eb e3       	ldi	r30, 0x3B	; 59
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	ec 0f       	add	r30, r28
    140c:	fd 1f       	adc	r31, r29
    140e:	ec 0d       	add	r30, r12
    1410:	fd 1d       	adc	r31, r13
    1412:	10 82       	st	Z, r1
    1414:	c8 01       	movw	r24, r16
    1416:	0e 94 b3 11 	call	0x2366	; 0x2366 <_ZN6SdFile5closeEv>
    141a:	21 e0       	ldi	r18, 0x01	; 1
    141c:	ae 01       	movw	r20, r28
    141e:	45 5c       	subi	r20, 0xC5	; 197
    1420:	5f 4f       	sbci	r21, 0xFF	; 255
    1422:	65 2d       	mov	r22, r5
    1424:	74 2d       	mov	r23, r4
    1426:	c8 01       	movw	r24, r16
    1428:	0e 94 db 12 	call	0x25b6	; 0x25b6 <_ZN6SdFile4openEPS_PKch>
    142c:	81 11       	cpse	r24, r1
    142e:	09 c0       	rjmp	.+18     	; 0x1442 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xf6>
    1430:	f5 01       	movw	r30, r10
    1432:	13 82       	std	Z+3, r1	; 0x03
    1434:	12 82       	std	Z+2, r1	; 0x02
    1436:	83 ec       	ldi	r24, 0xC3	; 195
    1438:	91 e0       	ldi	r25, 0x01	; 1
    143a:	91 83       	std	Z+1, r25	; 0x01
    143c:	80 83       	st	Z, r24
    143e:	15 82       	std	Z+5, r1	; 0x05
    1440:	11 c0       	rjmp	.+34     	; 0x1464 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x118>
    1442:	ec 0c       	add	r14, r12
    1444:	fd 1c       	adc	r15, r13
    1446:	85 2d       	mov	r24, r5
    1448:	94 2d       	mov	r25, r4
    144a:	0e 94 b3 11 	call	0x2366	; 0x2366 <_ZN6SdFile5closeEv>
    144e:	c9 cf       	rjmp	.-110    	; 0x13e2 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x96>
    1450:	e8 18       	sub	r14, r8
    1452:	f9 08       	sbc	r15, r9
    1454:	f3 01       	movw	r30, r6
    1456:	f1 82       	std	Z+1, r15	; 0x01
    1458:	e0 82       	st	Z, r14
    145a:	65 2d       	mov	r22, r5
    145c:	74 2d       	mov	r23, r4
    145e:	c5 01       	movw	r24, r10
    1460:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN6SdFileC1ERKS_>
    1464:	c5 01       	movw	r24, r10
    1466:	c9 5b       	subi	r28, 0xB9	; 185
    1468:	df 4f       	sbci	r29, 0xFF	; 255
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	f8 94       	cli
    146e:	de bf       	out	0x3e, r29	; 62
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	cd bf       	out	0x3d, r28	; 61
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	1f 91       	pop	r17
    147a:	0f 91       	pop	r16
    147c:	ff 90       	pop	r15
    147e:	ef 90       	pop	r14
    1480:	df 90       	pop	r13
    1482:	cf 90       	pop	r12
    1484:	bf 90       	pop	r11
    1486:	af 90       	pop	r10
    1488:	9f 90       	pop	r9
    148a:	8f 90       	pop	r8
    148c:	7f 90       	pop	r7
    148e:	6f 90       	pop	r6
    1490:	5f 90       	pop	r5
    1492:	4f 90       	pop	r4
    1494:	08 95       	ret

00001496 <_ZN5SDLib7SDClass4openEPKch>:
    1496:	df 92       	push	r13
    1498:	ef 92       	push	r14
    149a:	ff 92       	push	r15
    149c:	0f 93       	push	r16
    149e:	1f 93       	push	r17
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	c9 55       	subi	r28, 0x59	; 89
    14aa:	d1 09       	sbc	r29, r1
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	7c 01       	movw	r14, r24
    14b8:	8a 01       	movw	r16, r20
    14ba:	d2 2e       	mov	r13, r18
    14bc:	9e 01       	movw	r18, r28
    14be:	28 5a       	subi	r18, 0xA8	; 168
    14c0:	3f 4f       	sbci	r19, 0xFF	; 255
    14c2:	ce 01       	movw	r24, r28
    14c4:	cb 96       	adiw	r24, 0x3b	; 59
    14c6:	0e 94 a6 09 	call	0x134c	; 0x134c <_ZN5SDLib7SDClass12getParentDirEPKcPi>
    14ca:	6a 96       	adiw	r28, 0x1a	; 26
    14cc:	8e ad       	ldd	r24, Y+62	; 0x3e
    14ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    14d0:	6a 97       	sbiw	r28, 0x1a	; 26
    14d2:	08 0f       	add	r16, r24
    14d4:	19 1f       	adc	r17, r25
    14d6:	f8 01       	movw	r30, r16
    14d8:	80 81       	ld	r24, Z
    14da:	81 11       	cpse	r24, r1
    14dc:	0a c0       	rjmp	.+20     	; 0x14f2 <_ZN5SDLib7SDClass4openEPKch+0x5c>
    14de:	be 01       	movw	r22, r28
    14e0:	65 5c       	subi	r22, 0xC5	; 197
    14e2:	7f 4f       	sbci	r23, 0xFF	; 255
    14e4:	ce 01       	movw	r24, r28
    14e6:	01 96       	adiw	r24, 0x01	; 1
    14e8:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN6SdFileC1ERKS_>
    14ec:	4d eb       	ldi	r20, 0xBD	; 189
    14ee:	51 e0       	ldi	r21, 0x01	; 1
    14f0:	33 c0       	rjmp	.+102    	; 0x1558 <_ZN5SDLib7SDClass4openEPKch+0xc2>
    14f2:	19 a2       	std	Y+33, r1	; 0x21
    14f4:	18 a2       	std	Y+32, r1	; 0x20
    14f6:	83 ec       	ldi	r24, 0xC3	; 195
    14f8:	91 e0       	ldi	r25, 0x01	; 1
    14fa:	9f 8f       	std	Y+31, r25	; 0x1f
    14fc:	8e 8f       	std	Y+30, r24	; 0x1e
    14fe:	1b a2       	std	Y+35, r1	; 0x23
    1500:	21 96       	adiw	r28, 0x01	; 1
    1502:	8f ad       	ldd	r24, Y+63	; 0x3f
    1504:	21 97       	sbiw	r28, 0x01	; 1
    1506:	81 11       	cpse	r24, r1
    1508:	04 c0       	rjmp	.+8      	; 0x1512 <_ZN5SDLib7SDClass4openEPKch+0x7c>
    150a:	c7 01       	movw	r24, r14
    150c:	0e 94 a0 07 	call	0xf40	; 0xf40 <_ZN5SDLib4FileC1Ev>
    1510:	29 c0       	rjmp	.+82     	; 0x1564 <_ZN5SDLib7SDClass4openEPKch+0xce>
    1512:	2d 2d       	mov	r18, r13
    1514:	a8 01       	movw	r20, r16
    1516:	be 01       	movw	r22, r28
    1518:	65 5c       	subi	r22, 0xC5	; 197
    151a:	7f 4f       	sbci	r23, 0xFF	; 255
    151c:	ce 01       	movw	r24, r28
    151e:	4e 96       	adiw	r24, 0x1e	; 30
    1520:	0e 94 db 12 	call	0x25b6	; 0x25b6 <_ZN6SdFile4openEPS_PKch>
    1524:	88 23       	and	r24, r24
    1526:	89 f3       	breq	.-30     	; 0x150a <_ZN5SDLib7SDClass4openEPKch+0x74>
    1528:	ce 01       	movw	r24, r28
    152a:	cb 96       	adiw	r24, 0x3b	; 59
    152c:	0e 94 b3 11 	call	0x2366	; 0x2366 <_ZN6SdFile5closeEv>
    1530:	8d 2d       	mov	r24, r13
    1532:	86 70       	andi	r24, 0x06	; 6
    1534:	86 30       	cpi	r24, 0x06	; 6
    1536:	41 f4       	brne	.+16     	; 0x1548 <_ZN5SDLib7SDClass4openEPKch+0xb2>
    1538:	49 a9       	ldd	r20, Y+49	; 0x31
    153a:	5a a9       	ldd	r21, Y+50	; 0x32
    153c:	6b a9       	ldd	r22, Y+51	; 0x33
    153e:	7c a9       	ldd	r23, Y+52	; 0x34
    1540:	ce 01       	movw	r24, r28
    1542:	4e 96       	adiw	r24, 0x1e	; 30
    1544:	0e 94 d5 10 	call	0x21aa	; 0x21aa <_ZN6SdFile7seekSetEm>
    1548:	be 01       	movw	r22, r28
    154a:	62 5e       	subi	r22, 0xE2	; 226
    154c:	7f 4f       	sbci	r23, 0xFF	; 255
    154e:	ce 01       	movw	r24, r28
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN6SdFileC1ERKS_>
    1556:	a8 01       	movw	r20, r16
    1558:	be 01       	movw	r22, r28
    155a:	6f 5f       	subi	r22, 0xFF	; 255
    155c:	7f 4f       	sbci	r23, 0xFF	; 255
    155e:	c7 01       	movw	r24, r14
    1560:	0e 94 6b 07 	call	0xed6	; 0xed6 <_ZN5SDLib4FileC1E6SdFilePKc>
    1564:	c7 01       	movw	r24, r14
    1566:	c7 5a       	subi	r28, 0xA7	; 167
    1568:	df 4f       	sbci	r29, 0xFF	; 255
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	de bf       	out	0x3e, r29	; 62
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	cd bf       	out	0x3d, r28	; 61
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	1f 91       	pop	r17
    157a:	0f 91       	pop	r16
    157c:	ff 90       	pop	r15
    157e:	ef 90       	pop	r14
    1580:	df 90       	pop	r13
    1582:	08 95       	ret

00001584 <_ZN5SDLib7SDClass6removeEPKc>:
    1584:	fb 01       	movw	r30, r22
    1586:	bc 01       	movw	r22, r24
    1588:	66 5d       	subi	r22, 0xD6	; 214
    158a:	7f 4f       	sbci	r23, 0xFF	; 255
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	4e e2       	ldi	r20, 0x2E	; 46
    1592:	58 e0       	ldi	r21, 0x08	; 8
    1594:	cf 01       	movw	r24, r30
    1596:	0c 94 99 08 	jmp	0x1132	; 0x1132 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>

0000159a <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    159a:	eb e9       	ldi	r30, 0x9B	; 155
    159c:	f4 e0       	ldi	r31, 0x04	; 4
    159e:	15 82       	std	Z+5, r1	; 0x05
    15a0:	16 82       	std	Z+6, r1	; 0x06
    15a2:	11 86       	std	Z+9, r1	; 0x09
    15a4:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    15a6:	82 e0       	ldi	r24, 0x02	; 2
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	a0 e0       	ldi	r26, 0x00	; 0
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	84 87       	std	Z+12, r24	; 0x0c
    15b0:	95 87       	std	Z+13, r25	; 0x0d
    15b2:	a6 87       	std	Z+14, r26	; 0x0e
    15b4:	b7 87       	std	Z+15, r27	; 0x0f
    15b6:	13 a2       	std	Z+35, r1	; 0x23
    15b8:	15 a6       	std	Z+45, r1	; 0x2d
    15ba:	14 a6       	std	Z+44, r1	; 0x2c
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    15bc:	83 ec       	ldi	r24, 0xC3	; 195
    15be:	91 e0       	ldi	r25, 0x01	; 1
    15c0:	93 a7       	std	Z+43, r25	; 0x2b
    15c2:	82 a7       	std	Z+42, r24	; 0x2a
    15c4:	17 a6       	std	Z+47, r1	; 0x2f
    15c6:	08 95       	ret

000015c8 <_ZN8SPIClass14endTransactionEv.part.3>:

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    15c8:	9f b7       	in	r25, 0x3f	; 63
    15ca:	f8 94       	cli
    15cc:	20 91 f2 06 	lds	r18, 0x06F2	; 0x8006f2 <_ZN8SPIClass13interruptModeE>
    15d0:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <_ZN8SPIClass13interruptSaveE>
    15d4:	21 30       	cpi	r18, 0x01	; 1
    15d6:	19 f4       	brne	.+6      	; 0x15de <_ZN8SPIClass14endTransactionEv.part.3+0x16>
    15d8:	8d bb       	out	0x1d, r24	; 29
    15da:	9f bf       	out	0x3f, r25	; 63
    15dc:	08 95       	ret
    15de:	8f bf       	out	0x3f, r24	; 63
    15e0:	08 95       	ret

000015e2 <_ZN11SPISettingsC1Emhh>:
    15e2:	0f 93       	push	r16
    15e4:	fc 01       	movw	r30, r24
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	92 e1       	ldi	r25, 0x12	; 18
    15ea:	aa e7       	ldi	r26, 0x7A	; 122
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	48 17       	cp	r20, r24
    15f2:	59 07       	cpc	r21, r25
    15f4:	6a 07       	cpc	r22, r26
    15f6:	7b 07       	cpc	r23, r27
    15f8:	40 f4       	brcc	.+16     	; 0x160a <_ZN11SPISettingsC1Emhh+0x28>
    15fa:	b6 95       	lsr	r27
    15fc:	a7 95       	ror	r26
    15fe:	97 95       	ror	r25
    1600:	87 95       	ror	r24
    1602:	3f 5f       	subi	r19, 0xFF	; 255
    1604:	36 30       	cpi	r19, 0x06	; 6
    1606:	a1 f7       	brne	.-24     	; 0x15f0 <_ZN11SPISettingsC1Emhh+0xe>
    1608:	37 e0       	ldi	r19, 0x07	; 7
    160a:	91 e0       	ldi	r25, 0x01	; 1
    160c:	93 27       	eor	r25, r19
    160e:	22 23       	and	r18, r18
    1610:	11 f0       	breq	.+4      	; 0x1616 <_ZN11SPISettingsC1Emhh+0x34>
    1612:	20 e5       	ldi	r18, 0x50	; 80
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <_ZN11SPISettingsC1Emhh+0x36>
    1616:	20 e7       	ldi	r18, 0x70	; 112
    1618:	0c 70       	andi	r16, 0x0C	; 12
    161a:	89 2f       	mov	r24, r25
    161c:	86 95       	lsr	r24
    161e:	08 2b       	or	r16, r24
    1620:	02 2b       	or	r16, r18
    1622:	00 83       	st	Z, r16
    1624:	91 70       	andi	r25, 0x01	; 1
    1626:	91 83       	std	Z+1, r25	; 0x01
    1628:	0f 91       	pop	r16
    162a:	08 95       	ret

0000162c <_ZN8SPIClass16beginTransactionE11SPISettings>:
    162c:	20 91 f2 06 	lds	r18, 0x06F2	; 0x8006f2 <_ZN8SPIClass13interruptModeE>
    1630:	22 23       	and	r18, r18
    1632:	99 f0       	breq	.+38     	; 0x165a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    1634:	4f b7       	in	r20, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	20 91 f2 06 	lds	r18, 0x06F2	; 0x8006f2 <_ZN8SPIClass13interruptModeE>
    163c:	21 30       	cpi	r18, 0x01	; 1
    163e:	59 f4       	brne	.+22     	; 0x1656 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    1640:	2d b3       	in	r18, 0x1d	; 29
    1642:	20 93 f0 06 	sts	0x06F0, r18	; 0x8006f0 <_ZN8SPIClass13interruptSaveE>
    1646:	3d b3       	in	r19, 0x1d	; 29
    1648:	20 91 f1 06 	lds	r18, 0x06F1	; 0x8006f1 <_ZN8SPIClass13interruptMaskE>
    164c:	20 95       	com	r18
    164e:	23 23       	and	r18, r19
    1650:	2d bb       	out	0x1d, r18	; 29
    1652:	4f bf       	out	0x3f, r20	; 63
    1654:	02 c0       	rjmp	.+4      	; 0x165a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    1656:	40 93 f0 06 	sts	0x06F0, r20	; 0x8006f0 <_ZN8SPIClass13interruptSaveE>
    165a:	8c bd       	out	0x2c, r24	; 44
    165c:	9d bd       	out	0x2d, r25	; 45
    165e:	08 95       	ret

00001660 <_ZN8SPIClass8transferEh>:
    1660:	8e bd       	out	0x2e, r24	; 46
    1662:	00 00       	nop
    1664:	0d b4       	in	r0, 0x2d	; 45
    1666:	07 fe       	sbrs	r0, 7
    1668:	fd cf       	rjmp	.-6      	; 0x1664 <_ZN8SPIClass8transferEh+0x4>
    166a:	8e b5       	in	r24, 0x2e	; 46
    166c:	08 95       	ret

0000166e <_ZL6spiRecv>:
    166e:	8f ef       	ldi	r24, 0xFF	; 255
    1670:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <_ZN8SPIClass8transferEh>

00001674 <_ZN7Sd2Card14chipSelectHighEv>:
    1674:	61 e0       	ldi	r22, 0x01	; 1
    1676:	fc 01       	movw	r30, r24
    1678:	84 81       	ldd	r24, Z+4	; 0x04
    167a:	0e 94 0b 06 	call	0xc16	; 0xc16 <digitalWrite>
    167e:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <_ZL20chip_select_asserted>
    1682:	88 23       	and	r24, r24
    1684:	39 f0       	breq	.+14     	; 0x1694 <_ZN7Sd2Card14chipSelectHighEv+0x20>
    1686:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <_ZL20chip_select_asserted>
    168a:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <_ZN8SPIClass13interruptModeE>
    168e:	81 11       	cpse	r24, r1
    1690:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <_ZN8SPIClass14endTransactionEv.part.3>
    1694:	08 95       	ret

00001696 <_ZN7Sd2Card13chipSelectLowEv>:
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	ec 01       	movw	r28, r24
    169c:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <_ZL20chip_select_asserted>
    16a0:	81 11       	cpse	r24, r1
    16a2:	09 c0       	rjmp	.+18     	; 0x16b6 <_ZN7Sd2Card13chipSelectLowEv+0x20>
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <_ZL20chip_select_asserted>
    16aa:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <_ZL8settings>
    16ae:	90 91 e6 04 	lds	r25, 0x04E6	; 0x8004e6 <_ZL8settings+0x1>
    16b2:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN8SPIClass16beginTransactionE11SPISettings>
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <digitalWrite>

000016c2 <_ZN7Sd2Card7readEndEv>:
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	ec 01       	movw	r28, r24
    16c8:	8e 81       	ldd	r24, Y+6	; 0x06
    16ca:	88 23       	and	r24, r24
    16cc:	89 f0       	breq	.+34     	; 0x16f0 <_ZN7Sd2Card7readEndEv+0x2e>
    16ce:	8f 81       	ldd	r24, Y+7	; 0x07
    16d0:	98 85       	ldd	r25, Y+8	; 0x08
    16d2:	9c 01       	movw	r18, r24
    16d4:	2f 5f       	subi	r18, 0xFF	; 255
    16d6:	3f 4f       	sbci	r19, 0xFF	; 255
    16d8:	38 87       	std	Y+8, r19	; 0x08
    16da:	2f 83       	std	Y+7, r18	; 0x07
    16dc:	82 30       	cpi	r24, 0x02	; 2
    16de:	92 40       	sbci	r25, 0x02	; 2
    16e0:	18 f4       	brcc	.+6      	; 0x16e8 <_ZN7Sd2Card7readEndEv+0x26>
    16e2:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZL6spiRecv>
    16e6:	f3 cf       	rjmp	.-26     	; 0x16ce <_ZN7Sd2Card7readEndEv+0xc>
    16e8:	ce 01       	movw	r24, r28
    16ea:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_ZN7Sd2Card14chipSelectHighEv>
    16ee:	1e 82       	std	Y+6, r1	; 0x06
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	08 95       	ret

000016f6 <_ZN7Sd2Card10setSckRateEh>:
    16f6:	0f 93       	push	r16
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	00 d0       	rcall	.+0      	; 0x16fe <_ZN7Sd2Card10setSckRateEh+0x8>
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    1702:	67 30       	cpi	r22, 0x07	; 7
    1704:	28 f0       	brcs	.+10     	; 0x1710 <_ZN7Sd2Card10setSckRateEh+0x1a>
    1706:	26 e1       	ldi	r18, 0x16	; 22
    1708:	fc 01       	movw	r30, r24
    170a:	25 83       	std	Z+5, r18	; 0x05
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	47 c0       	rjmp	.+142    	; 0x179e <_ZN7Sd2Card10setSckRateEh+0xa8>
    1710:	62 30       	cpi	r22, 0x02	; 2
    1712:	f9 f0       	breq	.+62     	; 0x1752 <_ZN7Sd2Card10setSckRateEh+0x5c>
    1714:	58 f4       	brcc	.+22     	; 0x172c <_ZN7Sd2Card10setSckRateEh+0x36>
    1716:	66 23       	and	r22, r22
    1718:	a9 f0       	breq	.+42     	; 0x1744 <_ZN7Sd2Card10setSckRateEh+0x4e>
    171a:	61 30       	cpi	r22, 0x01	; 1
    171c:	79 f5       	brne	.+94     	; 0x177c <_ZN7Sd2Card10setSckRateEh+0x86>
    171e:	00 e0       	ldi	r16, 0x00	; 0
    1720:	21 e0       	ldi	r18, 0x01	; 1
    1722:	40 e0       	ldi	r20, 0x00	; 0
    1724:	59 e0       	ldi	r21, 0x09	; 9
    1726:	6d e3       	ldi	r22, 0x3D	; 61
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	2e c0       	rjmp	.+92     	; 0x1788 <_ZN7Sd2Card10setSckRateEh+0x92>
    172c:	64 30       	cpi	r22, 0x04	; 4
    172e:	f9 f0       	breq	.+62     	; 0x176e <_ZN7Sd2Card10setSckRateEh+0x78>
    1730:	b8 f0       	brcs	.+46     	; 0x1760 <_ZN7Sd2Card10setSckRateEh+0x6a>
    1732:	65 30       	cpi	r22, 0x05	; 5
    1734:	19 f5       	brne	.+70     	; 0x177c <_ZN7Sd2Card10setSckRateEh+0x86>
    1736:	00 e0       	ldi	r16, 0x00	; 0
    1738:	21 e0       	ldi	r18, 0x01	; 1
    173a:	40 e9       	ldi	r20, 0x90	; 144
    173c:	50 ed       	ldi	r21, 0xD0	; 208
    173e:	63 e0       	ldi	r22, 0x03	; 3
    1740:	70 e0       	ldi	r23, 0x00	; 0
    1742:	22 c0       	rjmp	.+68     	; 0x1788 <_ZN7Sd2Card10setSckRateEh+0x92>
    1744:	00 e0       	ldi	r16, 0x00	; 0
    1746:	21 e0       	ldi	r18, 0x01	; 1
    1748:	40 e4       	ldi	r20, 0x40	; 64
    174a:	58 e7       	ldi	r21, 0x78	; 120
    174c:	6d e7       	ldi	r22, 0x7D	; 125
    174e:	71 e0       	ldi	r23, 0x01	; 1
    1750:	1b c0       	rjmp	.+54     	; 0x1788 <_ZN7Sd2Card10setSckRateEh+0x92>
    1752:	00 e0       	ldi	r16, 0x00	; 0
    1754:	21 e0       	ldi	r18, 0x01	; 1
    1756:	40 e8       	ldi	r20, 0x80	; 128
    1758:	54 e8       	ldi	r21, 0x84	; 132
    175a:	6e e1       	ldi	r22, 0x1E	; 30
    175c:	70 e0       	ldi	r23, 0x00	; 0
    175e:	14 c0       	rjmp	.+40     	; 0x1788 <_ZN7Sd2Card10setSckRateEh+0x92>
    1760:	00 e0       	ldi	r16, 0x00	; 0
    1762:	21 e0       	ldi	r18, 0x01	; 1
    1764:	40 e4       	ldi	r20, 0x40	; 64
    1766:	52 e4       	ldi	r21, 0x42	; 66
    1768:	6f e0       	ldi	r22, 0x0F	; 15
    176a:	70 e0       	ldi	r23, 0x00	; 0
    176c:	0d c0       	rjmp	.+26     	; 0x1788 <_ZN7Sd2Card10setSckRateEh+0x92>
    176e:	00 e0       	ldi	r16, 0x00	; 0
    1770:	21 e0       	ldi	r18, 0x01	; 1
    1772:	40 e2       	ldi	r20, 0x20	; 32
    1774:	51 ea       	ldi	r21, 0xA1	; 161
    1776:	67 e0       	ldi	r22, 0x07	; 7
    1778:	70 e0       	ldi	r23, 0x00	; 0
    177a:	06 c0       	rjmp	.+12     	; 0x1788 <_ZN7Sd2Card10setSckRateEh+0x92>
    177c:	00 e0       	ldi	r16, 0x00	; 0
    177e:	21 e0       	ldi	r18, 0x01	; 1
    1780:	48 e4       	ldi	r20, 0x48	; 72
    1782:	58 ee       	ldi	r21, 0xE8	; 232
    1784:	61 e0       	ldi	r22, 0x01	; 1
    1786:	70 e0       	ldi	r23, 0x00	; 0
    1788:	ce 01       	movw	r24, r28
    178a:	01 96       	adiw	r24, 0x01	; 1
    178c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <_ZN11SPISettingsC1Emhh>
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	9a 81       	ldd	r25, Y+2	; 0x02
    1794:	90 93 e6 04 	sts	0x04E6, r25	; 0x8004e6 <_ZL8settings+0x1>
    1798:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <_ZL8settings>
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	0f 91       	pop	r16
    17a8:	08 95       	ret

000017aa <_ZN7Sd2Card11waitNotBusyEj>:
    17aa:	0f 93       	push	r16
    17ac:	1f 93       	push	r17
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	eb 01       	movw	r28, r22
    17b4:	0e 94 5f 05 	call	0xabe	; 0xabe <millis>
    17b8:	8b 01       	movw	r16, r22
    17ba:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZL6spiRecv>
    17be:	8f 3f       	cpi	r24, 0xFF	; 255
    17c0:	49 f0       	breq	.+18     	; 0x17d4 <_ZN7Sd2Card11waitNotBusyEj+0x2a>
    17c2:	0e 94 5f 05 	call	0xabe	; 0xabe <millis>
    17c6:	60 1b       	sub	r22, r16
    17c8:	71 0b       	sbc	r23, r17
    17ca:	6c 17       	cp	r22, r28
    17cc:	7d 07       	cpc	r23, r29
    17ce:	a8 f3       	brcs	.-22     	; 0x17ba <_ZN7Sd2Card11waitNotBusyEj+0x10>
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	01 c0       	rjmp	.+2      	; 0x17d6 <_ZN7Sd2Card11waitNotBusyEj+0x2c>
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	1f 91       	pop	r17
    17dc:	0f 91       	pop	r16
    17de:	08 95       	ret

000017e0 <_ZN7Sd2Card11cardCommandEhm>:
    17e0:	8f 92       	push	r8
    17e2:	9f 92       	push	r9
    17e4:	af 92       	push	r10
    17e6:	bf 92       	push	r11
    17e8:	ff 92       	push	r15
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	ec 01       	movw	r28, r24
    17f4:	f6 2e       	mov	r15, r22
    17f6:	49 01       	movw	r8, r18
    17f8:	5a 01       	movw	r10, r20
    17fa:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <_ZN7Sd2Card7readEndEv>
    17fe:	ce 01       	movw	r24, r28
    1800:	0e 94 4b 0b 	call	0x1696	; 0x1696 <_ZN7Sd2Card13chipSelectLowEv>
    1804:	6c e2       	ldi	r22, 0x2C	; 44
    1806:	71 e0       	ldi	r23, 0x01	; 1
    1808:	ce 01       	movw	r24, r28
    180a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <_ZN7Sd2Card11waitNotBusyEj>
    180e:	8f 2d       	mov	r24, r15
    1810:	80 64       	ori	r24, 0x40	; 64
    1812:	0e 94 30 0b 	call	0x1660	; 0x1660 <_ZN8SPIClass8transferEh>
    1816:	08 e1       	ldi	r16, 0x18	; 24
    1818:	10 e0       	ldi	r17, 0x00	; 0
    181a:	d5 01       	movw	r26, r10
    181c:	c4 01       	movw	r24, r8
    181e:	00 2e       	mov	r0, r16
    1820:	04 c0       	rjmp	.+8      	; 0x182a <_ZN7Sd2Card11cardCommandEhm+0x4a>
    1822:	b6 95       	lsr	r27
    1824:	a7 95       	ror	r26
    1826:	97 95       	ror	r25
    1828:	87 95       	ror	r24
    182a:	0a 94       	dec	r0
    182c:	d2 f7       	brpl	.-12     	; 0x1822 <_ZN7Sd2Card11cardCommandEhm+0x42>
    182e:	0e 94 30 0b 	call	0x1660	; 0x1660 <_ZN8SPIClass8transferEh>
    1832:	08 50       	subi	r16, 0x08	; 8
    1834:	11 09       	sbc	r17, r1
    1836:	08 3f       	cpi	r16, 0xF8	; 248
    1838:	8f ef       	ldi	r24, 0xFF	; 255
    183a:	18 07       	cpc	r17, r24
    183c:	71 f7       	brne	.-36     	; 0x181a <_ZN7Sd2Card11cardCommandEhm+0x3a>
    183e:	ff 20       	and	r15, r15
    1840:	29 f0       	breq	.+10     	; 0x184c <_ZN7Sd2Card11cardCommandEhm+0x6c>
    1842:	88 e0       	ldi	r24, 0x08	; 8
    1844:	f8 12       	cpse	r15, r24
    1846:	04 c0       	rjmp	.+8      	; 0x1850 <_ZN7Sd2Card11cardCommandEhm+0x70>
    1848:	87 e8       	ldi	r24, 0x87	; 135
    184a:	03 c0       	rjmp	.+6      	; 0x1852 <_ZN7Sd2Card11cardCommandEhm+0x72>
    184c:	85 e9       	ldi	r24, 0x95	; 149
    184e:	01 c0       	rjmp	.+2      	; 0x1852 <_ZN7Sd2Card11cardCommandEhm+0x72>
    1850:	8f ef       	ldi	r24, 0xFF	; 255
    1852:	0e 94 30 0b 	call	0x1660	; 0x1660 <_ZN8SPIClass8transferEh>
    1856:	10 e0       	ldi	r17, 0x00	; 0
    1858:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZL6spiRecv>
    185c:	8a 87       	std	Y+10, r24	; 0x0a
    185e:	87 ff       	sbrs	r24, 7
    1860:	04 c0       	rjmp	.+8      	; 0x186a <_ZN7Sd2Card11cardCommandEhm+0x8a>
    1862:	1f 3f       	cpi	r17, 0xFF	; 255
    1864:	11 f0       	breq	.+4      	; 0x186a <_ZN7Sd2Card11cardCommandEhm+0x8a>
    1866:	1f 5f       	subi	r17, 0xFF	; 255
    1868:	f7 cf       	rjmp	.-18     	; 0x1858 <_ZN7Sd2Card11cardCommandEhm+0x78>
    186a:	df 91       	pop	r29
    186c:	cf 91       	pop	r28
    186e:	1f 91       	pop	r17
    1870:	0f 91       	pop	r16
    1872:	ff 90       	pop	r15
    1874:	bf 90       	pop	r11
    1876:	af 90       	pop	r10
    1878:	9f 90       	pop	r9
    187a:	8f 90       	pop	r8
    187c:	08 95       	ret

0000187e <_ZN7Sd2Card4initEhh>:
    187e:	7f 92       	push	r7
    1880:	8f 92       	push	r8
    1882:	9f 92       	push	r9
    1884:	af 92       	push	r10
    1886:	bf 92       	push	r11
    1888:	cf 92       	push	r12
    188a:	df 92       	push	r13
    188c:	ef 92       	push	r14
    188e:	ff 92       	push	r15
    1890:	0f 93       	push	r16
    1892:	1f 93       	push	r17
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
    1898:	00 d0       	rcall	.+0      	; 0x189a <_ZN7Sd2Card4initEhh+0x1c>
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	7c 01       	movw	r14, r24
    18a0:	76 2e       	mov	r7, r22
    18a2:	fc 01       	movw	r30, r24
    18a4:	13 86       	std	Z+11, r1	; 0x0b
    18a6:	11 86       	std	Z+9, r1	; 0x09
    18a8:	16 82       	std	Z+6, r1	; 0x06
    18aa:	15 82       	std	Z+5, r1	; 0x05
    18ac:	44 83       	std	Z+4, r20	; 0x04
    18ae:	0e 94 5f 05 	call	0xabe	; 0xabe <millis>
    18b2:	6b 01       	movw	r12, r22
    18b4:	61 e0       	ldi	r22, 0x01	; 1
    18b6:	f7 01       	movw	r30, r14
    18b8:	84 81       	ldd	r24, Z+4	; 0x04
    18ba:	0e 94 cf 05 	call	0xb9e	; 0xb9e <pinMode>
    18be:	61 e0       	ldi	r22, 0x01	; 1
    18c0:	f7 01       	movw	r30, r14
    18c2:	84 81       	ldd	r24, Z+4	; 0x04
    18c4:	0e 94 0b 06 	call	0xc16	; 0xc16 <digitalWrite>
    18c8:	0e 94 65 1a 	call	0x34ca	; 0x34ca <_ZN8SPIClass5beginEv>
    18cc:	00 e0       	ldi	r16, 0x00	; 0
    18ce:	21 e0       	ldi	r18, 0x01	; 1
    18d0:	40 e9       	ldi	r20, 0x90	; 144
    18d2:	50 ed       	ldi	r21, 0xD0	; 208
    18d4:	63 e0       	ldi	r22, 0x03	; 3
    18d6:	70 e0       	ldi	r23, 0x00	; 0
    18d8:	ce 01       	movw	r24, r28
    18da:	01 96       	adiw	r24, 0x01	; 1
    18dc:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <_ZN11SPISettingsC1Emhh>
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	9a 81       	ldd	r25, Y+2	; 0x02
    18e4:	90 93 e6 04 	sts	0x04E6, r25	; 0x8004e6 <_ZL8settings+0x1>
    18e8:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <_ZL8settings>
    18ec:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN8SPIClass16beginTransactionE11SPISettings>
    18f0:	1a e0       	ldi	r17, 0x0A	; 10
    18f2:	8f ef       	ldi	r24, 0xFF	; 255
    18f4:	0e 94 30 0b 	call	0x1660	; 0x1660 <_ZN8SPIClass8transferEh>
    18f8:	11 50       	subi	r17, 0x01	; 1
    18fa:	d9 f7       	brne	.-10     	; 0x18f2 <_ZN7Sd2Card4initEhh+0x74>
    18fc:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <_ZN8SPIClass13interruptModeE>
    1900:	81 11       	cpse	r24, r1
    1902:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN8SPIClass14endTransactionEv.part.3>
    1906:	c7 01       	movw	r24, r14
    1908:	0e 94 4b 0b 	call	0x1696	; 0x1696 <_ZN7Sd2Card13chipSelectLowEv>
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	a9 01       	movw	r20, r18
    1912:	60 e0       	ldi	r22, 0x00	; 0
    1914:	c7 01       	movw	r24, r14
    1916:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_ZN7Sd2Card11cardCommandEhm>
    191a:	08 2f       	mov	r16, r24
    191c:	f7 01       	movw	r30, r14
    191e:	82 87       	std	Z+10, r24	; 0x0a
    1920:	81 30       	cpi	r24, 0x01	; 1
    1922:	49 f0       	breq	.+18     	; 0x1936 <_ZN7Sd2Card4initEhh+0xb8>
    1924:	0e 94 5f 05 	call	0xabe	; 0xabe <millis>
    1928:	6c 19       	sub	r22, r12
    192a:	7d 09       	sbc	r23, r13
    192c:	61 3d       	cpi	r22, 0xD1	; 209
    192e:	77 40       	sbci	r23, 0x07	; 7
    1930:	68 f3       	brcs	.-38     	; 0x190c <_ZN7Sd2Card4initEhh+0x8e>
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	50 c0       	rjmp	.+160    	; 0x19d6 <_ZN7Sd2Card4initEhh+0x158>
    1936:	2a ea       	ldi	r18, 0xAA	; 170
    1938:	31 e0       	ldi	r19, 0x01	; 1
    193a:	40 e0       	ldi	r20, 0x00	; 0
    193c:	50 e0       	ldi	r21, 0x00	; 0
    193e:	68 e0       	ldi	r22, 0x08	; 8
    1940:	c7 01       	movw	r24, r14
    1942:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_ZN7Sd2Card11cardCommandEhm>
    1946:	82 ff       	sbrs	r24, 2
    1948:	03 c0       	rjmp	.+6      	; 0x1950 <_ZN7Sd2Card4initEhh+0xd2>
    194a:	f7 01       	movw	r30, r14
    194c:	03 87       	std	Z+11, r16	; 0x0b
    194e:	0e c0       	rjmp	.+28     	; 0x196c <_ZN7Sd2Card4initEhh+0xee>
    1950:	04 e0       	ldi	r16, 0x04	; 4
    1952:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZL6spiRecv>
    1956:	f7 01       	movw	r30, r14
    1958:	82 87       	std	Z+10, r24	; 0x0a
    195a:	01 50       	subi	r16, 0x01	; 1
    195c:	d1 f7       	brne	.-12     	; 0x1952 <_ZN7Sd2Card4initEhh+0xd4>
    195e:	8a 3a       	cpi	r24, 0xAA	; 170
    1960:	11 f0       	breq	.+4      	; 0x1966 <_ZN7Sd2Card4initEhh+0xe8>
    1962:	82 e0       	ldi	r24, 0x02	; 2
    1964:	39 c0       	rjmp	.+114    	; 0x19d8 <_ZN7Sd2Card4initEhh+0x15a>
    1966:	82 e0       	ldi	r24, 0x02	; 2
    1968:	f7 01       	movw	r30, r14
    196a:	83 87       	std	Z+11, r24	; 0x0b
    196c:	f7 01       	movw	r30, r14
    196e:	83 85       	ldd	r24, Z+11	; 0x0b
    1970:	82 30       	cpi	r24, 0x02	; 2
    1972:	21 f0       	breq	.+8      	; 0x197c <_ZN7Sd2Card4initEhh+0xfe>
    1974:	81 2c       	mov	r8, r1
    1976:	91 2c       	mov	r9, r1
    1978:	54 01       	movw	r10, r8
    197a:	05 c0       	rjmp	.+10     	; 0x1986 <_ZN7Sd2Card4initEhh+0x108>
    197c:	81 2c       	mov	r8, r1
    197e:	91 2c       	mov	r9, r1
    1980:	a1 2c       	mov	r10, r1
    1982:	80 e4       	ldi	r24, 0x40	; 64
    1984:	b8 2e       	mov	r11, r24
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	a9 01       	movw	r20, r18
    198c:	67 e3       	ldi	r22, 0x37	; 55
    198e:	c7 01       	movw	r24, r14
    1990:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_ZN7Sd2Card11cardCommandEhm>
    1994:	a5 01       	movw	r20, r10
    1996:	94 01       	movw	r18, r8
    1998:	69 e2       	ldi	r22, 0x29	; 41
    199a:	c7 01       	movw	r24, r14
    199c:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_ZN7Sd2Card11cardCommandEhm>
    19a0:	f7 01       	movw	r30, r14
    19a2:	82 87       	std	Z+10, r24	; 0x0a
    19a4:	88 23       	and	r24, r24
    19a6:	49 f0       	breq	.+18     	; 0x19ba <_ZN7Sd2Card4initEhh+0x13c>
    19a8:	0e 94 5f 05 	call	0xabe	; 0xabe <millis>
    19ac:	6c 19       	sub	r22, r12
    19ae:	7d 09       	sbc	r23, r13
    19b0:	61 3d       	cpi	r22, 0xD1	; 209
    19b2:	77 40       	sbci	r23, 0x07	; 7
    19b4:	40 f3       	brcs	.-48     	; 0x1986 <_ZN7Sd2Card4initEhh+0x108>
    19b6:	88 e0       	ldi	r24, 0x08	; 8
    19b8:	0e c0       	rjmp	.+28     	; 0x19d6 <_ZN7Sd2Card4initEhh+0x158>
    19ba:	f7 01       	movw	r30, r14
    19bc:	83 85       	ldd	r24, Z+11	; 0x0b
    19be:	82 30       	cpi	r24, 0x02	; 2
    19c0:	f1 f4       	brne	.+60     	; 0x19fe <_ZN7Sd2Card4initEhh+0x180>
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	a9 01       	movw	r20, r18
    19c8:	6a e3       	ldi	r22, 0x3A	; 58
    19ca:	c7 01       	movw	r24, r14
    19cc:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_ZN7Sd2Card11cardCommandEhm>
    19d0:	88 23       	and	r24, r24
    19d2:	39 f0       	breq	.+14     	; 0x19e2 <_ZN7Sd2Card4initEhh+0x164>
    19d4:	86 e0       	ldi	r24, 0x06	; 6
    19d6:	f7 01       	movw	r30, r14
    19d8:	85 83       	std	Z+5, r24	; 0x05
    19da:	c7 01       	movw	r24, r14
    19dc:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_ZN7Sd2Card14chipSelectHighEv>
    19e0:	16 c0       	rjmp	.+44     	; 0x1a0e <_ZN7Sd2Card4initEhh+0x190>
    19e2:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZL6spiRecv>
    19e6:	80 7c       	andi	r24, 0xC0	; 192
    19e8:	80 3c       	cpi	r24, 0xC0	; 192
    19ea:	19 f4       	brne	.+6      	; 0x19f2 <_ZN7Sd2Card4initEhh+0x174>
    19ec:	83 e0       	ldi	r24, 0x03	; 3
    19ee:	f7 01       	movw	r30, r14
    19f0:	83 87       	std	Z+11, r24	; 0x0b
    19f2:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZL6spiRecv>
    19f6:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZL6spiRecv>
    19fa:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZL6spiRecv>
    19fe:	c7 01       	movw	r24, r14
    1a00:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_ZN7Sd2Card14chipSelectHighEv>
    1a04:	67 2d       	mov	r22, r7
    1a06:	c7 01       	movw	r24, r14
    1a08:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN7Sd2Card10setSckRateEh>
    1a0c:	18 2f       	mov	r17, r24
    1a0e:	81 2f       	mov	r24, r17
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	ff 90       	pop	r15
    1a1e:	ef 90       	pop	r14
    1a20:	df 90       	pop	r13
    1a22:	cf 90       	pop	r12
    1a24:	bf 90       	pop	r11
    1a26:	af 90       	pop	r10
    1a28:	9f 90       	pop	r9
    1a2a:	8f 90       	pop	r8
    1a2c:	7f 90       	pop	r7
    1a2e:	08 95       	ret

00001a30 <_ZN7Sd2Card14waitStartBlockEv>:
    1a30:	0f 93       	push	r16
    1a32:	1f 93       	push	r17
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	ec 01       	movw	r28, r24
    1a3a:	0e 94 5f 05 	call	0xabe	; 0xabe <millis>
    1a3e:	8b 01       	movw	r16, r22
    1a40:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZL6spiRecv>
    1a44:	8a 87       	std	Y+10, r24	; 0x0a
    1a46:	8f 3f       	cpi	r24, 0xFF	; 255
    1a48:	49 f4       	brne	.+18     	; 0x1a5c <_ZN7Sd2Card14waitStartBlockEv+0x2c>
    1a4a:	0e 94 5f 05 	call	0xabe	; 0xabe <millis>
    1a4e:	60 1b       	sub	r22, r16
    1a50:	71 0b       	sbc	r23, r17
    1a52:	6d 32       	cpi	r22, 0x2D	; 45
    1a54:	71 40       	sbci	r23, 0x01	; 1
    1a56:	a0 f3       	brcs	.-24     	; 0x1a40 <_ZN7Sd2Card14waitStartBlockEv+0x10>
    1a58:	8f e0       	ldi	r24, 0x0F	; 15
    1a5a:	03 c0       	rjmp	.+6      	; 0x1a62 <_ZN7Sd2Card14waitStartBlockEv+0x32>
    1a5c:	8e 3f       	cpi	r24, 0xFE	; 254
    1a5e:	39 f0       	breq	.+14     	; 0x1a6e <_ZN7Sd2Card14waitStartBlockEv+0x3e>
    1a60:	8d e0       	ldi	r24, 0x0D	; 13
    1a62:	8d 83       	std	Y+5, r24	; 0x05
    1a64:	ce 01       	movw	r24, r28
    1a66:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_ZN7Sd2Card14chipSelectHighEv>
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	01 c0       	rjmp	.+2      	; 0x1a70 <_ZN7Sd2Card14waitStartBlockEv+0x40>
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	df 91       	pop	r29
    1a72:	cf 91       	pop	r28
    1a74:	1f 91       	pop	r17
    1a76:	0f 91       	pop	r16
    1a78:	08 95       	ret

00001a7a <_ZN7Sd2Card8readDataEmjjPh.part.6>:
    1a7a:	cf 92       	push	r12
    1a7c:	df 92       	push	r13
    1a7e:	ef 92       	push	r14
    1a80:	ff 92       	push	r15
    1a82:	0f 93       	push	r16
    1a84:	1f 93       	push	r17
    1a86:	cf 93       	push	r28
    1a88:	df 93       	push	r29
    1a8a:	ec 01       	movw	r28, r24
    1a8c:	69 01       	movw	r12, r18
    1a8e:	c8 01       	movw	r24, r16
    1a90:	82 0f       	add	r24, r18
    1a92:	93 1f       	adc	r25, r19
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	92 40       	sbci	r25, 0x02	; 2
    1a98:	08 f0       	brcs	.+2      	; 0x1a9c <_ZN7Sd2Card8readDataEmjjPh.part.6+0x22>
    1a9a:	5c c0       	rjmp	.+184    	; 0x1b54 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    1a9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a9e:	88 23       	and	r24, r24
    1aa0:	71 f0       	breq	.+28     	; 0x1abe <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    1aa2:	88 81       	ld	r24, Y
    1aa4:	99 81       	ldd	r25, Y+1	; 0x01
    1aa6:	aa 81       	ldd	r26, Y+2	; 0x02
    1aa8:	bb 81       	ldd	r27, Y+3	; 0x03
    1aaa:	84 17       	cp	r24, r20
    1aac:	95 07       	cpc	r25, r21
    1aae:	a6 07       	cpc	r26, r22
    1ab0:	b7 07       	cpc	r27, r23
    1ab2:	29 f4       	brne	.+10     	; 0x1abe <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    1ab4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ab6:	98 85       	ldd	r25, Y+8	; 0x08
    1ab8:	c8 16       	cp	r12, r24
    1aba:	d9 06       	cpc	r13, r25
    1abc:	10 f5       	brcc	.+68     	; 0x1b02 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x88>
    1abe:	48 83       	st	Y, r20
    1ac0:	59 83       	std	Y+1, r21	; 0x01
    1ac2:	6a 83       	std	Y+2, r22	; 0x02
    1ac4:	7b 83       	std	Y+3, r23	; 0x03
    1ac6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ac8:	83 30       	cpi	r24, 0x03	; 3
    1aca:	39 f0       	breq	.+14     	; 0x1ada <_ZN7Sd2Card8readDataEmjjPh.part.6+0x60>
    1acc:	89 e0       	ldi	r24, 0x09	; 9
    1ace:	44 0f       	add	r20, r20
    1ad0:	55 1f       	adc	r21, r21
    1ad2:	66 1f       	adc	r22, r22
    1ad4:	77 1f       	adc	r23, r23
    1ad6:	8a 95       	dec	r24
    1ad8:	d1 f7       	brne	.-12     	; 0x1ace <_ZN7Sd2Card8readDataEmjjPh.part.6+0x54>
    1ada:	9a 01       	movw	r18, r20
    1adc:	ab 01       	movw	r20, r22
    1ade:	61 e1       	ldi	r22, 0x11	; 17
    1ae0:	ce 01       	movw	r24, r28
    1ae2:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_ZN7Sd2Card11cardCommandEhm>
    1ae6:	88 23       	and	r24, r24
    1ae8:	19 f0       	breq	.+6      	; 0x1af0 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x76>
    1aea:	83 e0       	ldi	r24, 0x03	; 3
    1aec:	8d 83       	std	Y+5, r24	; 0x05
    1aee:	32 c0       	rjmp	.+100    	; 0x1b54 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    1af0:	ce 01       	movw	r24, r28
    1af2:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <_ZN7Sd2Card14waitStartBlockEv>
    1af6:	88 23       	and	r24, r24
    1af8:	69 f1       	breq	.+90     	; 0x1b54 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    1afa:	18 86       	std	Y+8, r1	; 0x08
    1afc:	1f 82       	std	Y+7, r1	; 0x07
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	8e 83       	std	Y+6, r24	; 0x06
    1b02:	8f 81       	ldd	r24, Y+7	; 0x07
    1b04:	98 85       	ldd	r25, Y+8	; 0x08
    1b06:	8c 15       	cp	r24, r12
    1b08:	9d 05       	cpc	r25, r13
    1b0a:	40 f4       	brcc	.+16     	; 0x1b1c <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa2>
    1b0c:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZL6spiRecv>
    1b10:	8f 81       	ldd	r24, Y+7	; 0x07
    1b12:	98 85       	ldd	r25, Y+8	; 0x08
    1b14:	01 96       	adiw	r24, 0x01	; 1
    1b16:	98 87       	std	Y+8, r25	; 0x08
    1b18:	8f 83       	std	Y+7, r24	; 0x07
    1b1a:	f3 cf       	rjmp	.-26     	; 0x1b02 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x88>
    1b1c:	67 01       	movw	r12, r14
    1b1e:	e0 0e       	add	r14, r16
    1b20:	f1 1e       	adc	r15, r17
    1b22:	ce 14       	cp	r12, r14
    1b24:	df 04       	cpc	r13, r15
    1b26:	31 f0       	breq	.+12     	; 0x1b34 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xba>
    1b28:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZL6spiRecv>
    1b2c:	f6 01       	movw	r30, r12
    1b2e:	81 93       	st	Z+, r24
    1b30:	6f 01       	movw	r12, r30
    1b32:	f7 cf       	rjmp	.-18     	; 0x1b22 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa8>
    1b34:	8f 81       	ldd	r24, Y+7	; 0x07
    1b36:	98 85       	ldd	r25, Y+8	; 0x08
    1b38:	08 0f       	add	r16, r24
    1b3a:	19 1f       	adc	r17, r25
    1b3c:	18 87       	std	Y+8, r17	; 0x08
    1b3e:	0f 83       	std	Y+7, r16	; 0x07
    1b40:	89 85       	ldd	r24, Y+9	; 0x09
    1b42:	88 23       	and	r24, r24
    1b44:	19 f0       	breq	.+6      	; 0x1b4c <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd2>
    1b46:	01 15       	cp	r16, r1
    1b48:	12 40       	sbci	r17, 0x02	; 2
    1b4a:	48 f0       	brcs	.+18     	; 0x1b5e <_ZN7Sd2Card8readDataEmjjPh.part.6+0xe4>
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <_ZN7Sd2Card7readEndEv>
    1b52:	05 c0       	rjmp	.+10     	; 0x1b5e <_ZN7Sd2Card8readDataEmjjPh.part.6+0xe4>
    1b54:	ce 01       	movw	r24, r28
    1b56:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_ZN7Sd2Card14chipSelectHighEv>
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	01 c0       	rjmp	.+2      	; 0x1b60 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xe6>
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	1f 91       	pop	r17
    1b66:	0f 91       	pop	r16
    1b68:	ff 90       	pop	r15
    1b6a:	ef 90       	pop	r14
    1b6c:	df 90       	pop	r13
    1b6e:	cf 90       	pop	r12
    1b70:	08 95       	ret

00001b72 <_ZN7Sd2Card8readDataEmjjPh>:
    1b72:	ef 92       	push	r14
    1b74:	ff 92       	push	r15
    1b76:	0f 93       	push	r16
    1b78:	1f 93       	push	r17
    1b7a:	01 15       	cp	r16, r1
    1b7c:	11 05       	cpc	r17, r1
    1b7e:	19 f0       	breq	.+6      	; 0x1b86 <_ZN7Sd2Card8readDataEmjjPh+0x14>
    1b80:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <_ZN7Sd2Card8readDataEmjjPh.part.6>
    1b84:	01 c0       	rjmp	.+2      	; 0x1b88 <_ZN7Sd2Card8readDataEmjjPh+0x16>
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	1f 91       	pop	r17
    1b8a:	0f 91       	pop	r16
    1b8c:	ff 90       	pop	r15
    1b8e:	ef 90       	pop	r14
    1b90:	08 95       	ret

00001b92 <_ZN7Sd2Card9readBlockEmPh>:
    1b92:	ef 92       	push	r14
    1b94:	ff 92       	push	r15
    1b96:	0f 93       	push	r16
    1b98:	1f 93       	push	r17
    1b9a:	79 01       	movw	r14, r18
    1b9c:	00 e0       	ldi	r16, 0x00	; 0
    1b9e:	12 e0       	ldi	r17, 0x02	; 2
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <_ZN7Sd2Card8readDataEmjjPh.part.6>
    1ba8:	1f 91       	pop	r17
    1baa:	0f 91       	pop	r16
    1bac:	ff 90       	pop	r15
    1bae:	ef 90       	pop	r14
    1bb0:	08 95       	ret

00001bb2 <_ZN7Sd2Card9writeDataEhPKh>:
    1bb2:	ef 92       	push	r14
    1bb4:	ff 92       	push	r15
    1bb6:	0f 93       	push	r16
    1bb8:	1f 93       	push	r17
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
    1bbe:	8c 01       	movw	r16, r24
    1bc0:	86 2f       	mov	r24, r22
    1bc2:	7a 01       	movw	r14, r20
    1bc4:	0e 94 30 0b 	call	0x1660	; 0x1660 <_ZN8SPIClass8transferEh>
    1bc8:	e7 01       	movw	r28, r14
    1bca:	8e ef       	ldi	r24, 0xFE	; 254
    1bcc:	f8 1a       	sub	r15, r24
    1bce:	89 91       	ld	r24, Y+
    1bd0:	0e 94 30 0b 	call	0x1660	; 0x1660 <_ZN8SPIClass8transferEh>
    1bd4:	ce 15       	cp	r28, r14
    1bd6:	df 05       	cpc	r29, r15
    1bd8:	d1 f7       	brne	.-12     	; 0x1bce <_ZN7Sd2Card9writeDataEhPKh+0x1c>
    1bda:	8f ef       	ldi	r24, 0xFF	; 255
    1bdc:	0e 94 30 0b 	call	0x1660	; 0x1660 <_ZN8SPIClass8transferEh>
    1be0:	8f ef       	ldi	r24, 0xFF	; 255
    1be2:	0e 94 30 0b 	call	0x1660	; 0x1660 <_ZN8SPIClass8transferEh>
    1be6:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZL6spiRecv>
    1bea:	f8 01       	movw	r30, r16
    1bec:	82 87       	std	Z+10, r24	; 0x0a
    1bee:	8f 71       	andi	r24, 0x1F	; 31
    1bf0:	85 30       	cpi	r24, 0x05	; 5
    1bf2:	39 f0       	breq	.+14     	; 0x1c02 <_ZN7Sd2Card9writeDataEhPKh+0x50>
    1bf4:	81 e1       	ldi	r24, 0x11	; 17
    1bf6:	85 83       	std	Z+5, r24	; 0x05
    1bf8:	c8 01       	movw	r24, r16
    1bfa:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_ZN7Sd2Card14chipSelectHighEv>
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	01 c0       	rjmp	.+2      	; 0x1c04 <_ZN7Sd2Card9writeDataEhPKh+0x52>
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	df 91       	pop	r29
    1c06:	cf 91       	pop	r28
    1c08:	1f 91       	pop	r17
    1c0a:	0f 91       	pop	r16
    1c0c:	ff 90       	pop	r15
    1c0e:	ef 90       	pop	r14
    1c10:	08 95       	ret

00001c12 <_ZN7Sd2Card10writeBlockEmPKh>:
    1c12:	0f 93       	push	r16
    1c14:	1f 93       	push	r17
    1c16:	cf 93       	push	r28
    1c18:	df 93       	push	r29
    1c1a:	ec 01       	movw	r28, r24
    1c1c:	89 01       	movw	r16, r18
    1c1e:	41 15       	cp	r20, r1
    1c20:	51 05       	cpc	r21, r1
    1c22:	61 05       	cpc	r22, r1
    1c24:	71 05       	cpc	r23, r1
    1c26:	11 f4       	brne	.+4      	; 0x1c2c <_ZN7Sd2Card10writeBlockEmPKh+0x1a>
    1c28:	82 e1       	ldi	r24, 0x12	; 18
    1c2a:	32 c0       	rjmp	.+100    	; 0x1c90 <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    1c2c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c2e:	83 30       	cpi	r24, 0x03	; 3
    1c30:	39 f0       	breq	.+14     	; 0x1c40 <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
    1c32:	89 e0       	ldi	r24, 0x09	; 9
    1c34:	44 0f       	add	r20, r20
    1c36:	55 1f       	adc	r21, r21
    1c38:	66 1f       	adc	r22, r22
    1c3a:	77 1f       	adc	r23, r23
    1c3c:	8a 95       	dec	r24
    1c3e:	d1 f7       	brne	.-12     	; 0x1c34 <_ZN7Sd2Card10writeBlockEmPKh+0x22>
    1c40:	9a 01       	movw	r18, r20
    1c42:	ab 01       	movw	r20, r22
    1c44:	68 e1       	ldi	r22, 0x18	; 24
    1c46:	ce 01       	movw	r24, r28
    1c48:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_ZN7Sd2Card11cardCommandEhm>
    1c4c:	88 23       	and	r24, r24
    1c4e:	11 f0       	breq	.+4      	; 0x1c54 <_ZN7Sd2Card10writeBlockEmPKh+0x42>
    1c50:	84 e0       	ldi	r24, 0x04	; 4
    1c52:	1e c0       	rjmp	.+60     	; 0x1c90 <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    1c54:	a8 01       	movw	r20, r16
    1c56:	6e ef       	ldi	r22, 0xFE	; 254
    1c58:	ce 01       	movw	r24, r28
    1c5a:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_ZN7Sd2Card9writeDataEhPKh>
    1c5e:	88 23       	and	r24, r24
    1c60:	c1 f0       	breq	.+48     	; 0x1c92 <_ZN7Sd2Card10writeBlockEmPKh+0x80>
    1c62:	68 e5       	ldi	r22, 0x58	; 88
    1c64:	72 e0       	ldi	r23, 0x02	; 2
    1c66:	ce 01       	movw	r24, r28
    1c68:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <_ZN7Sd2Card11waitNotBusyEj>
    1c6c:	81 11       	cpse	r24, r1
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <_ZN7Sd2Card10writeBlockEmPKh+0x62>
    1c70:	85 e1       	ldi	r24, 0x15	; 21
    1c72:	0e c0       	rjmp	.+28     	; 0x1c90 <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	a9 01       	movw	r20, r18
    1c7a:	6d e0       	ldi	r22, 0x0D	; 13
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_ZN7Sd2Card11cardCommandEhm>
    1c82:	81 11       	cpse	r24, r1
    1c84:	04 c0       	rjmp	.+8      	; 0x1c8e <_ZN7Sd2Card10writeBlockEmPKh+0x7c>
    1c86:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZL6spiRecv>
    1c8a:	88 23       	and	r24, r24
    1c8c:	39 f0       	breq	.+14     	; 0x1c9c <_ZN7Sd2Card10writeBlockEmPKh+0x8a>
    1c8e:	84 e1       	ldi	r24, 0x14	; 20
    1c90:	8d 83       	std	Y+5, r24	; 0x05
    1c92:	ce 01       	movw	r24, r28
    1c94:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_ZN7Sd2Card14chipSelectHighEv>
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	04 c0       	rjmp	.+8      	; 0x1ca4 <_ZN7Sd2Card10writeBlockEmPKh+0x92>
    1c9c:	ce 01       	movw	r24, r28
    1c9e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_ZN7Sd2Card14chipSelectHighEv>
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	08 95       	ret

00001cae <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    1cae:	e5 ee       	ldi	r30, 0xE5	; 229
    1cb0:	f4 e0       	ldi	r31, 0x04	; 4
    1cb2:	80 e5       	ldi	r24, 0x50	; 80
    1cb4:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    1cb6:	11 82       	std	Z+1, r1	; 0x01
    1cb8:	08 95       	ret

00001cba <_ZN6SdFile10addClusterEv>:
    }
  }
  // don't try to delete root
  if (isRoot()) return true;
  return rmDir();
}
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	ec 01       	movw	r28, r24
    1cc0:	9c 01       	movw	r18, r24
    1cc2:	2a 5f       	subi	r18, 0xFA	; 250
    1cc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc6:	41 e0       	ldi	r20, 0x01	; 1
    1cc8:	50 e0       	ldi	r21, 0x00	; 0
    1cca:	60 e0       	ldi	r22, 0x00	; 0
    1ccc:	70 e0       	ldi	r23, 0x00	; 0
    1cce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cd2:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <_ZN8SdVolume15allocContiguousEmPm>
    1cd6:	88 23       	and	r24, r24
    1cd8:	a1 f0       	breq	.+40     	; 0x1d02 <_ZN6SdFile10addClusterEv+0x48>
    1cda:	8f 89       	ldd	r24, Y+23	; 0x17
    1cdc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cde:	a9 8d       	ldd	r26, Y+25	; 0x19
    1ce0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1ce2:	89 2b       	or	r24, r25
    1ce4:	8a 2b       	or	r24, r26
    1ce6:	8b 2b       	or	r24, r27
    1ce8:	59 f4       	brne	.+22     	; 0x1d00 <_ZN6SdFile10addClusterEv+0x46>
    1cea:	8e 81       	ldd	r24, Y+6	; 0x06
    1cec:	9f 81       	ldd	r25, Y+7	; 0x07
    1cee:	a8 85       	ldd	r26, Y+8	; 0x08
    1cf0:	b9 85       	ldd	r27, Y+9	; 0x09
    1cf2:	8f 8b       	std	Y+23, r24	; 0x17
    1cf4:	98 8f       	std	Y+24, r25	; 0x18
    1cf6:	a9 8f       	std	Y+25, r26	; 0x19
    1cf8:	ba 8f       	std	Y+26, r27	; 0x1a
    1cfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfc:	80 68       	ori	r24, 0x80	; 128
    1cfe:	8c 83       	std	Y+4, r24	; 0x04
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	df 91       	pop	r29
    1d04:	cf 91       	pop	r28
    1d06:	08 95       	ret

00001d08 <_ZN6SdFile13addDirClusterEv>:
    1d08:	cf 92       	push	r12
    1d0a:	df 92       	push	r13
    1d0c:	ef 92       	push	r14
    1d0e:	ff 92       	push	r15
    1d10:	1f 93       	push	r17
    1d12:	cf 93       	push	r28
    1d14:	df 93       	push	r29
    1d16:	ec 01       	movw	r28, r24
    1d18:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <_ZN6SdFile10addClusterEv>
    1d1c:	81 11       	cpse	r24, r1
    1d1e:	02 c0       	rjmp	.+4      	; 0x1d24 <_ZN6SdFile13addDirClusterEv+0x1c>
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	4a c0       	rjmp	.+148    	; 0x1db8 <_ZN6SdFile13addDirClusterEv+0xb0>
    1d24:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1d26:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1d28:	ce 80       	ldd	r12, Y+6	; 0x06
    1d2a:	df 80       	ldd	r13, Y+7	; 0x07
    1d2c:	e8 84       	ldd	r14, Y+8	; 0x08
    1d2e:	f9 84       	ldd	r15, Y+9	; 0x09
    1d30:	82 e0       	ldi	r24, 0x02	; 2
    1d32:	c8 1a       	sub	r12, r24
    1d34:	d1 08       	sbc	r13, r1
    1d36:	e1 08       	sbc	r14, r1
    1d38:	f1 08       	sbc	r15, r1
    1d3a:	05 84       	ldd	r0, Z+13	; 0x0d
    1d3c:	04 c0       	rjmp	.+8      	; 0x1d46 <_ZN6SdFile13addDirClusterEv+0x3e>
    1d3e:	cc 0c       	add	r12, r12
    1d40:	dd 1c       	adc	r13, r13
    1d42:	ee 1c       	adc	r14, r14
    1d44:	ff 1c       	adc	r15, r15
    1d46:	0a 94       	dec	r0
    1d48:	d2 f7       	brpl	.-12     	; 0x1d3e <_ZN6SdFile13addDirClusterEv+0x36>
    1d4a:	86 85       	ldd	r24, Z+14	; 0x0e
    1d4c:	97 85       	ldd	r25, Z+15	; 0x0f
    1d4e:	a0 89       	ldd	r26, Z+16	; 0x10
    1d50:	b1 89       	ldd	r27, Z+17	; 0x11
    1d52:	c8 0e       	add	r12, r24
    1d54:	d9 1e       	adc	r13, r25
    1d56:	ea 1e       	adc	r14, r26
    1d58:	fb 1e       	adc	r15, r27
    1d5a:	14 81       	ldd	r17, Z+4	; 0x04
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	c8 1a       	sub	r12, r24
    1d60:	d1 08       	sbc	r13, r1
    1d62:	e1 08       	sbc	r14, r1
    1d64:	f1 08       	sbc	r15, r1
    1d66:	11 23       	and	r17, r17
    1d68:	61 f0       	breq	.+24     	; 0x1d82 <_ZN6SdFile13addDirClusterEv+0x7a>
    1d6a:	c7 01       	movw	r24, r14
    1d6c:	b6 01       	movw	r22, r12
    1d6e:	61 0f       	add	r22, r17
    1d70:	71 1d       	adc	r23, r1
    1d72:	81 1d       	adc	r24, r1
    1d74:	91 1d       	adc	r25, r1
    1d76:	0e 94 32 16 	call	0x2c64	; 0x2c64 <_ZN8SdVolume14cacheZeroBlockEm>
    1d7a:	88 23       	and	r24, r24
    1d7c:	89 f2       	breq	.-94     	; 0x1d20 <_ZN6SdFile13addDirClusterEv+0x18>
    1d7e:	11 50       	subi	r17, 0x01	; 1
    1d80:	f2 cf       	rjmp	.-28     	; 0x1d66 <_ZN6SdFile13addDirClusterEv+0x5e>
    1d82:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1d84:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	92 e0       	ldi	r25, 0x02	; 2
    1d8a:	a0 e0       	ldi	r26, 0x00	; 0
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	05 84       	ldd	r0, Z+13	; 0x0d
    1d90:	04 c0       	rjmp	.+8      	; 0x1d9a <_ZN6SdFile13addDirClusterEv+0x92>
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	aa 1f       	adc	r26, r26
    1d98:	bb 1f       	adc	r27, r27
    1d9a:	0a 94       	dec	r0
    1d9c:	d2 f7       	brpl	.-12     	; 0x1d92 <_ZN6SdFile13addDirClusterEv+0x8a>
    1d9e:	4b 89       	ldd	r20, Y+19	; 0x13
    1da0:	5c 89       	ldd	r21, Y+20	; 0x14
    1da2:	6d 89       	ldd	r22, Y+21	; 0x15
    1da4:	7e 89       	ldd	r23, Y+22	; 0x16
    1da6:	84 0f       	add	r24, r20
    1da8:	95 1f       	adc	r25, r21
    1daa:	a6 1f       	adc	r26, r22
    1dac:	b7 1f       	adc	r27, r23
    1dae:	8b 8b       	std	Y+19, r24	; 0x13
    1db0:	9c 8b       	std	Y+20, r25	; 0x14
    1db2:	ad 8b       	std	Y+21, r26	; 0x15
    1db4:	be 8b       	std	Y+22, r27	; 0x16
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	df 91       	pop	r29
    1dba:	cf 91       	pop	r28
    1dbc:	1f 91       	pop	r17
    1dbe:	ff 90       	pop	r15
    1dc0:	ef 90       	pop	r14
    1dc2:	df 90       	pop	r13
    1dc4:	cf 90       	pop	r12
    1dc6:	08 95       	ret

00001dc8 <_ZN6SdFile13cacheDirEntryEh>:
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	ec 01       	movw	r28, r24
    1dce:	46 2f       	mov	r20, r22
    1dd0:	6e 85       	ldd	r22, Y+14	; 0x0e
    1dd2:	7f 85       	ldd	r23, Y+15	; 0x0f
    1dd4:	88 89       	ldd	r24, Y+16	; 0x10
    1dd6:	99 89       	ldd	r25, Y+17	; 0x11
    1dd8:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_ZN8SdVolume13cacheRawBlockEmh>
    1ddc:	88 23       	and	r24, r24
    1dde:	41 f0       	breq	.+16     	; 0x1df0 <_ZN6SdFile13cacheDirEntryEh+0x28>
    1de0:	8a 89       	ldd	r24, Y+18	; 0x12
    1de2:	20 e2       	ldi	r18, 0x20	; 32
    1de4:	82 9f       	mul	r24, r18
    1de6:	c0 01       	movw	r24, r0
    1de8:	11 24       	eor	r1, r1
    1dea:	80 51       	subi	r24, 0x10	; 16
    1dec:	9b 4f       	sbci	r25, 0xFB	; 251
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <_ZN6SdFile13cacheDirEntryEh+0x2c>
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	08 95       	ret

00001dfa <_ZN6SdFile10make83NameEPKcPh>:
    1dfa:	fb 01       	movw	r30, r22
    1dfc:	9b 01       	movw	r18, r22
    1dfe:	25 5f       	subi	r18, 0xF5	; 245
    1e00:	3f 4f       	sbci	r19, 0xFF	; 255
    1e02:	40 e2       	ldi	r20, 0x20	; 32
    1e04:	41 93       	st	Z+, r20
    1e06:	e2 17       	cp	r30, r18
    1e08:	f3 07       	cpc	r31, r19
    1e0a:	e1 f7       	brne	.-8      	; 0x1e04 <_ZN6SdFile10make83NameEPKcPh+0xa>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	27 e0       	ldi	r18, 0x07	; 7
    1e12:	8d 91       	ld	r24, X+
    1e14:	88 23       	and	r24, r24
    1e16:	19 f1       	breq	.+70     	; 0x1e5e <_ZN6SdFile10make83NameEPKcPh+0x64>
    1e18:	8e 32       	cpi	r24, 0x2E	; 46
    1e1a:	29 f4       	brne	.+10     	; 0x1e26 <_ZN6SdFile10make83NameEPKcPh+0x2c>
    1e1c:	2a 30       	cpi	r18, 0x0A	; 10
    1e1e:	21 f1       	breq	.+72     	; 0x1e68 <_ZN6SdFile10make83NameEPKcPh+0x6e>
    1e20:	98 e0       	ldi	r25, 0x08	; 8
    1e22:	2a e0       	ldi	r18, 0x0A	; 10
    1e24:	f6 cf       	rjmp	.-20     	; 0x1e12 <_ZN6SdFile10make83NameEPKcPh+0x18>
    1e26:	e2 ec       	ldi	r30, 0xC2	; 194
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	34 91       	lpm	r19, Z
    1e2c:	33 23       	and	r19, r19
    1e2e:	21 f0       	breq	.+8      	; 0x1e38 <_ZN6SdFile10make83NameEPKcPh+0x3e>
    1e30:	31 96       	adiw	r30, 0x01	; 1
    1e32:	83 13       	cpse	r24, r19
    1e34:	fa cf       	rjmp	.-12     	; 0x1e2a <_ZN6SdFile10make83NameEPKcPh+0x30>
    1e36:	18 c0       	rjmp	.+48     	; 0x1e68 <_ZN6SdFile10make83NameEPKcPh+0x6e>
    1e38:	29 17       	cp	r18, r25
    1e3a:	b0 f0       	brcs	.+44     	; 0x1e68 <_ZN6SdFile10make83NameEPKcPh+0x6e>
    1e3c:	3f ed       	ldi	r19, 0xDF	; 223
    1e3e:	38 0f       	add	r19, r24
    1e40:	3e 35       	cpi	r19, 0x5E	; 94
    1e42:	90 f4       	brcc	.+36     	; 0x1e68 <_ZN6SdFile10make83NameEPKcPh+0x6e>
    1e44:	31 e0       	ldi	r19, 0x01	; 1
    1e46:	39 0f       	add	r19, r25
    1e48:	fb 01       	movw	r30, r22
    1e4a:	e9 0f       	add	r30, r25
    1e4c:	f1 1d       	adc	r31, r1
    1e4e:	9f e9       	ldi	r25, 0x9F	; 159
    1e50:	98 0f       	add	r25, r24
    1e52:	9a 31       	cpi	r25, 0x1A	; 26
    1e54:	08 f4       	brcc	.+2      	; 0x1e58 <_ZN6SdFile10make83NameEPKcPh+0x5e>
    1e56:	80 52       	subi	r24, 0x20	; 32
    1e58:	80 83       	st	Z, r24
    1e5a:	93 2f       	mov	r25, r19
    1e5c:	da cf       	rjmp	.-76     	; 0x1e12 <_ZN6SdFile10make83NameEPKcPh+0x18>
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	fb 01       	movw	r30, r22
    1e62:	90 81       	ld	r25, Z
    1e64:	90 32       	cpi	r25, 0x20	; 32
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <_ZN6SdFile10make83NameEPKcPh+0x70>
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	08 95       	ret

00001e6c <_ZN6SdFile8openRootEP8SdVolume>:
    1e6c:	0f 93       	push	r16
    1e6e:	1f 93       	push	r17
    1e70:	cf 93       	push	r28
    1e72:	df 93       	push	r29
    1e74:	fc 01       	movw	r30, r24
    1e76:	25 81       	ldd	r18, Z+5	; 0x05
    1e78:	22 23       	and	r18, r18
    1e7a:	11 f0       	breq	.+4      	; 0x1e80 <_ZN6SdFile8openRootEP8SdVolume+0x14>
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	42 c0       	rjmp	.+132    	; 0x1f04 <_ZN6SdFile8openRootEP8SdVolume+0x98>
    1e80:	8b 01       	movw	r16, r22
    1e82:	ec 01       	movw	r28, r24
    1e84:	fb 01       	movw	r30, r22
    1e86:	87 89       	ldd	r24, Z+23	; 0x17
    1e88:	80 31       	cpi	r24, 0x10	; 16
    1e8a:	b1 f4       	brne	.+44     	; 0x1eb8 <_ZN6SdFile8openRootEP8SdVolume+0x4c>
    1e8c:	82 e0       	ldi	r24, 0x02	; 2
    1e8e:	8d 83       	std	Y+5, r24	; 0x05
    1e90:	1f 8a       	std	Y+23, r1	; 0x17
    1e92:	18 8e       	std	Y+24, r1	; 0x18
    1e94:	19 8e       	std	Y+25, r1	; 0x19
    1e96:	1a 8e       	std	Y+26, r1	; 0x1a
    1e98:	80 8d       	ldd	r24, Z+24	; 0x18
    1e9a:	91 8d       	ldd	r25, Z+25	; 0x19
    1e9c:	a0 e0       	ldi	r26, 0x00	; 0
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	25 e0       	ldi	r18, 0x05	; 5
    1ea2:	88 0f       	add	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	aa 1f       	adc	r26, r26
    1ea8:	bb 1f       	adc	r27, r27
    1eaa:	2a 95       	dec	r18
    1eac:	d1 f7       	brne	.-12     	; 0x1ea2 <_ZN6SdFile8openRootEP8SdVolume+0x36>
    1eae:	8b 8b       	std	Y+19, r24	; 0x13
    1eb0:	9c 8b       	std	Y+20, r25	; 0x14
    1eb2:	ad 8b       	std	Y+21, r26	; 0x15
    1eb4:	be 8b       	std	Y+22, r27	; 0x16
    1eb6:	15 c0       	rjmp	.+42     	; 0x1ee2 <_ZN6SdFile8openRootEP8SdVolume+0x76>
    1eb8:	80 32       	cpi	r24, 0x20	; 32
    1eba:	01 f7       	brne	.-64     	; 0x1e7c <_ZN6SdFile8openRootEP8SdVolume+0x10>
    1ebc:	83 e0       	ldi	r24, 0x03	; 3
    1ebe:	8d 83       	std	Y+5, r24	; 0x05
    1ec0:	fb 01       	movw	r30, r22
    1ec2:	42 8d       	ldd	r20, Z+26	; 0x1a
    1ec4:	53 8d       	ldd	r21, Z+27	; 0x1b
    1ec6:	64 8d       	ldd	r22, Z+28	; 0x1c
    1ec8:	75 8d       	ldd	r23, Z+29	; 0x1d
    1eca:	4f 8b       	std	Y+23, r20	; 0x17
    1ecc:	58 8f       	std	Y+24, r21	; 0x18
    1ece:	69 8f       	std	Y+25, r22	; 0x19
    1ed0:	7a 8f       	std	Y+26, r23	; 0x1a
    1ed2:	9e 01       	movw	r18, r28
    1ed4:	2d 5e       	subi	r18, 0xED	; 237
    1ed6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed8:	c8 01       	movw	r24, r16
    1eda:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <_ZNK8SdVolume9chainSizeEmPm>
    1ede:	88 23       	and	r24, r24
    1ee0:	69 f2       	breq	.-102    	; 0x1e7c <_ZN6SdFile8openRootEP8SdVolume+0x10>
    1ee2:	1c 8f       	std	Y+28, r17	; 0x1c
    1ee4:	0b 8f       	std	Y+27, r16	; 0x1b
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	8c 83       	std	Y+4, r24	; 0x04
    1eea:	1e 82       	std	Y+6, r1	; 0x06
    1eec:	1f 82       	std	Y+7, r1	; 0x07
    1eee:	18 86       	std	Y+8, r1	; 0x08
    1ef0:	19 86       	std	Y+9, r1	; 0x09
    1ef2:	1a 86       	std	Y+10, r1	; 0x0a
    1ef4:	1b 86       	std	Y+11, r1	; 0x0b
    1ef6:	1c 86       	std	Y+12, r1	; 0x0c
    1ef8:	1d 86       	std	Y+13, r1	; 0x0d
    1efa:	1e 86       	std	Y+14, r1	; 0x0e
    1efc:	1f 86       	std	Y+15, r1	; 0x0f
    1efe:	18 8a       	std	Y+16, r1	; 0x10
    1f00:	19 8a       	std	Y+17, r1	; 0x11
    1f02:	1a 8a       	std	Y+18, r1	; 0x12
    1f04:	df 91       	pop	r29
    1f06:	cf 91       	pop	r28
    1f08:	1f 91       	pop	r17
    1f0a:	0f 91       	pop	r16
    1f0c:	08 95       	ret

00001f0e <_ZN6SdFile4readEPvj>:
    1f0e:	2f 92       	push	r2
    1f10:	3f 92       	push	r3
    1f12:	4f 92       	push	r4
    1f14:	5f 92       	push	r5
    1f16:	6f 92       	push	r6
    1f18:	7f 92       	push	r7
    1f1a:	8f 92       	push	r8
    1f1c:	9f 92       	push	r9
    1f1e:	af 92       	push	r10
    1f20:	bf 92       	push	r11
    1f22:	cf 92       	push	r12
    1f24:	df 92       	push	r13
    1f26:	ef 92       	push	r14
    1f28:	ff 92       	push	r15
    1f2a:	0f 93       	push	r16
    1f2c:	1f 93       	push	r17
    1f2e:	cf 93       	push	r28
    1f30:	df 93       	push	r29
    1f32:	ec 01       	movw	r28, r24
    1f34:	5b 01       	movw	r10, r22
    1f36:	4a 01       	movw	r8, r20
    1f38:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3a:	81 11       	cpse	r24, r1
    1f3c:	03 c0       	rjmp	.+6      	; 0x1f44 <_ZN6SdFile4readEPvj+0x36>
    1f3e:	8f ef       	ldi	r24, 0xFF	; 255
    1f40:	9f ef       	ldi	r25, 0xFF	; 255
    1f42:	d7 c0       	rjmp	.+430    	; 0x20f2 <_ZN6SdFile4readEPvj+0x1e4>
    1f44:	8c 81       	ldd	r24, Y+4	; 0x04
    1f46:	80 ff       	sbrs	r24, 0
    1f48:	fa cf       	rjmp	.-12     	; 0x1f3e <_ZN6SdFile4readEPvj+0x30>
    1f4a:	4b 88       	ldd	r4, Y+19	; 0x13
    1f4c:	5c 88       	ldd	r5, Y+20	; 0x14
    1f4e:	6d 88       	ldd	r6, Y+21	; 0x15
    1f50:	7e 88       	ldd	r7, Y+22	; 0x16
    1f52:	4a 85       	ldd	r20, Y+10	; 0x0a
    1f54:	5b 85       	ldd	r21, Y+11	; 0x0b
    1f56:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f58:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f5a:	c4 01       	movw	r24, r8
    1f5c:	a0 e0       	ldi	r26, 0x00	; 0
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	93 01       	movw	r18, r6
    1f62:	82 01       	movw	r16, r4
    1f64:	04 1b       	sub	r16, r20
    1f66:	15 0b       	sbc	r17, r21
    1f68:	26 0b       	sbc	r18, r22
    1f6a:	37 0b       	sbc	r19, r23
    1f6c:	08 17       	cp	r16, r24
    1f6e:	19 07       	cpc	r17, r25
    1f70:	2a 07       	cpc	r18, r26
    1f72:	3b 07       	cpc	r19, r27
    1f74:	18 f4       	brcc	.+6      	; 0x1f7c <_ZN6SdFile4readEPvj+0x6e>
    1f76:	42 01       	movw	r8, r4
    1f78:	84 1a       	sub	r8, r20
    1f7a:	95 0a       	sbc	r9, r21
    1f7c:	24 01       	movw	r4, r8
    1f7e:	1e 01       	movw	r2, r28
    1f80:	26 e0       	ldi	r18, 0x06	; 6
    1f82:	22 0e       	add	r2, r18
    1f84:	31 1c       	adc	r3, r1
    1f86:	41 14       	cp	r4, r1
    1f88:	51 04       	cpc	r5, r1
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <_ZN6SdFile4readEPvj+0x80>
    1f8c:	7e c0       	rjmp	.+252    	; 0x208a <_ZN6SdFile4readEPvj+0x17c>
    1f8e:	4a 85       	ldd	r20, Y+10	; 0x0a
    1f90:	5b 85       	ldd	r21, Y+11	; 0x0b
    1f92:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f94:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f96:	6a 01       	movw	r12, r20
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	d8 22       	and	r13, r24
    1f9c:	ed 81       	ldd	r30, Y+5	; 0x05
    1f9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fa0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fa2:	8a 01       	movw	r16, r20
    1fa4:	9b 01       	movw	r18, r22
    1fa6:	f9 e0       	ldi	r31, 0x09	; 9
    1fa8:	36 95       	lsr	r19
    1faa:	27 95       	ror	r18
    1fac:	17 95       	ror	r17
    1fae:	07 95       	ror	r16
    1fb0:	fa 95       	dec	r31
    1fb2:	d1 f7       	brne	.-12     	; 0x1fa8 <_ZN6SdFile4readEPvj+0x9a>
    1fb4:	e2 30       	cpi	r30, 0x02	; 2
    1fb6:	61 f4       	brne	.+24     	; 0x1fd0 <_ZN6SdFile4readEPvj+0xc2>
    1fb8:	fc 01       	movw	r30, r24
    1fba:	82 8d       	ldd	r24, Z+26	; 0x1a
    1fbc:	93 8d       	ldd	r25, Z+27	; 0x1b
    1fbe:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1fc0:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1fc2:	bc 01       	movw	r22, r24
    1fc4:	cd 01       	movw	r24, r26
    1fc6:	60 0f       	add	r22, r16
    1fc8:	71 1f       	adc	r23, r17
    1fca:	82 1f       	adc	r24, r18
    1fcc:	93 1f       	adc	r25, r19
    1fce:	3f c0       	rjmp	.+126    	; 0x204e <_ZN6SdFile4readEPvj+0x140>
    1fd0:	fc 01       	movw	r30, r24
    1fd2:	74 80       	ldd	r7, Z+4	; 0x04
    1fd4:	7a 94       	dec	r7
    1fd6:	70 22       	and	r7, r16
    1fd8:	c1 14       	cp	r12, r1
    1fda:	d1 04       	cpc	r13, r1
    1fdc:	c9 f4       	brne	.+50     	; 0x2010 <_ZN6SdFile4readEPvj+0x102>
    1fde:	71 10       	cpse	r7, r1
    1fe0:	17 c0       	rjmp	.+46     	; 0x2010 <_ZN6SdFile4readEPvj+0x102>
    1fe2:	45 2b       	or	r20, r21
    1fe4:	46 2b       	or	r20, r22
    1fe6:	47 2b       	or	r20, r23
    1fe8:	49 f4       	brne	.+18     	; 0x1ffc <_ZN6SdFile4readEPvj+0xee>
    1fea:	8f 89       	ldd	r24, Y+23	; 0x17
    1fec:	98 8d       	ldd	r25, Y+24	; 0x18
    1fee:	a9 8d       	ldd	r26, Y+25	; 0x19
    1ff0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1ff2:	8e 83       	std	Y+6, r24	; 0x06
    1ff4:	9f 83       	std	Y+7, r25	; 0x07
    1ff6:	a8 87       	std	Y+8, r26	; 0x08
    1ff8:	b9 87       	std	Y+9, r27	; 0x09
    1ffa:	0a c0       	rjmp	.+20     	; 0x2010 <_ZN6SdFile4readEPvj+0x102>
    1ffc:	4e 81       	ldd	r20, Y+6	; 0x06
    1ffe:	5f 81       	ldd	r21, Y+7	; 0x07
    2000:	68 85       	ldd	r22, Y+8	; 0x08
    2002:	79 85       	ldd	r23, Y+9	; 0x09
    2004:	91 01       	movw	r18, r2
    2006:	0e 94 56 16 	call	0x2cac	; 0x2cac <_ZNK8SdVolume6fatGetEmPm>
    200a:	88 23       	and	r24, r24
    200c:	09 f4       	brne	.+2      	; 0x2010 <_ZN6SdFile4readEPvj+0x102>
    200e:	97 cf       	rjmp	.-210    	; 0x1f3e <_ZN6SdFile4readEPvj+0x30>
    2010:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2012:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2014:	8e 81       	ldd	r24, Y+6	; 0x06
    2016:	9f 81       	ldd	r25, Y+7	; 0x07
    2018:	a8 85       	ldd	r26, Y+8	; 0x08
    201a:	b9 85       	ldd	r27, Y+9	; 0x09
    201c:	02 97       	sbiw	r24, 0x02	; 2
    201e:	a1 09       	sbc	r26, r1
    2020:	b1 09       	sbc	r27, r1
    2022:	05 84       	ldd	r0, Z+13	; 0x0d
    2024:	04 c0       	rjmp	.+8      	; 0x202e <_ZN6SdFile4readEPvj+0x120>
    2026:	88 0f       	add	r24, r24
    2028:	99 1f       	adc	r25, r25
    202a:	aa 1f       	adc	r26, r26
    202c:	bb 1f       	adc	r27, r27
    202e:	0a 94       	dec	r0
    2030:	d2 f7       	brpl	.-12     	; 0x2026 <_ZN6SdFile4readEPvj+0x118>
    2032:	46 85       	ldd	r20, Z+14	; 0x0e
    2034:	57 85       	ldd	r21, Z+15	; 0x0f
    2036:	60 89       	ldd	r22, Z+16	; 0x10
    2038:	71 89       	ldd	r23, Z+17	; 0x11
    203a:	84 0f       	add	r24, r20
    203c:	95 1f       	adc	r25, r21
    203e:	a6 1f       	adc	r26, r22
    2040:	b7 1f       	adc	r27, r23
    2042:	bc 01       	movw	r22, r24
    2044:	cd 01       	movw	r24, r26
    2046:	67 0d       	add	r22, r7
    2048:	71 1d       	adc	r23, r1
    204a:	81 1d       	adc	r24, r1
    204c:	91 1d       	adc	r25, r1
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	32 e0       	ldi	r19, 0x02	; 2
    2052:	2c 19       	sub	r18, r12
    2054:	3d 09       	sbc	r19, r13
    2056:	32 01       	movw	r6, r4
    2058:	24 15       	cp	r18, r4
    205a:	35 05       	cpc	r19, r5
    205c:	08 f4       	brcc	.+2      	; 0x2060 <_ZN6SdFile4readEPvj+0x152>
    205e:	39 01       	movw	r6, r18
    2060:	2c 81       	ldd	r18, Y+4	; 0x04
    2062:	26 fd       	sbrc	r18, 6
    2064:	04 c0       	rjmp	.+8      	; 0x206e <_ZN6SdFile4readEPvj+0x160>
    2066:	61 14       	cp	r6, r1
    2068:	f2 e0       	ldi	r31, 0x02	; 2
    206a:	7f 06       	cpc	r7, r31
    206c:	79 f5       	brne	.+94     	; 0x20cc <_ZN6SdFile4readEPvj+0x1be>
    206e:	00 91 4c 01 	lds	r16, 0x014C	; 0x80014c <_ZN8SdVolume17cacheBlockNumber_E>
    2072:	10 91 4d 01 	lds	r17, 0x014D	; 0x80014d <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2076:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    207a:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    207e:	60 17       	cp	r22, r16
    2080:	71 07       	cpc	r23, r17
    2082:	82 07       	cpc	r24, r18
    2084:	93 07       	cpc	r25, r19
    2086:	19 f4       	brne	.+6      	; 0x208e <_ZN6SdFile4readEPvj+0x180>
    2088:	21 c0       	rjmp	.+66     	; 0x20cc <_ZN6SdFile4readEPvj+0x1be>
    208a:	c4 01       	movw	r24, r8
    208c:	32 c0       	rjmp	.+100    	; 0x20f2 <_ZN6SdFile4readEPvj+0x1e4>
    208e:	75 01       	movw	r14, r10
    2090:	83 01       	movw	r16, r6
    2092:	96 01       	movw	r18, r12
    2094:	ab 01       	movw	r20, r22
    2096:	bc 01       	movw	r22, r24
    2098:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <_ZN8SdVolume7sdCard_E>
    209c:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <_ZN8SdVolume7sdCard_E+0x1>
    20a0:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <_ZN7Sd2Card8readDataEmjjPh>
    20a4:	88 23       	and	r24, r24
    20a6:	09 f4       	brne	.+2      	; 0x20aa <_ZN6SdFile4readEPvj+0x19c>
    20a8:	4a cf       	rjmp	.-364    	; 0x1f3e <_ZN6SdFile4readEPvj+0x30>
    20aa:	a6 0c       	add	r10, r6
    20ac:	b7 1c       	adc	r11, r7
    20ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    20b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    20b2:	ac 85       	ldd	r26, Y+12	; 0x0c
    20b4:	bd 85       	ldd	r27, Y+13	; 0x0d
    20b6:	86 0d       	add	r24, r6
    20b8:	97 1d       	adc	r25, r7
    20ba:	a1 1d       	adc	r26, r1
    20bc:	b1 1d       	adc	r27, r1
    20be:	8a 87       	std	Y+10, r24	; 0x0a
    20c0:	9b 87       	std	Y+11, r25	; 0x0b
    20c2:	ac 87       	std	Y+12, r26	; 0x0c
    20c4:	bd 87       	std	Y+13, r27	; 0x0d
    20c6:	46 18       	sub	r4, r6
    20c8:	57 08       	sbc	r5, r7
    20ca:	5d cf       	rjmp	.-326    	; 0x1f86 <_ZN6SdFile4readEPvj+0x78>
    20cc:	40 e0       	ldi	r20, 0x00	; 0
    20ce:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_ZN8SdVolume13cacheRawBlockEmh>
    20d2:	88 23       	and	r24, r24
    20d4:	09 f4       	brne	.+2      	; 0x20d8 <_ZN6SdFile4readEPvj+0x1ca>
    20d6:	33 cf       	rjmp	.-410    	; 0x1f3e <_ZN6SdFile4readEPvj+0x30>
    20d8:	f6 01       	movw	r30, r12
    20da:	e0 51       	subi	r30, 0x10	; 16
    20dc:	fb 4f       	sbci	r31, 0xFB	; 251
    20de:	d5 01       	movw	r26, r10
    20e0:	cf 01       	movw	r24, r30
    20e2:	86 0d       	add	r24, r6
    20e4:	97 1d       	adc	r25, r7
    20e6:	8e 17       	cp	r24, r30
    20e8:	9f 07       	cpc	r25, r31
    20ea:	f9 f2       	breq	.-66     	; 0x20aa <_ZN6SdFile4readEPvj+0x19c>
    20ec:	21 91       	ld	r18, Z+
    20ee:	2d 93       	st	X+, r18
    20f0:	fa cf       	rjmp	.-12     	; 0x20e6 <_ZN6SdFile4readEPvj+0x1d8>
    20f2:	df 91       	pop	r29
    20f4:	cf 91       	pop	r28
    20f6:	1f 91       	pop	r17
    20f8:	0f 91       	pop	r16
    20fa:	ff 90       	pop	r15
    20fc:	ef 90       	pop	r14
    20fe:	df 90       	pop	r13
    2100:	cf 90       	pop	r12
    2102:	bf 90       	pop	r11
    2104:	af 90       	pop	r10
    2106:	9f 90       	pop	r9
    2108:	8f 90       	pop	r8
    210a:	7f 90       	pop	r7
    210c:	6f 90       	pop	r6
    210e:	5f 90       	pop	r5
    2110:	4f 90       	pop	r4
    2112:	3f 90       	pop	r3
    2114:	2f 90       	pop	r2
    2116:	08 95       	ret

00002118 <_ZN6SdFile12readDirCacheEv>:
    2118:	ff 92       	push	r15
    211a:	0f 93       	push	r16
    211c:	1f 93       	push	r17
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
    2122:	1f 92       	push	r1
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	fc 01       	movw	r30, r24
    212a:	25 81       	ldd	r18, Z+5	; 0x05
    212c:	22 30       	cpi	r18, 0x02	; 2
    212e:	18 f4       	brcc	.+6      	; 0x2136 <_ZN6SdFile12readDirCacheEv+0x1e>
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	33 c0       	rjmp	.+102    	; 0x219c <_ZN6SdFile12readDirCacheEv+0x84>
    2136:	8c 01       	movw	r16, r24
    2138:	fc 01       	movw	r30, r24
    213a:	42 85       	ldd	r20, Z+10	; 0x0a
    213c:	53 85       	ldd	r21, Z+11	; 0x0b
    213e:	64 85       	ldd	r22, Z+12	; 0x0c
    2140:	75 85       	ldd	r23, Z+13	; 0x0d
    2142:	85 e0       	ldi	r24, 0x05	; 5
    2144:	76 95       	lsr	r23
    2146:	67 95       	ror	r22
    2148:	57 95       	ror	r21
    214a:	47 95       	ror	r20
    214c:	8a 95       	dec	r24
    214e:	d1 f7       	brne	.-12     	; 0x2144 <_ZN6SdFile12readDirCacheEv+0x2c>
    2150:	f4 2f       	mov	r31, r20
    2152:	ff 70       	andi	r31, 0x0F	; 15
    2154:	ff 2e       	mov	r15, r31
    2156:	41 e0       	ldi	r20, 0x01	; 1
    2158:	50 e0       	ldi	r21, 0x00	; 0
    215a:	be 01       	movw	r22, r28
    215c:	6f 5f       	subi	r22, 0xFF	; 255
    215e:	7f 4f       	sbci	r23, 0xFF	; 255
    2160:	c8 01       	movw	r24, r16
    2162:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <_ZN6SdFile4readEPvj>
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	19 f4       	brne	.+6      	; 0x2170 <_ZN6SdFile12readDirCacheEv+0x58>
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <_ZN6SdFile12readDirCacheEv+0x5c>
    2170:	8f ef       	ldi	r24, 0xFF	; 255
    2172:	9f ef       	ldi	r25, 0xFF	; 255
    2174:	01 96       	adiw	r24, 0x01	; 1
    2176:	e1 f2       	breq	.-72     	; 0x2130 <_ZN6SdFile12readDirCacheEv+0x18>
    2178:	f8 01       	movw	r30, r16
    217a:	82 85       	ldd	r24, Z+10	; 0x0a
    217c:	93 85       	ldd	r25, Z+11	; 0x0b
    217e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2180:	b5 85       	ldd	r27, Z+13	; 0x0d
    2182:	4f 96       	adiw	r24, 0x1f	; 31
    2184:	a1 1d       	adc	r26, r1
    2186:	b1 1d       	adc	r27, r1
    2188:	82 87       	std	Z+10, r24	; 0x0a
    218a:	93 87       	std	Z+11, r25	; 0x0b
    218c:	a4 87       	std	Z+12, r26	; 0x0c
    218e:	b5 87       	std	Z+13, r27	; 0x0d
    2190:	f0 e2       	ldi	r31, 0x20	; 32
    2192:	ff 9e       	mul	r15, r31
    2194:	c0 01       	movw	r24, r0
    2196:	11 24       	eor	r1, r1
    2198:	80 51       	subi	r24, 0x10	; 16
    219a:	9b 4f       	sbci	r25, 0xFB	; 251
    219c:	0f 90       	pop	r0
    219e:	df 91       	pop	r29
    21a0:	cf 91       	pop	r28
    21a2:	1f 91       	pop	r17
    21a4:	0f 91       	pop	r16
    21a6:	ff 90       	pop	r15
    21a8:	08 95       	ret

000021aa <_ZN6SdFile7seekSetEm>:
    21aa:	8f 92       	push	r8
    21ac:	9f 92       	push	r9
    21ae:	af 92       	push	r10
    21b0:	bf 92       	push	r11
    21b2:	cf 92       	push	r12
    21b4:	df 92       	push	r13
    21b6:	ef 92       	push	r14
    21b8:	ff 92       	push	r15
    21ba:	0f 93       	push	r16
    21bc:	1f 93       	push	r17
    21be:	cf 93       	push	r28
    21c0:	df 93       	push	r29
    21c2:	ec 01       	movw	r28, r24
    21c4:	8d 81       	ldd	r24, Y+5	; 0x05
    21c6:	81 11       	cpse	r24, r1
    21c8:	02 c0       	rjmp	.+4      	; 0x21ce <_ZN6SdFile7seekSetEm+0x24>
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	78 c0       	rjmp	.+240    	; 0x22be <_ZN6SdFile7seekSetEm+0x114>
    21ce:	0b 89       	ldd	r16, Y+19	; 0x13
    21d0:	1c 89       	ldd	r17, Y+20	; 0x14
    21d2:	2d 89       	ldd	r18, Y+21	; 0x15
    21d4:	3e 89       	ldd	r19, Y+22	; 0x16
    21d6:	04 17       	cp	r16, r20
    21d8:	15 07       	cpc	r17, r21
    21da:	26 07       	cpc	r18, r22
    21dc:	37 07       	cpc	r19, r23
    21de:	a8 f3       	brcs	.-22     	; 0x21ca <_ZN6SdFile7seekSetEm+0x20>
    21e0:	6a 01       	movw	r12, r20
    21e2:	7b 01       	movw	r14, r22
    21e4:	82 30       	cpi	r24, 0x02	; 2
    21e6:	29 f4       	brne	.+10     	; 0x21f2 <_ZN6SdFile7seekSetEm+0x48>
    21e8:	ca 86       	std	Y+10, r12	; 0x0a
    21ea:	db 86       	std	Y+11, r13	; 0x0b
    21ec:	ec 86       	std	Y+12, r14	; 0x0c
    21ee:	fd 86       	std	Y+13, r15	; 0x0d
    21f0:	0d c0       	rjmp	.+26     	; 0x220c <_ZN6SdFile7seekSetEm+0x62>
    21f2:	c1 14       	cp	r12, r1
    21f4:	d1 04       	cpc	r13, r1
    21f6:	e1 04       	cpc	r14, r1
    21f8:	f1 04       	cpc	r15, r1
    21fa:	51 f4       	brne	.+20     	; 0x2210 <_ZN6SdFile7seekSetEm+0x66>
    21fc:	1e 82       	std	Y+6, r1	; 0x06
    21fe:	1f 82       	std	Y+7, r1	; 0x07
    2200:	18 86       	std	Y+8, r1	; 0x08
    2202:	19 86       	std	Y+9, r1	; 0x09
    2204:	1a 86       	std	Y+10, r1	; 0x0a
    2206:	1b 86       	std	Y+11, r1	; 0x0b
    2208:	1c 86       	std	Y+12, r1	; 0x0c
    220a:	1d 86       	std	Y+13, r1	; 0x0d
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	57 c0       	rjmp	.+174    	; 0x22be <_ZN6SdFile7seekSetEm+0x114>
    2210:	8a 84       	ldd	r8, Y+10	; 0x0a
    2212:	9b 84       	ldd	r9, Y+11	; 0x0b
    2214:	ac 84       	ldd	r10, Y+12	; 0x0c
    2216:	bd 84       	ldd	r11, Y+13	; 0x0d
    2218:	eb 8d       	ldd	r30, Y+27	; 0x1b
    221a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    221c:	25 85       	ldd	r18, Z+13	; 0x0d
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	27 5f       	subi	r18, 0xF7	; 247
    2222:	3f 4f       	sbci	r19, 0xFF	; 255
    2224:	b5 01       	movw	r22, r10
    2226:	a4 01       	movw	r20, r8
    2228:	41 50       	subi	r20, 0x01	; 1
    222a:	51 09       	sbc	r21, r1
    222c:	61 09       	sbc	r22, r1
    222e:	71 09       	sbc	r23, r1
    2230:	02 2e       	mov	r0, r18
    2232:	04 c0       	rjmp	.+8      	; 0x223c <_ZN6SdFile7seekSetEm+0x92>
    2234:	76 95       	lsr	r23
    2236:	67 95       	ror	r22
    2238:	57 95       	ror	r21
    223a:	47 95       	ror	r20
    223c:	0a 94       	dec	r0
    223e:	d2 f7       	brpl	.-12     	; 0x2234 <_ZN6SdFile7seekSetEm+0x8a>
    2240:	d7 01       	movw	r26, r14
    2242:	c6 01       	movw	r24, r12
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	a1 09       	sbc	r26, r1
    2248:	b1 09       	sbc	r27, r1
    224a:	04 c0       	rjmp	.+8      	; 0x2254 <_ZN6SdFile7seekSetEm+0xaa>
    224c:	b6 95       	lsr	r27
    224e:	a7 95       	ror	r26
    2250:	97 95       	ror	r25
    2252:	87 95       	ror	r24
    2254:	2a 95       	dec	r18
    2256:	d2 f7       	brpl	.-12     	; 0x224c <_ZN6SdFile7seekSetEm+0xa2>
    2258:	84 17       	cp	r24, r20
    225a:	95 07       	cpc	r25, r21
    225c:	a6 07       	cpc	r26, r22
    225e:	b7 07       	cpc	r27, r23
    2260:	20 f0       	brcs	.+8      	; 0x226a <_ZN6SdFile7seekSetEm+0xc0>
    2262:	89 28       	or	r8, r9
    2264:	8a 28       	or	r8, r10
    2266:	8b 28       	or	r8, r11
    2268:	71 f4       	brne	.+28     	; 0x2286 <_ZN6SdFile7seekSetEm+0xdc>
    226a:	4f 89       	ldd	r20, Y+23	; 0x17
    226c:	58 8d       	ldd	r21, Y+24	; 0x18
    226e:	69 8d       	ldd	r22, Y+25	; 0x19
    2270:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2272:	4e 83       	std	Y+6, r20	; 0x06
    2274:	5f 83       	std	Y+7, r21	; 0x07
    2276:	68 87       	std	Y+8, r22	; 0x08
    2278:	79 87       	std	Y+9, r23	; 0x09
    227a:	4c 01       	movw	r8, r24
    227c:	5d 01       	movw	r10, r26
    227e:	8e 01       	movw	r16, r28
    2280:	0a 5f       	subi	r16, 0xFA	; 250
    2282:	1f 4f       	sbci	r17, 0xFF	; 255
    2284:	16 c0       	rjmp	.+44     	; 0x22b2 <_ZN6SdFile7seekSetEm+0x108>
    2286:	84 1b       	sub	r24, r20
    2288:	95 0b       	sbc	r25, r21
    228a:	a6 0b       	sbc	r26, r22
    228c:	b7 0b       	sbc	r27, r23
    228e:	f5 cf       	rjmp	.-22     	; 0x227a <_ZN6SdFile7seekSetEm+0xd0>
    2290:	4e 81       	ldd	r20, Y+6	; 0x06
    2292:	5f 81       	ldd	r21, Y+7	; 0x07
    2294:	68 85       	ldd	r22, Y+8	; 0x08
    2296:	79 85       	ldd	r23, Y+9	; 0x09
    2298:	98 01       	movw	r18, r16
    229a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    229c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    229e:	0e 94 56 16 	call	0x2cac	; 0x2cac <_ZNK8SdVolume6fatGetEmPm>
    22a2:	91 e0       	ldi	r25, 0x01	; 1
    22a4:	89 1a       	sub	r8, r25
    22a6:	91 08       	sbc	r9, r1
    22a8:	a1 08       	sbc	r10, r1
    22aa:	b1 08       	sbc	r11, r1
    22ac:	88 23       	and	r24, r24
    22ae:	09 f4       	brne	.+2      	; 0x22b2 <_ZN6SdFile7seekSetEm+0x108>
    22b0:	8c cf       	rjmp	.-232    	; 0x21ca <_ZN6SdFile7seekSetEm+0x20>
    22b2:	81 14       	cp	r8, r1
    22b4:	91 04       	cpc	r9, r1
    22b6:	a1 04       	cpc	r10, r1
    22b8:	b1 04       	cpc	r11, r1
    22ba:	51 f7       	brne	.-44     	; 0x2290 <_ZN6SdFile7seekSetEm+0xe6>
    22bc:	95 cf       	rjmp	.-214    	; 0x21e8 <_ZN6SdFile7seekSetEm+0x3e>
    22be:	df 91       	pop	r29
    22c0:	cf 91       	pop	r28
    22c2:	1f 91       	pop	r17
    22c4:	0f 91       	pop	r16
    22c6:	ff 90       	pop	r15
    22c8:	ef 90       	pop	r14
    22ca:	df 90       	pop	r13
    22cc:	cf 90       	pop	r12
    22ce:	bf 90       	pop	r11
    22d0:	af 90       	pop	r10
    22d2:	9f 90       	pop	r9
    22d4:	8f 90       	pop	r8
    22d6:	08 95       	ret

000022d8 <_ZN6SdFile4syncEv>:
    22d8:	0f 93       	push	r16
    22da:	1f 93       	push	r17
    22dc:	cf 93       	push	r28
    22de:	df 93       	push	r29
    22e0:	ec 01       	movw	r28, r24
    22e2:	8d 81       	ldd	r24, Y+5	; 0x05
    22e4:	88 23       	and	r24, r24
    22e6:	c9 f1       	breq	.+114    	; 0x235a <_ZN6SdFile4syncEv+0x82>
    22e8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ea:	87 ff       	sbrs	r24, 7
    22ec:	30 c0       	rjmp	.+96     	; 0x234e <_ZN6SdFile4syncEv+0x76>
    22ee:	61 e0       	ldi	r22, 0x01	; 1
    22f0:	ce 01       	movw	r24, r28
    22f2:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN6SdFile13cacheDirEntryEh>
    22f6:	8c 01       	movw	r16, r24
    22f8:	89 2b       	or	r24, r25
    22fa:	79 f1       	breq	.+94     	; 0x235a <_ZN6SdFile4syncEv+0x82>
    22fc:	8d 81       	ldd	r24, Y+5	; 0x05
    22fe:	82 30       	cpi	r24, 0x02	; 2
    2300:	48 f4       	brcc	.+18     	; 0x2314 <_ZN6SdFile4syncEv+0x3c>
    2302:	8b 89       	ldd	r24, Y+19	; 0x13
    2304:	9c 89       	ldd	r25, Y+20	; 0x14
    2306:	ad 89       	ldd	r26, Y+21	; 0x15
    2308:	be 89       	ldd	r27, Y+22	; 0x16
    230a:	f8 01       	movw	r30, r16
    230c:	84 8f       	std	Z+28, r24	; 0x1c
    230e:	95 8f       	std	Z+29, r25	; 0x1d
    2310:	a6 8f       	std	Z+30, r26	; 0x1e
    2312:	b7 8f       	std	Z+31, r27	; 0x1f
    2314:	8f 89       	ldd	r24, Y+23	; 0x17
    2316:	98 8d       	ldd	r25, Y+24	; 0x18
    2318:	a9 8d       	ldd	r26, Y+25	; 0x19
    231a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    231c:	f8 01       	movw	r30, r16
    231e:	93 8f       	std	Z+27, r25	; 0x1b
    2320:	82 8f       	std	Z+26, r24	; 0x1a
    2322:	b5 8b       	std	Z+21, r27	; 0x15
    2324:	a4 8b       	std	Z+20, r26	; 0x14
    2326:	e0 91 e7 04 	lds	r30, 0x04E7	; 0x8004e7 <_ZN6SdFile9dateTime_E>
    232a:	f0 91 e8 04 	lds	r31, 0x04E8	; 0x8004e8 <_ZN6SdFile9dateTime_E+0x1>
    232e:	30 97       	sbiw	r30, 0x00	; 0
    2330:	59 f0       	breq	.+22     	; 0x2348 <_ZN6SdFile4syncEv+0x70>
    2332:	b8 01       	movw	r22, r16
    2334:	6a 5e       	subi	r22, 0xEA	; 234
    2336:	7f 4f       	sbci	r23, 0xFF	; 255
    2338:	c8 01       	movw	r24, r16
    233a:	48 96       	adiw	r24, 0x18	; 24
    233c:	09 95       	icall
    233e:	f8 01       	movw	r30, r16
    2340:	80 8d       	ldd	r24, Z+24	; 0x18
    2342:	91 8d       	ldd	r25, Z+25	; 0x19
    2344:	93 8b       	std	Z+19, r25	; 0x13
    2346:	82 8b       	std	Z+18, r24	; 0x12
    2348:	8c 81       	ldd	r24, Y+4	; 0x04
    234a:	8f 77       	andi	r24, 0x7F	; 127
    234c:	8c 83       	std	Y+4, r24	; 0x04
    234e:	df 91       	pop	r29
    2350:	cf 91       	pop	r28
    2352:	1f 91       	pop	r17
    2354:	0f 91       	pop	r16
    2356:	0c 94 bc 15 	jmp	0x2b78	; 0x2b78 <_ZN8SdVolume10cacheFlushEv>
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	df 91       	pop	r29
    235e:	cf 91       	pop	r28
    2360:	1f 91       	pop	r17
    2362:	0f 91       	pop	r16
    2364:	08 95       	ret

00002366 <_ZN6SdFile5closeEv>:
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
    236a:	ec 01       	movw	r28, r24
    236c:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <_ZN6SdFile4syncEv>
    2370:	88 23       	and	r24, r24
    2372:	11 f0       	breq	.+4      	; 0x2378 <_ZN6SdFile5closeEv+0x12>
    2374:	1d 82       	std	Y+5, r1	; 0x05
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	df 91       	pop	r29
    237a:	cf 91       	pop	r28
    237c:	08 95       	ret

0000237e <_ZN6SdFile8truncateEm>:
    237e:	4f 92       	push	r4
    2380:	5f 92       	push	r5
    2382:	6f 92       	push	r6
    2384:	7f 92       	push	r7
    2386:	8f 92       	push	r8
    2388:	9f 92       	push	r9
    238a:	af 92       	push	r10
    238c:	bf 92       	push	r11
    238e:	ef 92       	push	r14
    2390:	ff 92       	push	r15
    2392:	0f 93       	push	r16
    2394:	1f 93       	push	r17
    2396:	cf 93       	push	r28
    2398:	df 93       	push	r29
    239a:	00 d0       	rcall	.+0      	; 0x239c <_ZN6SdFile8truncateEm+0x1e>
    239c:	00 d0       	rcall	.+0      	; 0x239e <_ZN6SdFile8truncateEm+0x20>
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
    23a2:	fc 01       	movw	r30, r24
    23a4:	85 81       	ldd	r24, Z+5	; 0x05
    23a6:	81 30       	cpi	r24, 0x01	; 1
    23a8:	e9 f4       	brne	.+58     	; 0x23e4 <_ZN6SdFile8truncateEm+0x66>
    23aa:	84 81       	ldd	r24, Z+4	; 0x04
    23ac:	81 ff       	sbrs	r24, 1
    23ae:	1a c0       	rjmp	.+52     	; 0x23e4 <_ZN6SdFile8truncateEm+0x66>
    23b0:	83 89       	ldd	r24, Z+19	; 0x13
    23b2:	94 89       	ldd	r25, Z+20	; 0x14
    23b4:	a5 89       	ldd	r26, Z+21	; 0x15
    23b6:	b6 89       	ldd	r27, Z+22	; 0x16
    23b8:	84 17       	cp	r24, r20
    23ba:	95 07       	cpc	r25, r21
    23bc:	a6 07       	cpc	r26, r22
    23be:	b7 07       	cpc	r27, r23
    23c0:	88 f0       	brcs	.+34     	; 0x23e4 <_ZN6SdFile8truncateEm+0x66>
    23c2:	89 2b       	or	r24, r25
    23c4:	8a 2b       	or	r24, r26
    23c6:	8b 2b       	or	r24, r27
    23c8:	09 f4       	brne	.+2      	; 0x23cc <_ZN6SdFile8truncateEm+0x4e>
    23ca:	79 c0       	rjmp	.+242    	; 0x24be <_ZN6SdFile8truncateEm+0x140>
    23cc:	4a 01       	movw	r8, r20
    23ce:	5b 01       	movw	r10, r22
    23d0:	7f 01       	movw	r14, r30
    23d2:	42 84       	ldd	r4, Z+10	; 0x0a
    23d4:	53 84       	ldd	r5, Z+11	; 0x0b
    23d6:	64 84       	ldd	r6, Z+12	; 0x0c
    23d8:	75 84       	ldd	r7, Z+13	; 0x0d
    23da:	cf 01       	movw	r24, r30
    23dc:	0e 94 d5 10 	call	0x21aa	; 0x21aa <_ZN6SdFile7seekSetEm>
    23e0:	81 11       	cpse	r24, r1
    23e2:	02 c0       	rjmp	.+4      	; 0x23e8 <_ZN6SdFile8truncateEm+0x6a>
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	6c c0       	rjmp	.+216    	; 0x24c0 <_ZN6SdFile8truncateEm+0x142>
    23e8:	f7 01       	movw	r30, r14
    23ea:	83 8d       	ldd	r24, Z+27	; 0x1b
    23ec:	94 8d       	ldd	r25, Z+28	; 0x1c
    23ee:	81 14       	cp	r8, r1
    23f0:	91 04       	cpc	r9, r1
    23f2:	a1 04       	cpc	r10, r1
    23f4:	b1 04       	cpc	r11, r1
    23f6:	71 f4       	brne	.+28     	; 0x2414 <_ZN6SdFile8truncateEm+0x96>
    23f8:	47 89       	ldd	r20, Z+23	; 0x17
    23fa:	50 8d       	ldd	r21, Z+24	; 0x18
    23fc:	61 8d       	ldd	r22, Z+25	; 0x19
    23fe:	72 8d       	ldd	r23, Z+26	; 0x1a
    2400:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <_ZN8SdVolume9freeChainEm>
    2404:	88 23       	and	r24, r24
    2406:	71 f3       	breq	.-36     	; 0x23e4 <_ZN6SdFile8truncateEm+0x66>
    2408:	f7 01       	movw	r30, r14
    240a:	17 8a       	std	Z+23, r1	; 0x17
    240c:	10 8e       	std	Z+24, r1	; 0x18
    240e:	11 8e       	std	Z+25, r1	; 0x19
    2410:	12 8e       	std	Z+26, r1	; 0x1a
    2412:	3a c0       	rjmp	.+116    	; 0x2488 <_ZN6SdFile8truncateEm+0x10a>
    2414:	f7 01       	movw	r30, r14
    2416:	46 81       	ldd	r20, Z+6	; 0x06
    2418:	57 81       	ldd	r21, Z+7	; 0x07
    241a:	60 85       	ldd	r22, Z+8	; 0x08
    241c:	71 85       	ldd	r23, Z+9	; 0x09
    241e:	9e 01       	movw	r18, r28
    2420:	2f 5f       	subi	r18, 0xFF	; 255
    2422:	3f 4f       	sbci	r19, 0xFF	; 255
    2424:	0e 94 56 16 	call	0x2cac	; 0x2cac <_ZNK8SdVolume6fatGetEmPm>
    2428:	88 23       	and	r24, r24
    242a:	e1 f2       	breq	.-72     	; 0x23e4 <_ZN6SdFile8truncateEm+0x66>
    242c:	49 81       	ldd	r20, Y+1	; 0x01
    242e:	5a 81       	ldd	r21, Y+2	; 0x02
    2430:	6b 81       	ldd	r22, Y+3	; 0x03
    2432:	7c 81       	ldd	r23, Y+4	; 0x04
    2434:	f7 01       	movw	r30, r14
    2436:	83 8d       	ldd	r24, Z+27	; 0x1b
    2438:	94 8d       	ldd	r25, Z+28	; 0x1c
    243a:	fc 01       	movw	r30, r24
    243c:	27 89       	ldd	r18, Z+23	; 0x17
    243e:	20 31       	cpi	r18, 0x10	; 16
    2440:	29 f0       	breq	.+10     	; 0x244c <_ZN6SdFile8truncateEm+0xce>
    2442:	08 ef       	ldi	r16, 0xF8	; 248
    2444:	1f ef       	ldi	r17, 0xFF	; 255
    2446:	2f ef       	ldi	r18, 0xFF	; 255
    2448:	3f e0       	ldi	r19, 0x0F	; 15
    244a:	04 c0       	rjmp	.+8      	; 0x2454 <_ZN6SdFile8truncateEm+0xd6>
    244c:	08 ef       	ldi	r16, 0xF8	; 248
    244e:	1f ef       	ldi	r17, 0xFF	; 255
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 17       	cp	r20, r16
    2456:	51 07       	cpc	r21, r17
    2458:	62 07       	cpc	r22, r18
    245a:	73 07       	cpc	r23, r19
    245c:	a8 f4       	brcc	.+42     	; 0x2488 <_ZN6SdFile8truncateEm+0x10a>
    245e:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <_ZN8SdVolume9freeChainEm>
    2462:	88 23       	and	r24, r24
    2464:	09 f4       	brne	.+2      	; 0x2468 <_ZN6SdFile8truncateEm+0xea>
    2466:	be cf       	rjmp	.-132    	; 0x23e4 <_ZN6SdFile8truncateEm+0x66>
    2468:	f7 01       	movw	r30, r14
    246a:	46 81       	ldd	r20, Z+6	; 0x06
    246c:	57 81       	ldd	r21, Z+7	; 0x07
    246e:	60 85       	ldd	r22, Z+8	; 0x08
    2470:	71 85       	ldd	r23, Z+9	; 0x09
    2472:	0f ef       	ldi	r16, 0xFF	; 255
    2474:	1f ef       	ldi	r17, 0xFF	; 255
    2476:	2f ef       	ldi	r18, 0xFF	; 255
    2478:	3f e0       	ldi	r19, 0x0F	; 15
    247a:	83 8d       	ldd	r24, Z+27	; 0x1b
    247c:	94 8d       	ldd	r25, Z+28	; 0x1c
    247e:	0e 94 42 17 	call	0x2e84	; 0x2e84 <_ZN8SdVolume6fatPutEmm>
    2482:	88 23       	and	r24, r24
    2484:	09 f4       	brne	.+2      	; 0x2488 <_ZN6SdFile8truncateEm+0x10a>
    2486:	ae cf       	rjmp	.-164    	; 0x23e4 <_ZN6SdFile8truncateEm+0x66>
    2488:	f7 01       	movw	r30, r14
    248a:	83 8a       	std	Z+19, r8	; 0x13
    248c:	94 8a       	std	Z+20, r9	; 0x14
    248e:	a5 8a       	std	Z+21, r10	; 0x15
    2490:	b6 8a       	std	Z+22, r11	; 0x16
    2492:	84 81       	ldd	r24, Z+4	; 0x04
    2494:	80 68       	ori	r24, 0x80	; 128
    2496:	84 83       	std	Z+4, r24	; 0x04
    2498:	c7 01       	movw	r24, r14
    249a:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <_ZN6SdFile4syncEv>
    249e:	88 23       	and	r24, r24
    24a0:	09 f4       	brne	.+2      	; 0x24a4 <_ZN6SdFile8truncateEm+0x126>
    24a2:	a0 cf       	rjmp	.-192    	; 0x23e4 <_ZN6SdFile8truncateEm+0x66>
    24a4:	b5 01       	movw	r22, r10
    24a6:	a4 01       	movw	r20, r8
    24a8:	48 14       	cp	r4, r8
    24aa:	59 04       	cpc	r5, r9
    24ac:	6a 04       	cpc	r6, r10
    24ae:	7b 04       	cpc	r7, r11
    24b0:	10 f4       	brcc	.+4      	; 0x24b6 <_ZN6SdFile8truncateEm+0x138>
    24b2:	b3 01       	movw	r22, r6
    24b4:	a2 01       	movw	r20, r4
    24b6:	c7 01       	movw	r24, r14
    24b8:	0e 94 d5 10 	call	0x21aa	; 0x21aa <_ZN6SdFile7seekSetEm>
    24bc:	01 c0       	rjmp	.+2      	; 0x24c0 <_ZN6SdFile8truncateEm+0x142>
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	0f 90       	pop	r0
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	0f 90       	pop	r0
    24c8:	df 91       	pop	r29
    24ca:	cf 91       	pop	r28
    24cc:	1f 91       	pop	r17
    24ce:	0f 91       	pop	r16
    24d0:	ff 90       	pop	r15
    24d2:	ef 90       	pop	r14
    24d4:	bf 90       	pop	r11
    24d6:	af 90       	pop	r10
    24d8:	9f 90       	pop	r9
    24da:	8f 90       	pop	r8
    24dc:	7f 90       	pop	r7
    24de:	6f 90       	pop	r6
    24e0:	5f 90       	pop	r5
    24e2:	4f 90       	pop	r4
    24e4:	08 95       	ret

000024e6 <_ZN6SdFile15openCachedEntryEhh>:
    24e6:	1f 93       	push	r17
    24e8:	cf 93       	push	r28
    24ea:	df 93       	push	r29
    24ec:	ec 01       	movw	r28, r24
    24ee:	80 e2       	ldi	r24, 0x20	; 32
    24f0:	68 9f       	mul	r22, r24
    24f2:	f0 01       	movw	r30, r0
    24f4:	11 24       	eor	r1, r1
    24f6:	e0 51       	subi	r30, 0x10	; 16
    24f8:	fb 4f       	sbci	r31, 0xFB	; 251
    24fa:	93 85       	ldd	r25, Z+11	; 0x0b
    24fc:	91 71       	andi	r25, 0x11	; 17
    24fe:	29 f0       	breq	.+10     	; 0x250a <_ZN6SdFile15openCachedEntryEhh+0x24>
    2500:	84 2f       	mov	r24, r20
    2502:	82 74       	andi	r24, 0x42	; 66
    2504:	11 f0       	breq	.+4      	; 0x250a <_ZN6SdFile15openCachedEntryEhh+0x24>
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	52 c0       	rjmp	.+164    	; 0x25ae <_ZN6SdFile15openCachedEntryEhh+0xc8>
    250a:	14 2f       	mov	r17, r20
    250c:	6a 8b       	std	Y+18, r22	; 0x12
    250e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <_ZN8SdVolume17cacheBlockNumber_E>
    2512:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2516:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    251a:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    251e:	8e 87       	std	Y+14, r24	; 0x0e
    2520:	9f 87       	std	Y+15, r25	; 0x0f
    2522:	a8 8b       	std	Y+16, r26	; 0x10
    2524:	b9 8b       	std	Y+17, r27	; 0x11
    2526:	44 89       	ldd	r20, Z+20	; 0x14
    2528:	55 89       	ldd	r21, Z+21	; 0x15
    252a:	60 e0       	ldi	r22, 0x00	; 0
    252c:	70 e0       	ldi	r23, 0x00	; 0
    252e:	ba 01       	movw	r22, r20
    2530:	55 27       	eor	r21, r21
    2532:	44 27       	eor	r20, r20
    2534:	82 8d       	ldd	r24, Z+26	; 0x1a
    2536:	93 8d       	ldd	r25, Z+27	; 0x1b
    2538:	a0 e0       	ldi	r26, 0x00	; 0
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	48 2b       	or	r20, r24
    253e:	59 2b       	or	r21, r25
    2540:	6a 2b       	or	r22, r26
    2542:	7b 2b       	or	r23, r27
    2544:	4f 8b       	std	Y+23, r20	; 0x17
    2546:	58 8f       	std	Y+24, r21	; 0x18
    2548:	69 8f       	std	Y+25, r22	; 0x19
    254a:	7a 8f       	std	Y+26, r23	; 0x1a
    254c:	83 85       	ldd	r24, Z+11	; 0x0b
    254e:	88 71       	andi	r24, 0x18	; 24
    2550:	51 f4       	brne	.+20     	; 0x2566 <_ZN6SdFile15openCachedEntryEhh+0x80>
    2552:	84 8d       	ldd	r24, Z+28	; 0x1c
    2554:	95 8d       	ldd	r25, Z+29	; 0x1d
    2556:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2558:	b7 8d       	ldd	r27, Z+31	; 0x1f
    255a:	8b 8b       	std	Y+19, r24	; 0x13
    255c:	9c 8b       	std	Y+20, r25	; 0x14
    255e:	ad 8b       	std	Y+21, r26	; 0x15
    2560:	be 8b       	std	Y+22, r27	; 0x16
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	0c c0       	rjmp	.+24     	; 0x257e <_ZN6SdFile15openCachedEntryEhh+0x98>
    2566:	80 31       	cpi	r24, 0x10	; 16
    2568:	71 f6       	brne	.-100    	; 0x2506 <_ZN6SdFile15openCachedEntryEhh+0x20>
    256a:	9e 01       	movw	r18, r28
    256c:	2d 5e       	subi	r18, 0xED	; 237
    256e:	3f 4f       	sbci	r19, 0xFF	; 255
    2570:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2572:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2574:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <_ZNK8SdVolume9chainSizeEmPm>
    2578:	88 23       	and	r24, r24
    257a:	29 f2       	breq	.-118    	; 0x2506 <_ZN6SdFile15openCachedEntryEhh+0x20>
    257c:	84 e0       	ldi	r24, 0x04	; 4
    257e:	8d 83       	std	Y+5, r24	; 0x05
    2580:	81 2f       	mov	r24, r17
    2582:	8f 70       	andi	r24, 0x0F	; 15
    2584:	8c 83       	std	Y+4, r24	; 0x04
    2586:	1e 82       	std	Y+6, r1	; 0x06
    2588:	1f 82       	std	Y+7, r1	; 0x07
    258a:	18 86       	std	Y+8, r1	; 0x08
    258c:	19 86       	std	Y+9, r1	; 0x09
    258e:	1a 86       	std	Y+10, r1	; 0x0a
    2590:	1b 86       	std	Y+11, r1	; 0x0b
    2592:	1c 86       	std	Y+12, r1	; 0x0c
    2594:	1d 86       	std	Y+13, r1	; 0x0d
    2596:	16 ff       	sbrs	r17, 6
    2598:	09 c0       	rjmp	.+18     	; 0x25ac <_ZN6SdFile15openCachedEntryEhh+0xc6>
    259a:	40 e0       	ldi	r20, 0x00	; 0
    259c:	50 e0       	ldi	r21, 0x00	; 0
    259e:	ba 01       	movw	r22, r20
    25a0:	ce 01       	movw	r24, r28
    25a2:	df 91       	pop	r29
    25a4:	cf 91       	pop	r28
    25a6:	1f 91       	pop	r17
    25a8:	0c 94 bf 11 	jmp	0x237e	; 0x237e <_ZN6SdFile8truncateEm>
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	df 91       	pop	r29
    25b0:	cf 91       	pop	r28
    25b2:	1f 91       	pop	r17
    25b4:	08 95       	ret

000025b6 <_ZN6SdFile4openEPS_PKch>:
    25b6:	bf 92       	push	r11
    25b8:	cf 92       	push	r12
    25ba:	df 92       	push	r13
    25bc:	ef 92       	push	r14
    25be:	ff 92       	push	r15
    25c0:	0f 93       	push	r16
    25c2:	1f 93       	push	r17
    25c4:	cf 93       	push	r28
    25c6:	df 93       	push	r29
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62
    25cc:	2b 97       	sbiw	r28, 0x0b	; 11
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	de bf       	out	0x3e, r29	; 62
    25d4:	0f be       	out	0x3f, r0	; 63
    25d6:	cd bf       	out	0x3d, r28	; 61
    25d8:	fc 01       	movw	r30, r24
    25da:	35 81       	ldd	r19, Z+5	; 0x05
    25dc:	31 11       	cpse	r19, r1
    25de:	bf c0       	rjmp	.+382    	; 0x275e <_ZN6SdFile4openEPS_PKch+0x1a8>
    25e0:	c2 2e       	mov	r12, r18
    25e2:	8b 01       	movw	r16, r22
    25e4:	7c 01       	movw	r14, r24
    25e6:	be 01       	movw	r22, r28
    25e8:	6f 5f       	subi	r22, 0xFF	; 255
    25ea:	7f 4f       	sbci	r23, 0xFF	; 255
    25ec:	ca 01       	movw	r24, r20
    25ee:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <_ZN6SdFile10make83NameEPKcPh>
    25f2:	88 23       	and	r24, r24
    25f4:	09 f4       	brne	.+2      	; 0x25f8 <_ZN6SdFile4openEPS_PKch+0x42>
    25f6:	b3 c0       	rjmp	.+358    	; 0x275e <_ZN6SdFile4openEPS_PKch+0x1a8>
    25f8:	f8 01       	movw	r30, r16
    25fa:	83 8d       	ldd	r24, Z+27	; 0x1b
    25fc:	94 8d       	ldd	r25, Z+28	; 0x1c
    25fe:	f7 01       	movw	r30, r14
    2600:	94 8f       	std	Z+28, r25	; 0x1c
    2602:	83 8f       	std	Z+27, r24	; 0x1b
    2604:	f8 01       	movw	r30, r16
    2606:	16 82       	std	Z+6, r1	; 0x06
    2608:	17 82       	std	Z+7, r1	; 0x07
    260a:	10 86       	std	Z+8, r1	; 0x08
    260c:	11 86       	std	Z+9, r1	; 0x09
    260e:	12 86       	std	Z+10, r1	; 0x0a
    2610:	13 86       	std	Z+11, r1	; 0x0b
    2612:	14 86       	std	Z+12, r1	; 0x0c
    2614:	15 86       	std	Z+13, r1	; 0x0d
    2616:	d1 2c       	mov	r13, r1
    2618:	f8 01       	movw	r30, r16
    261a:	82 85       	ldd	r24, Z+10	; 0x0a
    261c:	93 85       	ldd	r25, Z+11	; 0x0b
    261e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2620:	b5 85       	ldd	r27, Z+13	; 0x0d
    2622:	43 89       	ldd	r20, Z+19	; 0x13
    2624:	54 89       	ldd	r21, Z+20	; 0x14
    2626:	65 89       	ldd	r22, Z+21	; 0x15
    2628:	76 89       	ldd	r23, Z+22	; 0x16
    262a:	84 17       	cp	r24, r20
    262c:	95 07       	cpc	r25, r21
    262e:	a6 07       	cpc	r26, r22
    2630:	b7 07       	cpc	r27, r23
    2632:	08 f0       	brcs	.+2      	; 0x2636 <_ZN6SdFile4openEPS_PKch+0x80>
    2634:	3e c0       	rjmp	.+124    	; 0x26b2 <_ZN6SdFile4openEPS_PKch+0xfc>
    2636:	25 e0       	ldi	r18, 0x05	; 5
    2638:	b6 95       	lsr	r27
    263a:	a7 95       	ror	r26
    263c:	97 95       	ror	r25
    263e:	87 95       	ror	r24
    2640:	2a 95       	dec	r18
    2642:	d1 f7       	brne	.-12     	; 0x2638 <_ZN6SdFile4openEPS_PKch+0x82>
    2644:	f8 2f       	mov	r31, r24
    2646:	ff 70       	andi	r31, 0x0F	; 15
    2648:	bf 2e       	mov	r11, r31
    264a:	c8 01       	movw	r24, r16
    264c:	0e 94 8c 10 	call	0x2118	; 0x2118 <_ZN6SdFile12readDirCacheEv>
    2650:	00 97       	sbiw	r24, 0x00	; 0
    2652:	09 f4       	brne	.+2      	; 0x2656 <_ZN6SdFile4openEPS_PKch+0xa0>
    2654:	84 c0       	rjmp	.+264    	; 0x275e <_ZN6SdFile4openEPS_PKch+0x1a8>
    2656:	fc 01       	movw	r30, r24
    2658:	20 81       	ld	r18, Z
    265a:	22 23       	and	r18, r18
    265c:	a1 f0       	breq	.+40     	; 0x2686 <_ZN6SdFile4openEPS_PKch+0xd0>
    265e:	25 3e       	cpi	r18, 0xE5	; 229
    2660:	09 f4       	brne	.+2      	; 0x2664 <_ZN6SdFile4openEPS_PKch+0xae>
    2662:	7f c0       	rjmp	.+254    	; 0x2762 <_ZN6SdFile4openEPS_PKch+0x1ac>
    2664:	4b e0       	ldi	r20, 0x0B	; 11
    2666:	50 e0       	ldi	r21, 0x00	; 0
    2668:	bc 01       	movw	r22, r24
    266a:	ce 01       	movw	r24, r28
    266c:	01 96       	adiw	r24, 0x01	; 1
    266e:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <memcmp>
    2672:	89 2b       	or	r24, r25
    2674:	89 f6       	brne	.-94     	; 0x2618 <_ZN6SdFile4openEPS_PKch+0x62>
    2676:	8c 2d       	mov	r24, r12
    2678:	80 73       	andi	r24, 0x30	; 48
    267a:	80 33       	cpi	r24, 0x30	; 48
    267c:	09 f4       	brne	.+2      	; 0x2680 <_ZN6SdFile4openEPS_PKch+0xca>
    267e:	6f c0       	rjmp	.+222    	; 0x275e <_ZN6SdFile4openEPS_PKch+0x1a8>
    2680:	4c 2d       	mov	r20, r12
    2682:	6b 2d       	mov	r22, r11
    2684:	68 c0       	rjmp	.+208    	; 0x2756 <_ZN6SdFile4openEPS_PKch+0x1a0>
    2686:	d1 10       	cpse	r13, r1
    2688:	12 c0       	rjmp	.+36     	; 0x26ae <_ZN6SdFile4openEPS_PKch+0xf8>
    268a:	f7 01       	movw	r30, r14
    268c:	b2 8a       	std	Z+18, r11	; 0x12
    268e:	40 91 4c 01 	lds	r20, 0x014C	; 0x80014c <_ZN8SdVolume17cacheBlockNumber_E>
    2692:	50 91 4d 01 	lds	r21, 0x014D	; 0x80014d <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2696:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    269a:	70 91 4f 01 	lds	r23, 0x014F	; 0x80014f <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    269e:	46 87       	std	Z+14, r20	; 0x0e
    26a0:	57 87       	std	Z+15, r21	; 0x0f
    26a2:	60 8b       	std	Z+16, r22	; 0x10
    26a4:	71 8b       	std	Z+17, r23	; 0x11
    26a6:	fc 01       	movw	r30, r24
    26a8:	80 81       	ld	r24, Z
    26aa:	81 11       	cpse	r24, r1
    26ac:	5d c0       	rjmp	.+186    	; 0x2768 <_ZN6SdFile4openEPS_PKch+0x1b2>
    26ae:	dd 24       	eor	r13, r13
    26b0:	d3 94       	inc	r13
    26b2:	8c 2d       	mov	r24, r12
    26b4:	82 71       	andi	r24, 0x12	; 18
    26b6:	82 31       	cpi	r24, 0x12	; 18
    26b8:	09 f0       	breq	.+2      	; 0x26bc <_ZN6SdFile4openEPS_PKch+0x106>
    26ba:	51 c0       	rjmp	.+162    	; 0x275e <_ZN6SdFile4openEPS_PKch+0x1a8>
    26bc:	dd 20       	and	r13, r13
    26be:	41 f0       	breq	.+16     	; 0x26d0 <_ZN6SdFile4openEPS_PKch+0x11a>
    26c0:	61 e0       	ldi	r22, 0x01	; 1
    26c2:	c7 01       	movw	r24, r14
    26c4:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN6SdFile13cacheDirEntryEh>
    26c8:	8c 01       	movw	r16, r24
    26ca:	89 2b       	or	r24, r25
    26cc:	79 f4       	brne	.+30     	; 0x26ec <_ZN6SdFile4openEPS_PKch+0x136>
    26ce:	47 c0       	rjmp	.+142    	; 0x275e <_ZN6SdFile4openEPS_PKch+0x1a8>
    26d0:	f8 01       	movw	r30, r16
    26d2:	85 81       	ldd	r24, Z+5	; 0x05
    26d4:	82 30       	cpi	r24, 0x02	; 2
    26d6:	09 f4       	brne	.+2      	; 0x26da <_ZN6SdFile4openEPS_PKch+0x124>
    26d8:	42 c0       	rjmp	.+132    	; 0x275e <_ZN6SdFile4openEPS_PKch+0x1a8>
    26da:	c8 01       	movw	r24, r16
    26dc:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <_ZN6SdFile13addDirClusterEv>
    26e0:	88 23       	and	r24, r24
    26e2:	e9 f1       	breq	.+122    	; 0x275e <_ZN6SdFile4openEPS_PKch+0x1a8>
    26e4:	f7 01       	movw	r30, r14
    26e6:	12 8a       	std	Z+18, r1	; 0x12
    26e8:	00 ef       	ldi	r16, 0xF0	; 240
    26ea:	14 e0       	ldi	r17, 0x04	; 4
    26ec:	80 e2       	ldi	r24, 0x20	; 32
    26ee:	f8 01       	movw	r30, r16
    26f0:	11 92       	st	Z+, r1
    26f2:	8a 95       	dec	r24
    26f4:	e9 f7       	brne	.-6      	; 0x26f0 <_ZN6SdFile4openEPS_PKch+0x13a>
    26f6:	8b e0       	ldi	r24, 0x0B	; 11
    26f8:	fe 01       	movw	r30, r28
    26fa:	31 96       	adiw	r30, 0x01	; 1
    26fc:	d8 01       	movw	r26, r16
    26fe:	01 90       	ld	r0, Z+
    2700:	0d 92       	st	X+, r0
    2702:	8a 95       	dec	r24
    2704:	e1 f7       	brne	.-8      	; 0x26fe <_ZN6SdFile4openEPS_PKch+0x148>
    2706:	e0 91 e7 04 	lds	r30, 0x04E7	; 0x8004e7 <_ZN6SdFile9dateTime_E>
    270a:	f0 91 e8 04 	lds	r31, 0x04E8	; 0x8004e8 <_ZN6SdFile9dateTime_E+0x1>
    270e:	30 97       	sbiw	r30, 0x00	; 0
    2710:	39 f0       	breq	.+14     	; 0x2720 <_ZN6SdFile4openEPS_PKch+0x16a>
    2712:	b8 01       	movw	r22, r16
    2714:	62 5f       	subi	r22, 0xF2	; 242
    2716:	7f 4f       	sbci	r23, 0xFF	; 255
    2718:	c8 01       	movw	r24, r16
    271a:	40 96       	adiw	r24, 0x10	; 16
    271c:	09 95       	icall
    271e:	09 c0       	rjmp	.+18     	; 0x2732 <_ZN6SdFile4openEPS_PKch+0x17c>
    2720:	81 e2       	ldi	r24, 0x21	; 33
    2722:	98 e2       	ldi	r25, 0x28	; 40
    2724:	f8 01       	movw	r30, r16
    2726:	91 8b       	std	Z+17, r25	; 0x11
    2728:	80 8b       	std	Z+16, r24	; 0x10
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	98 e0       	ldi	r25, 0x08	; 8
    272e:	97 87       	std	Z+15, r25	; 0x0f
    2730:	86 87       	std	Z+14, r24	; 0x0e
    2732:	f8 01       	movw	r30, r16
    2734:	80 89       	ldd	r24, Z+16	; 0x10
    2736:	91 89       	ldd	r25, Z+17	; 0x11
    2738:	93 8b       	std	Z+19, r25	; 0x13
    273a:	82 8b       	std	Z+18, r24	; 0x12
    273c:	91 8f       	std	Z+25, r25	; 0x19
    273e:	80 8f       	std	Z+24, r24	; 0x18
    2740:	86 85       	ldd	r24, Z+14	; 0x0e
    2742:	97 85       	ldd	r25, Z+15	; 0x0f
    2744:	97 8b       	std	Z+23, r25	; 0x17
    2746:	86 8b       	std	Z+22, r24	; 0x16
    2748:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_ZN8SdVolume10cacheFlushEv>
    274c:	88 23       	and	r24, r24
    274e:	39 f0       	breq	.+14     	; 0x275e <_ZN6SdFile4openEPS_PKch+0x1a8>
    2750:	4c 2d       	mov	r20, r12
    2752:	f7 01       	movw	r30, r14
    2754:	62 89       	ldd	r22, Z+18	; 0x12
    2756:	c7 01       	movw	r24, r14
    2758:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN6SdFile15openCachedEntryEhh>
    275c:	08 c0       	rjmp	.+16     	; 0x276e <_ZN6SdFile4openEPS_PKch+0x1b8>
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	06 c0       	rjmp	.+12     	; 0x276e <_ZN6SdFile4openEPS_PKch+0x1b8>
    2762:	dd 20       	and	r13, r13
    2764:	09 f4       	brne	.+2      	; 0x2768 <_ZN6SdFile4openEPS_PKch+0x1b2>
    2766:	91 cf       	rjmp	.-222    	; 0x268a <_ZN6SdFile4openEPS_PKch+0xd4>
    2768:	dd 24       	eor	r13, r13
    276a:	d3 94       	inc	r13
    276c:	55 cf       	rjmp	.-342    	; 0x2618 <_ZN6SdFile4openEPS_PKch+0x62>
    276e:	2b 96       	adiw	r28, 0x0b	; 11
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	f8 94       	cli
    2774:	de bf       	out	0x3e, r29	; 62
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	cd bf       	out	0x3d, r28	; 61
    277a:	df 91       	pop	r29
    277c:	cf 91       	pop	r28
    277e:	1f 91       	pop	r17
    2780:	0f 91       	pop	r16
    2782:	ff 90       	pop	r15
    2784:	ef 90       	pop	r14
    2786:	df 90       	pop	r13
    2788:	cf 90       	pop	r12
    278a:	bf 90       	pop	r11
    278c:	08 95       	ret

0000278e <_ZN6SdFile6removeEv>:
    278e:	cf 93       	push	r28
    2790:	df 93       	push	r29
    2792:	ec 01       	movw	r28, r24
    2794:	40 e0       	ldi	r20, 0x00	; 0
    2796:	50 e0       	ldi	r21, 0x00	; 0
    2798:	ba 01       	movw	r22, r20
    279a:	0e 94 bf 11 	call	0x237e	; 0x237e <_ZN6SdFile8truncateEm>
    279e:	88 23       	and	r24, r24
    27a0:	71 f0       	breq	.+28     	; 0x27be <_ZN6SdFile6removeEv+0x30>
    27a2:	61 e0       	ldi	r22, 0x01	; 1
    27a4:	ce 01       	movw	r24, r28
    27a6:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN6SdFile13cacheDirEntryEh>
    27aa:	00 97       	sbiw	r24, 0x00	; 0
    27ac:	41 f0       	breq	.+16     	; 0x27be <_ZN6SdFile6removeEv+0x30>
    27ae:	25 ee       	ldi	r18, 0xE5	; 229
    27b0:	fc 01       	movw	r30, r24
    27b2:	20 83       	st	Z, r18
    27b4:	1d 82       	std	Y+5, r1	; 0x05
    27b6:	df 91       	pop	r29
    27b8:	cf 91       	pop	r28
    27ba:	0c 94 bc 15 	jmp	0x2b78	; 0x2b78 <_ZN8SdVolume10cacheFlushEv>
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	df 91       	pop	r29
    27c2:	cf 91       	pop	r28
    27c4:	08 95       	ret

000027c6 <_ZN6SdFile6removeEPS_PKc>:
    27c6:	cf 93       	push	r28
    27c8:	df 93       	push	r29
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	6d 97       	sbiw	r28, 0x1d	; 29
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
    27da:	ab 01       	movw	r20, r22
    27dc:	1c 82       	std	Y+4, r1	; 0x04
    27de:	1b 82       	std	Y+3, r1	; 0x03
    27e0:	23 ec       	ldi	r18, 0xC3	; 195
    27e2:	31 e0       	ldi	r19, 0x01	; 1
    27e4:	3a 83       	std	Y+2, r19	; 0x02
    27e6:	29 83       	std	Y+1, r18	; 0x01
    27e8:	1e 82       	std	Y+6, r1	; 0x06
    27ea:	22 e0       	ldi	r18, 0x02	; 2
    27ec:	bc 01       	movw	r22, r24
    27ee:	ce 01       	movw	r24, r28
    27f0:	01 96       	adiw	r24, 0x01	; 1
    27f2:	0e 94 db 12 	call	0x25b6	; 0x25b6 <_ZN6SdFile4openEPS_PKch>
    27f6:	88 23       	and	r24, r24
    27f8:	21 f0       	breq	.+8      	; 0x2802 <_ZN6SdFile6removeEPS_PKc+0x3c>
    27fa:	ce 01       	movw	r24, r28
    27fc:	01 96       	adiw	r24, 0x01	; 1
    27fe:	0e 94 c7 13 	call	0x278e	; 0x278e <_ZN6SdFile6removeEv>
    2802:	6d 96       	adiw	r28, 0x1d	; 29
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	f8 94       	cli
    2808:	de bf       	out	0x3e, r29	; 62
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	cd bf       	out	0x3d, r28	; 61
    280e:	df 91       	pop	r29
    2810:	cf 91       	pop	r28
    2812:	08 95       	ret

00002814 <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    2814:	2f 92       	push	r2
    2816:	3f 92       	push	r3
    2818:	4f 92       	push	r4
    281a:	5f 92       	push	r5
    281c:	6f 92       	push	r6
    281e:	7f 92       	push	r7
    2820:	8f 92       	push	r8
    2822:	9f 92       	push	r9
    2824:	af 92       	push	r10
    2826:	bf 92       	push	r11
    2828:	cf 92       	push	r12
    282a:	df 92       	push	r13
    282c:	ef 92       	push	r14
    282e:	ff 92       	push	r15
    2830:	0f 93       	push	r16
    2832:	1f 93       	push	r17
    2834:	cf 93       	push	r28
    2836:	df 93       	push	r29
    2838:	00 d0       	rcall	.+0      	; 0x283a <_ZN6SdFile5writeEPKvj+0x26>
    283a:	00 d0       	rcall	.+0      	; 0x283c <_ZN6SdFile5writeEPKvj+0x28>
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
    2840:	8c 01       	movw	r16, r24
    2842:	6b 01       	movw	r12, r22
    2844:	1a 01       	movw	r2, r20

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    2846:	dc 01       	movw	r26, r24
    2848:	15 96       	adiw	r26, 0x05	; 5
    284a:	8c 91       	ld	r24, X
    284c:	15 97       	sbiw	r26, 0x05	; 5
    284e:	81 30       	cpi	r24, 0x01	; 1
    2850:	c9 f4       	brne	.+50     	; 0x2884 <_ZN6SdFile5writeEPKvj+0x70>
    2852:	14 96       	adiw	r26, 0x04	; 4
    2854:	8c 91       	ld	r24, X
    2856:	81 ff       	sbrs	r24, 1
    2858:	15 c0       	rjmp	.+42     	; 0x2884 <_ZN6SdFile5writeEPKvj+0x70>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    285a:	82 ff       	sbrs	r24, 2
    285c:	1d c0       	rjmp	.+58     	; 0x2898 <_ZN6SdFile5writeEPKvj+0x84>
    285e:	f8 01       	movw	r30, r16
    2860:	43 89       	ldd	r20, Z+19	; 0x13
    2862:	54 89       	ldd	r21, Z+20	; 0x14
    2864:	65 89       	ldd	r22, Z+21	; 0x15
    2866:	76 89       	ldd	r23, Z+22	; 0x16
    2868:	82 85       	ldd	r24, Z+10	; 0x0a
    286a:	93 85       	ldd	r25, Z+11	; 0x0b
    286c:	a4 85       	ldd	r26, Z+12	; 0x0c
    286e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2870:	84 17       	cp	r24, r20
    2872:	95 07       	cpc	r25, r21
    2874:	a6 07       	cpc	r26, r22
    2876:	b7 07       	cpc	r27, r23
    2878:	79 f0       	breq	.+30     	; 0x2898 <_ZN6SdFile5writeEPKvj+0x84>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    287a:	c8 01       	movw	r24, r16
    287c:	0e 94 d5 10 	call	0x21aa	; 0x21aa <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
    2880:	81 11       	cpse	r24, r1
    2882:	0a c0       	rjmp	.+20     	; 0x2898 <_ZN6SdFile5writeEPKvj+0x84>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	d8 01       	movw	r26, r16
    288a:	13 96       	adiw	r26, 0x03	; 3
    288c:	9c 93       	st	X, r25
    288e:	8e 93       	st	-X, r24
    2890:	12 97       	sbiw	r26, 0x02	; 2

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	48 c1       	rjmp	.+656    	; 0x2b28 <_ZN6SdFile5writeEPKvj+0x314>
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    2898:	41 01       	movw	r8, r2
    289a:	83 c0       	rjmp	.+262    	; 0x29a2 <_ZN6SdFile5writeEPKvj+0x18e>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    289c:	5b 96       	adiw	r26, 0x1b	; 27
    289e:	8d 91       	ld	r24, X+
    28a0:	9c 91       	ld	r25, X
    28a2:	5c 97       	sbiw	r26, 0x1c	; 28
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    28a4:	fc 01       	movw	r30, r24
    28a6:	74 80       	ldd	r7, Z+4	; 0x04
    28a8:	2f ef       	ldi	r18, 0xFF	; 255
    28aa:	27 0d       	add	r18, r7
    28ac:	2a 01       	movw	r4, r20
    28ae:	3b 01       	movw	r6, r22
    28b0:	39 e0       	ldi	r19, 0x09	; 9
    28b2:	76 94       	lsr	r7
    28b4:	67 94       	ror	r6
    28b6:	57 94       	ror	r5
    28b8:	47 94       	ror	r4
    28ba:	3a 95       	dec	r19
    28bc:	d1 f7       	brne	.-12     	; 0x28b2 <_ZN6SdFile5writeEPKvj+0x9e>
    28be:	72 2e       	mov	r7, r18
    28c0:	74 20       	and	r7, r4
    uint16_t blockOffset = curPosition_ & 0X1FF;
    28c2:	7a 01       	movw	r14, r20
    28c4:	f1 e0       	ldi	r31, 0x01	; 1
    28c6:	ff 22       	and	r15, r31
    if (blockOfCluster == 0 && blockOffset == 0) {
    28c8:	77 20       	and	r7, r7
    28ca:	09 f4       	brne	.+2      	; 0x28ce <_ZN6SdFile5writeEPKvj+0xba>
    28cc:	76 c0       	rjmp	.+236    	; 0x29ba <_ZN6SdFile5writeEPKvj+0x1a6>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	92 e0       	ldi	r25, 0x02	; 2
    28d2:	8e 19       	sub	r24, r14
    28d4:	9f 09       	sbc	r25, r15
    28d6:	54 01       	movw	r10, r8
    28d8:	88 15       	cp	r24, r8
    28da:	99 05       	cpc	r25, r9
    28dc:	08 f4       	brcc	.+2      	; 0x28e0 <_ZN6SdFile5writeEPKvj+0xcc>
    28de:	5c 01       	movw	r10, r24

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    28e0:	d8 01       	movw	r26, r16
    28e2:	5b 96       	adiw	r26, 0x1b	; 27
    28e4:	2d 91       	ld	r18, X+
    28e6:	3c 91       	ld	r19, X
    28e8:	5c 97       	sbiw	r26, 0x1c	; 28
    28ea:	16 96       	adiw	r26, 0x06	; 6
    28ec:	8d 91       	ld	r24, X+
    28ee:	9d 91       	ld	r25, X+
    28f0:	0d 90       	ld	r0, X+
    28f2:	bc 91       	ld	r27, X
    28f4:	a0 2d       	mov	r26, r0
    28f6:	02 97       	sbiw	r24, 0x02	; 2
    28f8:	a1 09       	sbc	r26, r1
    28fa:	b1 09       	sbc	r27, r1
    28fc:	f9 01       	movw	r30, r18
    28fe:	05 84       	ldd	r0, Z+13	; 0x0d
    2900:	04 c0       	rjmp	.+8      	; 0x290a <_ZN6SdFile5writeEPKvj+0xf6>
    2902:	88 0f       	add	r24, r24
    2904:	99 1f       	adc	r25, r25
    2906:	aa 1f       	adc	r26, r26
    2908:	bb 1f       	adc	r27, r27
    290a:	0a 94       	dec	r0
    290c:	d2 f7       	brpl	.-12     	; 0x2902 <_ZN6SdFile5writeEPKvj+0xee>
    290e:	46 85       	ldd	r20, Z+14	; 0x0e
    2910:	57 85       	ldd	r21, Z+15	; 0x0f
    2912:	60 89       	ldd	r22, Z+16	; 0x10
    2914:	71 89       	ldd	r23, Z+17	; 0x11
    2916:	84 0f       	add	r24, r20
    2918:	95 1f       	adc	r25, r21
    291a:	a6 1f       	adc	r26, r22
    291c:	b7 1f       	adc	r27, r23
    291e:	9c 01       	movw	r18, r24
    2920:	ad 01       	movw	r20, r26
    2922:	27 0d       	add	r18, r7
    2924:	31 1d       	adc	r19, r1
    2926:	41 1d       	adc	r20, r1
    2928:	51 1d       	adc	r21, r1
    292a:	29 01       	movw	r4, r18
    292c:	3a 01       	movw	r6, r20
    if (n == 512) {
    292e:	a1 14       	cp	r10, r1
    2930:	32 e0       	ldi	r19, 0x02	; 2
    2932:	b3 06       	cpc	r11, r19
    2934:	09 f0       	breq	.+2      	; 0x2938 <_ZN6SdFile5writeEPKvj+0x124>
    2936:	88 c0       	rjmp	.+272    	; 0x2a48 <_ZN6SdFile5writeEPKvj+0x234>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    2938:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <_ZN8SdVolume17cacheBlockNumber_E>
    293c:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2940:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2944:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2948:	48 16       	cp	r4, r24
    294a:	59 06       	cpc	r5, r25
    294c:	6a 06       	cpc	r6, r26
    294e:	7b 06       	cpc	r7, r27
    2950:	59 f4       	brne	.+22     	; 0x2968 <_ZN6SdFile5writeEPKvj+0x154>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    2952:	8f ef       	ldi	r24, 0xFF	; 255
    2954:	9f ef       	ldi	r25, 0xFF	; 255
    2956:	dc 01       	movw	r26, r24
    2958:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <_ZN8SdVolume17cacheBlockNumber_E>
    295c:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2960:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2964:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    2968:	96 01       	movw	r18, r12
    296a:	b3 01       	movw	r22, r6
    296c:	a2 01       	movw	r20, r4
    296e:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <_ZN8SdVolume7sdCard_E>
    2972:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <_ZN8SdVolume7sdCard_E+0x1>
    2976:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    297a:	88 23       	and	r24, r24
    297c:	09 f4       	brne	.+2      	; 0x2980 <_ZN6SdFile5writeEPKvj+0x16c>
    297e:	82 cf       	rjmp	.-252    	; 0x2884 <_ZN6SdFile5writeEPKvj+0x70>
      src += 512;
    2980:	9e ef       	ldi	r25, 0xFE	; 254
    2982:	d9 1a       	sub	r13, r25
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    2984:	8a 18       	sub	r8, r10
    2986:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    2988:	f8 01       	movw	r30, r16
    298a:	82 85       	ldd	r24, Z+10	; 0x0a
    298c:	93 85       	ldd	r25, Z+11	; 0x0b
    298e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2990:	b5 85       	ldd	r27, Z+13	; 0x0d
    2992:	8a 0d       	add	r24, r10
    2994:	9b 1d       	adc	r25, r11
    2996:	a1 1d       	adc	r26, r1
    2998:	b1 1d       	adc	r27, r1
    299a:	82 87       	std	Z+10, r24	; 0x0a
    299c:	93 87       	std	Z+11, r25	; 0x0b
    299e:	a4 87       	std	Z+12, r26	; 0x0c
    29a0:	b5 87       	std	Z+13, r27	; 0x0d
    29a2:	d8 01       	movw	r26, r16
    29a4:	1a 96       	adiw	r26, 0x0a	; 10
    29a6:	4d 91       	ld	r20, X+
    29a8:	5d 91       	ld	r21, X+
    29aa:	6d 91       	ld	r22, X+
    29ac:	7c 91       	ld	r23, X
    29ae:	1d 97       	sbiw	r26, 0x0d	; 13
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    29b0:	81 14       	cp	r8, r1
    29b2:	91 04       	cpc	r9, r1
    29b4:	09 f0       	breq	.+2      	; 0x29b8 <_ZN6SdFile5writeEPKvj+0x1a4>
    29b6:	72 cf       	rjmp	.-284    	; 0x289c <_ZN6SdFile5writeEPKvj+0x88>
    29b8:	87 c0       	rjmp	.+270    	; 0x2ac8 <_ZN6SdFile5writeEPKvj+0x2b4>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    29ba:	e1 14       	cp	r14, r1
    29bc:	f1 04       	cpc	r15, r1
    29be:	09 f0       	breq	.+2      	; 0x29c2 <_ZN6SdFile5writeEPKvj+0x1ae>
    29c0:	86 cf       	rjmp	.-244    	; 0x28ce <_ZN6SdFile5writeEPKvj+0xba>
      // start of new cluster
      if (curCluster_ == 0) {
    29c2:	16 96       	adiw	r26, 0x06	; 6
    29c4:	4d 91       	ld	r20, X+
    29c6:	5d 91       	ld	r21, X+
    29c8:	6d 91       	ld	r22, X+
    29ca:	7c 91       	ld	r23, X
    29cc:	19 97       	sbiw	r26, 0x09	; 9
    29ce:	41 15       	cp	r20, r1
    29d0:	51 05       	cpc	r21, r1
    29d2:	61 05       	cpc	r22, r1
    29d4:	71 05       	cpc	r23, r1
    29d6:	59 f4       	brne	.+22     	; 0x29ee <_ZN6SdFile5writeEPKvj+0x1da>
        if (firstCluster_ == 0) {
    29d8:	57 96       	adiw	r26, 0x17	; 23
    29da:	8d 91       	ld	r24, X+
    29dc:	9d 91       	ld	r25, X+
    29de:	0d 90       	ld	r0, X+
    29e0:	bc 91       	ld	r27, X
    29e2:	a0 2d       	mov	r26, r0
    29e4:	00 97       	sbiw	r24, 0x00	; 0
    29e6:	a1 05       	cpc	r26, r1
    29e8:	b1 05       	cpc	r27, r1
    29ea:	41 f5       	brne	.+80     	; 0x2a3c <_ZN6SdFile5writeEPKvj+0x228>
    29ec:	21 c0       	rjmp	.+66     	; 0x2a30 <_ZN6SdFile5writeEPKvj+0x21c>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    29ee:	9e 01       	movw	r18, r28
    29f0:	2f 5f       	subi	r18, 0xFF	; 255
    29f2:	3f 4f       	sbci	r19, 0xFF	; 255
    29f4:	0e 94 56 16 	call	0x2cac	; 0x2cac <_ZNK8SdVolume6fatGetEmPm>
    29f8:	88 23       	and	r24, r24
    29fa:	09 f4       	brne	.+2      	; 0x29fe <_ZN6SdFile5writeEPKvj+0x1ea>
    29fc:	4b cf       	rjmp	.-362    	; 0x2894 <_ZN6SdFile5writeEPKvj+0x80>
        if (vol_->isEOC(next)) {
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	9a 81       	ldd	r25, Y+2	; 0x02
    2a02:	ab 81       	ldd	r26, Y+3	; 0x03
    2a04:	bc 81       	ldd	r27, Y+4	; 0x04
    2a06:	f8 01       	movw	r30, r16
    2a08:	23 8d       	ldd	r18, Z+27	; 0x1b
    2a0a:	34 8d       	ldd	r19, Z+28	; 0x1c
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2a0c:	f9 01       	movw	r30, r18
    2a0e:	27 89       	ldd	r18, Z+23	; 0x17
    2a10:	20 31       	cpi	r18, 0x10	; 16
    2a12:	29 f0       	breq	.+10     	; 0x2a1e <_ZN6SdFile5writeEPKvj+0x20a>
    2a14:	48 ef       	ldi	r20, 0xF8	; 248
    2a16:	5f ef       	ldi	r21, 0xFF	; 255
    2a18:	6f ef       	ldi	r22, 0xFF	; 255
    2a1a:	7f e0       	ldi	r23, 0x0F	; 15
    2a1c:	04 c0       	rjmp	.+8      	; 0x2a26 <_ZN6SdFile5writeEPKvj+0x212>
    2a1e:	48 ef       	ldi	r20, 0xF8	; 248
    2a20:	5f ef       	ldi	r21, 0xFF	; 255
    2a22:	60 e0       	ldi	r22, 0x00	; 0
    2a24:	70 e0       	ldi	r23, 0x00	; 0
    2a26:	84 17       	cp	r24, r20
    2a28:	95 07       	cpc	r25, r21
    2a2a:	a6 07       	cpc	r26, r22
    2a2c:	b7 07       	cpc	r27, r23
    2a2e:	30 f0       	brcs	.+12     	; 0x2a3c <_ZN6SdFile5writeEPKvj+0x228>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    2a30:	c8 01       	movw	r24, r16
    2a32:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <_ZN6SdFile10addClusterEv>
    2a36:	81 11       	cpse	r24, r1
    2a38:	4a cf       	rjmp	.-364    	; 0x28ce <_ZN6SdFile5writeEPKvj+0xba>
    2a3a:	24 cf       	rjmp	.-440    	; 0x2884 <_ZN6SdFile5writeEPKvj+0x70>
        } else {
          curCluster_ = next;
    2a3c:	f8 01       	movw	r30, r16
    2a3e:	86 83       	std	Z+6, r24	; 0x06
    2a40:	97 83       	std	Z+7, r25	; 0x07
    2a42:	a0 87       	std	Z+8, r26	; 0x08
    2a44:	b1 87       	std	Z+9, r27	; 0x09
    2a46:	43 cf       	rjmp	.-378    	; 0x28ce <_ZN6SdFile5writeEPKvj+0xba>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    2a48:	e1 14       	cp	r14, r1
    2a4a:	f1 04       	cpc	r15, r1
    2a4c:	29 f5       	brne	.+74     	; 0x2a98 <_ZN6SdFile5writeEPKvj+0x284>
    2a4e:	d8 01       	movw	r26, r16
    2a50:	1a 96       	adiw	r26, 0x0a	; 10
    2a52:	4d 91       	ld	r20, X+
    2a54:	5d 91       	ld	r21, X+
    2a56:	6d 91       	ld	r22, X+
    2a58:	7c 91       	ld	r23, X
    2a5a:	1d 97       	sbiw	r26, 0x0d	; 13
    2a5c:	53 96       	adiw	r26, 0x13	; 19
    2a5e:	8d 91       	ld	r24, X+
    2a60:	9d 91       	ld	r25, X+
    2a62:	0d 90       	ld	r0, X+
    2a64:	bc 91       	ld	r27, X
    2a66:	a0 2d       	mov	r26, r0
    2a68:	48 17       	cp	r20, r24
    2a6a:	59 07       	cpc	r21, r25
    2a6c:	6a 07       	cpc	r22, r26
    2a6e:	7b 07       	cpc	r23, r27
    2a70:	98 f0       	brcs	.+38     	; 0x2a98 <_ZN6SdFile5writeEPKvj+0x284>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    2a72:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_ZN8SdVolume10cacheFlushEv>
    2a76:	88 23       	and	r24, r24
    2a78:	09 f4       	brne	.+2      	; 0x2a7c <_ZN6SdFile5writeEPKvj+0x268>
    2a7a:	04 cf       	rjmp	.-504    	; 0x2884 <_ZN6SdFile5writeEPKvj+0x70>
        SdVolume::cacheBlockNumber_ = block;
    2a7c:	40 92 4c 01 	sts	0x014C, r4	; 0x80014c <_ZN8SdVolume17cacheBlockNumber_E>
    2a80:	50 92 4d 01 	sts	0x014D, r5	; 0x80014d <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2a84:	60 92 4e 01 	sts	0x014E, r6	; 0x80014e <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2a88:	70 92 4f 01 	sts	0x014F, r7	; 0x80014f <_ZN8SdVolume17cacheBlockNumber_E+0x3>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2a8c:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <_ZN8SdVolume11cacheDirty_E>
    2a90:	81 60       	ori	r24, 0x01	; 1
    2a92:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <_ZN8SdVolume11cacheDirty_E>
    2a96:	08 c0       	rjmp	.+16     	; 0x2aa8 <_ZN6SdFile5writeEPKvj+0x294>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    2a98:	41 e0       	ldi	r20, 0x01	; 1
    2a9a:	c3 01       	movw	r24, r6
    2a9c:	b2 01       	movw	r22, r4
    2a9e:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_ZN8SdVolume13cacheRawBlockEmh>
    2aa2:	88 23       	and	r24, r24
    2aa4:	09 f4       	brne	.+2      	; 0x2aa8 <_ZN6SdFile5writeEPKvj+0x294>
    2aa6:	ee ce       	rjmp	.-548    	; 0x2884 <_ZN6SdFile5writeEPKvj+0x70>
    2aa8:	d6 01       	movw	r26, r12
    2aaa:	f7 01       	movw	r30, r14
    2aac:	e0 51       	subi	r30, 0x10	; 16
    2aae:	fb 4f       	sbci	r31, 0xFB	; 251
    2ab0:	9f 01       	movw	r18, r30
    2ab2:	2a 0d       	add	r18, r10
    2ab4:	3b 1d       	adc	r19, r11
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    2ab6:	2e 17       	cp	r18, r30
    2ab8:	3f 07       	cpc	r19, r31
    2aba:	19 f0       	breq	.+6      	; 0x2ac2 <_ZN6SdFile5writeEPKvj+0x2ae>
    2abc:	8d 91       	ld	r24, X+
    2abe:	81 93       	st	Z+, r24
    2ac0:	fa cf       	rjmp	.-12     	; 0x2ab6 <_ZN6SdFile5writeEPKvj+0x2a2>
    2ac2:	ca 0c       	add	r12, r10
    2ac4:	db 1c       	adc	r13, r11
    2ac6:	5e cf       	rjmp	.-324    	; 0x2984 <_ZN6SdFile5writeEPKvj+0x170>
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    2ac8:	d8 01       	movw	r26, r16
    2aca:	53 96       	adiw	r26, 0x13	; 19
    2acc:	cd 90       	ld	r12, X+
    2ace:	dd 90       	ld	r13, X+
    2ad0:	ed 90       	ld	r14, X+
    2ad2:	fc 90       	ld	r15, X
    2ad4:	56 97       	sbiw	r26, 0x16	; 22
    2ad6:	14 96       	adiw	r26, 0x04	; 4
    2ad8:	8c 91       	ld	r24, X
    2ada:	c4 16       	cp	r12, r20
    2adc:	d5 06       	cpc	r13, r21
    2ade:	e6 06       	cpc	r14, r22
    2ae0:	f7 06       	cpc	r15, r23
    2ae2:	40 f4       	brcc	.+16     	; 0x2af4 <_ZN6SdFile5writeEPKvj+0x2e0>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    2ae4:	f8 01       	movw	r30, r16
    2ae6:	43 8b       	std	Z+19, r20	; 0x13
    2ae8:	54 8b       	std	Z+20, r21	; 0x14
    2aea:	65 8b       	std	Z+21, r22	; 0x15
    2aec:	76 8b       	std	Z+22, r23	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    2aee:	80 68       	ori	r24, 0x80	; 128
    2af0:	84 83       	std	Z+4, r24	; 0x04
    2af2:	0d c0       	rjmp	.+26     	; 0x2b0e <_ZN6SdFile5writeEPKvj+0x2fa>
  } else if (dateTime_ && nbyte) {
    2af4:	20 91 e7 04 	lds	r18, 0x04E7	; 0x8004e7 <_ZN6SdFile9dateTime_E>
    2af8:	30 91 e8 04 	lds	r19, 0x04E8	; 0x8004e8 <_ZN6SdFile9dateTime_E+0x1>
    2afc:	23 2b       	or	r18, r19
    2afe:	39 f0       	breq	.+14     	; 0x2b0e <_ZN6SdFile5writeEPKvj+0x2fa>
    2b00:	21 14       	cp	r2, r1
    2b02:	31 04       	cpc	r3, r1
    2b04:	21 f0       	breq	.+8      	; 0x2b0e <_ZN6SdFile5writeEPKvj+0x2fa>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    2b06:	80 68       	ori	r24, 0x80	; 128
    2b08:	d8 01       	movw	r26, r16
    2b0a:	14 96       	adiw	r26, 0x04	; 4
    2b0c:	8c 93       	st	X, r24
  }

  if (flags_ & O_SYNC) {
    2b0e:	f8 01       	movw	r30, r16
    2b10:	84 81       	ldd	r24, Z+4	; 0x04
    2b12:	83 fd       	sbrc	r24, 3
    2b14:	02 c0       	rjmp	.+4      	; 0x2b1a <_ZN6SdFile5writeEPKvj+0x306>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2b16:	c1 01       	movw	r24, r2
    2b18:	07 c0       	rjmp	.+14     	; 0x2b28 <_ZN6SdFile5writeEPKvj+0x314>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    2b1a:	c8 01       	movw	r24, r16
    2b1c:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <_ZN6SdFile4syncEv>
    2b20:	88 23       	and	r24, r24
    2b22:	09 f4       	brne	.+2      	; 0x2b26 <_ZN6SdFile5writeEPKvj+0x312>
    2b24:	af ce       	rjmp	.-674    	; 0x2884 <_ZN6SdFile5writeEPKvj+0x70>
    2b26:	f7 cf       	rjmp	.-18     	; 0x2b16 <_ZN6SdFile5writeEPKvj+0x302>
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	0f 90       	pop	r0
    2b2e:	0f 90       	pop	r0
    2b30:	df 91       	pop	r29
    2b32:	cf 91       	pop	r28
    2b34:	1f 91       	pop	r17
    2b36:	0f 91       	pop	r16
    2b38:	ff 90       	pop	r15
    2b3a:	ef 90       	pop	r14
    2b3c:	df 90       	pop	r13
    2b3e:	cf 90       	pop	r12
    2b40:	bf 90       	pop	r11
    2b42:	af 90       	pop	r10
    2b44:	9f 90       	pop	r9
    2b46:	8f 90       	pop	r8
    2b48:	7f 90       	pop	r7
    2b4a:	6f 90       	pop	r6
    2b4c:	5f 90       	pop	r5
    2b4e:	4f 90       	pop	r4
    2b50:	3f 90       	pop	r3
    2b52:	2f 90       	pop	r2
    2b54:	08 95       	ret

00002b56 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    2b56:	cf 93       	push	r28
    2b58:	df 93       	push	r29
    2b5a:	1f 92       	push	r1
    2b5c:	cd b7       	in	r28, 0x3d	; 61
    2b5e:	de b7       	in	r29, 0x3e	; 62
    2b60:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    2b62:	41 e0       	ldi	r20, 0x01	; 1
    2b64:	50 e0       	ldi	r21, 0x00	; 0
    2b66:	be 01       	movw	r22, r28
    2b68:	6f 5f       	subi	r22, 0xFF	; 255
    2b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b6c:	0e 94 0a 14 	call	0x2814	; 0x2814 <_ZN6SdFile5writeEPKvj>
}
    2b70:	0f 90       	pop	r0
    2b72:	df 91       	pop	r29
    2b74:	cf 91       	pop	r28
    2b76:	08 95       	ret

00002b78 <_ZN8SdVolume10cacheFlushEv>:

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    2b78:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <_ZN8SdVolume11cacheDirty_E>
    2b7c:	88 23       	and	r24, r24
    2b7e:	a9 f1       	breq	.+106    	; 0x2bea <_ZN8SdVolume10cacheFlushEv+0x72>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    2b80:	40 91 4c 01 	lds	r20, 0x014C	; 0x80014c <_ZN8SdVolume17cacheBlockNumber_E>
    2b84:	50 91 4d 01 	lds	r21, 0x014D	; 0x80014d <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2b88:	60 91 4e 01 	lds	r22, 0x014E	; 0x80014e <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2b8c:	70 91 4f 01 	lds	r23, 0x014F	; 0x80014f <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2b90:	20 ef       	ldi	r18, 0xF0	; 240
    2b92:	34 e0       	ldi	r19, 0x04	; 4
    2b94:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <_ZN8SdVolume7sdCard_E>
    2b98:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <_ZN8SdVolume7sdCard_E+0x1>
    2b9c:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <_ZN7Sd2Card10writeBlockEmPKh>
    2ba0:	81 11       	cpse	r24, r1
    2ba2:	02 c0       	rjmp	.+4      	; 0x2ba8 <_ZN8SdVolume10cacheFlushEv+0x30>
      return false;
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	08 95       	ret
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    2ba8:	40 91 e9 04 	lds	r20, 0x04E9	; 0x8004e9 <_ZN8SdVolume17cacheMirrorBlock_E>
    2bac:	50 91 ea 04 	lds	r21, 0x04EA	; 0x8004ea <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2bb0:	60 91 eb 04 	lds	r22, 0x04EB	; 0x8004eb <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2bb4:	70 91 ec 04 	lds	r23, 0x04EC	; 0x8004ec <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    2bb8:	41 15       	cp	r20, r1
    2bba:	51 05       	cpc	r21, r1
    2bbc:	61 05       	cpc	r22, r1
    2bbe:	71 05       	cpc	r23, r1
    2bc0:	91 f0       	breq	.+36     	; 0x2be6 <_ZN8SdVolume10cacheFlushEv+0x6e>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    2bc2:	20 ef       	ldi	r18, 0xF0	; 240
    2bc4:	34 e0       	ldi	r19, 0x04	; 4
    2bc6:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <_ZN8SdVolume7sdCard_E>
    2bca:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <_ZN8SdVolume7sdCard_E+0x1>
    2bce:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <_ZN7Sd2Card10writeBlockEmPKh>
    2bd2:	88 23       	and	r24, r24
    2bd4:	39 f3       	breq	.-50     	; 0x2ba4 <_ZN8SdVolume10cacheFlushEv+0x2c>
        return false;
      }
      cacheMirrorBlock_ = 0;
    2bd6:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <_ZN8SdVolume17cacheMirrorBlock_E>
    2bda:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2bde:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2be2:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    }
    cacheDirty_ = 0;
    2be6:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <_ZN8SdVolume11cacheDirty_E>
  }
  return true;
    2bea:	81 e0       	ldi	r24, 0x01	; 1
}
    2bec:	08 95       	ret

00002bee <_ZN8SdVolume13cacheRawBlockEmh>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    2bee:	cf 92       	push	r12
    2bf0:	df 92       	push	r13
    2bf2:	ef 92       	push	r14
    2bf4:	ff 92       	push	r15
    2bf6:	cf 93       	push	r28
    2bf8:	6b 01       	movw	r12, r22
    2bfa:	7c 01       	movw	r14, r24
    2bfc:	c4 2f       	mov	r28, r20
  if (cacheBlockNumber_ != blockNumber) {
    2bfe:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <_ZN8SdVolume17cacheBlockNumber_E>
    2c02:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2c06:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2c0a:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2c0e:	8c 15       	cp	r24, r12
    2c10:	9d 05       	cpc	r25, r13
    2c12:	ae 05       	cpc	r26, r14
    2c14:	bf 05       	cpc	r27, r15
    2c16:	d1 f0       	breq	.+52     	; 0x2c4c <_ZN8SdVolume13cacheRawBlockEmh+0x5e>
    if (!cacheFlush()) return false;
    2c18:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_ZN8SdVolume10cacheFlushEv>
    2c1c:	81 11       	cpse	r24, r1
    2c1e:	02 c0       	rjmp	.+4      	; 0x2c24 <_ZN8SdVolume13cacheRawBlockEmh+0x36>
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	1a c0       	rjmp	.+52     	; 0x2c58 <_ZN8SdVolume13cacheRawBlockEmh+0x6a>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    2c24:	20 ef       	ldi	r18, 0xF0	; 240
    2c26:	34 e0       	ldi	r19, 0x04	; 4
    2c28:	b7 01       	movw	r22, r14
    2c2a:	a6 01       	movw	r20, r12
    2c2c:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <_ZN8SdVolume7sdCard_E>
    2c30:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <_ZN8SdVolume7sdCard_E+0x1>
    2c34:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <_ZN7Sd2Card9readBlockEmPh>
    2c38:	88 23       	and	r24, r24
    2c3a:	91 f3       	breq	.-28     	; 0x2c20 <_ZN8SdVolume13cacheRawBlockEmh+0x32>
    cacheBlockNumber_ = blockNumber;
    2c3c:	c0 92 4c 01 	sts	0x014C, r12	; 0x80014c <_ZN8SdVolume17cacheBlockNumber_E>
    2c40:	d0 92 4d 01 	sts	0x014D, r13	; 0x80014d <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2c44:	e0 92 4e 01 	sts	0x014E, r14	; 0x80014e <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2c48:	f0 92 4f 01 	sts	0x014F, r15	; 0x80014f <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  }
  cacheDirty_ |= action;
    2c4c:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <_ZN8SdVolume11cacheDirty_E>
    2c50:	c8 2b       	or	r28, r24
    2c52:	c0 93 ed 04 	sts	0x04ED, r28	; 0x8004ed <_ZN8SdVolume11cacheDirty_E>
  return true;
    2c56:	81 e0       	ldi	r24, 0x01	; 1
}
    2c58:	cf 91       	pop	r28
    2c5a:	ff 90       	pop	r15
    2c5c:	ef 90       	pop	r14
    2c5e:	df 90       	pop	r13
    2c60:	cf 90       	pop	r12
    2c62:	08 95       	ret

00002c64 <_ZN8SdVolume14cacheZeroBlockEm>:
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    2c64:	cf 92       	push	r12
    2c66:	df 92       	push	r13
    2c68:	ef 92       	push	r14
    2c6a:	ff 92       	push	r15
    2c6c:	6b 01       	movw	r12, r22
    2c6e:	7c 01       	movw	r14, r24
  if (!cacheFlush()) return false;
    2c70:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_ZN8SdVolume10cacheFlushEv>
    2c74:	88 23       	and	r24, r24
    2c76:	a9 f0       	breq	.+42     	; 0x2ca2 <_ZN8SdVolume14cacheZeroBlockEm+0x3e>
    2c78:	e0 ef       	ldi	r30, 0xF0	; 240
    2c7a:	f4 e0       	ldi	r31, 0x04	; 4

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
    2c7c:	11 92       	st	Z+, r1
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    2c7e:	86 e0       	ldi	r24, 0x06	; 6
    2c80:	e0 3f       	cpi	r30, 0xF0	; 240
    2c82:	f8 07       	cpc	r31, r24
    2c84:	d9 f7       	brne	.-10     	; 0x2c7c <_ZN8SdVolume14cacheZeroBlockEm+0x18>
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    2c86:	c0 92 4c 01 	sts	0x014C, r12	; 0x80014c <_ZN8SdVolume17cacheBlockNumber_E>
    2c8a:	d0 92 4d 01 	sts	0x014D, r13	; 0x80014d <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2c8e:	e0 92 4e 01 	sts	0x014E, r14	; 0x80014e <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2c92:	f0 92 4f 01 	sts	0x014F, r15	; 0x80014f <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2c96:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <_ZN8SdVolume11cacheDirty_E>
    2c9a:	81 60       	ori	r24, 0x01	; 1
    2c9c:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <_ZN8SdVolume11cacheDirty_E>
  cacheSetDirty();
  return true;
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
}
    2ca2:	ff 90       	pop	r15
    2ca4:	ef 90       	pop	r14
    2ca6:	df 90       	pop	r13
    2ca8:	cf 90       	pop	r12
    2caa:	08 95       	ret

00002cac <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    2cac:	8f 92       	push	r8
    2cae:	9f 92       	push	r9
    2cb0:	af 92       	push	r10
    2cb2:	bf 92       	push	r11
    2cb4:	cf 92       	push	r12
    2cb6:	df 92       	push	r13
    2cb8:	ef 92       	push	r14
    2cba:	ff 92       	push	r15
    2cbc:	0f 93       	push	r16
    2cbe:	1f 93       	push	r17
    2cc0:	cf 93       	push	r28
    2cc2:	df 93       	push	r29
    2cc4:	fc 01       	movw	r30, r24
  if (cluster > (clusterCount_ + 1)) return false;
    2cc6:	81 85       	ldd	r24, Z+9	; 0x09
    2cc8:	92 85       	ldd	r25, Z+10	; 0x0a
    2cca:	a3 85       	ldd	r26, Z+11	; 0x0b
    2ccc:	b4 85       	ldd	r27, Z+12	; 0x0c
    2cce:	01 96       	adiw	r24, 0x01	; 1
    2cd0:	a1 1d       	adc	r26, r1
    2cd2:	b1 1d       	adc	r27, r1
    2cd4:	84 17       	cp	r24, r20
    2cd6:	95 07       	cpc	r25, r21
    2cd8:	a6 07       	cpc	r26, r22
    2cda:	b7 07       	cpc	r27, r23
    2cdc:	10 f4       	brcc	.+4      	; 0x2ce2 <_ZNK8SdVolume6fatGetEmPm+0x36>
    2cde:	80 e0       	ldi	r24, 0x00	; 0
    2ce0:	5b c0       	rjmp	.+182    	; 0x2d98 <_ZNK8SdVolume6fatGetEmPm+0xec>
  uint32_t lba = fatStartBlock_;
    2ce2:	83 88       	ldd	r8, Z+19	; 0x13
    2ce4:	94 88       	ldd	r9, Z+20	; 0x14
    2ce6:	a5 88       	ldd	r10, Z+21	; 0x15
    2ce8:	b6 88       	ldd	r11, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2cea:	87 89       	ldd	r24, Z+23	; 0x17
    2cec:	80 31       	cpi	r24, 0x10	; 16
    2cee:	29 f4       	brne	.+10     	; 0x2cfa <_ZNK8SdVolume6fatGetEmPm+0x4e>
    2cf0:	bb 27       	eor	r27, r27
    2cf2:	a7 2f       	mov	r26, r23
    2cf4:	96 2f       	mov	r25, r22
    2cf6:	85 2f       	mov	r24, r21
    2cf8:	09 c0       	rjmp	.+18     	; 0x2d0c <_ZNK8SdVolume6fatGetEmPm+0x60>
    2cfa:	db 01       	movw	r26, r22
    2cfc:	ca 01       	movw	r24, r20
    2cfe:	c7 e0       	ldi	r28, 0x07	; 7
    2d00:	b6 95       	lsr	r27
    2d02:	a7 95       	ror	r26
    2d04:	97 95       	ror	r25
    2d06:	87 95       	ror	r24
    2d08:	ca 95       	dec	r28
    2d0a:	d1 f7       	brne	.-12     	; 0x2d00 <_ZNK8SdVolume6fatGetEmPm+0x54>
    2d0c:	e9 01       	movw	r28, r18
    2d0e:	6a 01       	movw	r12, r20
    2d10:	7b 01       	movw	r14, r22
    2d12:	8f 01       	movw	r16, r30
    2d14:	bc 01       	movw	r22, r24
    2d16:	cd 01       	movw	r24, r26
    2d18:	68 0d       	add	r22, r8
    2d1a:	79 1d       	adc	r23, r9
    2d1c:	8a 1d       	adc	r24, r10
    2d1e:	9b 1d       	adc	r25, r11
  if (lba != cacheBlockNumber_) {
    2d20:	80 90 4c 01 	lds	r8, 0x014C	; 0x80014c <_ZN8SdVolume17cacheBlockNumber_E>
    2d24:	90 90 4d 01 	lds	r9, 0x014D	; 0x80014d <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2d28:	a0 90 4e 01 	lds	r10, 0x014E	; 0x80014e <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2d2c:	b0 90 4f 01 	lds	r11, 0x014F	; 0x80014f <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2d30:	68 15       	cp	r22, r8
    2d32:	79 05       	cpc	r23, r9
    2d34:	8a 05       	cpc	r24, r10
    2d36:	9b 05       	cpc	r25, r11
    2d38:	91 f4       	brne	.+36     	; 0x2d5e <_ZNK8SdVolume6fatGetEmPm+0xb2>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    2d3a:	f8 01       	movw	r30, r16
    2d3c:	87 89       	ldd	r24, Z+23	; 0x17
    2d3e:	80 31       	cpi	r24, 0x10	; 16
    2d40:	a1 f4       	brne	.+40     	; 0x2d6a <_ZNK8SdVolume6fatGetEmPm+0xbe>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    2d42:	dd 24       	eor	r13, r13
    2d44:	ee 24       	eor	r14, r14
    2d46:	ff 24       	eor	r15, r15
    2d48:	c6 01       	movw	r24, r12
    2d4a:	88 0f       	add	r24, r24
    2d4c:	99 1f       	adc	r25, r25
    2d4e:	fc 01       	movw	r30, r24
    2d50:	e0 51       	subi	r30, 0x10	; 16
    2d52:	fb 4f       	sbci	r31, 0xFB	; 251
    2d54:	80 81       	ld	r24, Z
    2d56:	91 81       	ldd	r25, Z+1	; 0x01
    2d58:	a0 e0       	ldi	r26, 0x00	; 0
    2d5a:	b0 e0       	ldi	r27, 0x00	; 0
    2d5c:	18 c0       	rjmp	.+48     	; 0x2d8e <_ZNK8SdVolume6fatGetEmPm+0xe2>
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2d5e:	40 e0       	ldi	r20, 0x00	; 0
    2d60:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_ZN8SdVolume13cacheRawBlockEmh>
    2d64:	81 11       	cpse	r24, r1
    2d66:	e9 cf       	rjmp	.-46     	; 0x2d3a <_ZNK8SdVolume6fatGetEmPm+0x8e>
    2d68:	ba cf       	rjmp	.-140    	; 0x2cde <_ZNK8SdVolume6fatGetEmPm+0x32>
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    2d6a:	e8 94       	clt
    2d6c:	c7 f8       	bld	r12, 7
    2d6e:	dd 24       	eor	r13, r13
    2d70:	ee 24       	eor	r14, r14
    2d72:	ff 24       	eor	r15, r15
    2d74:	c6 01       	movw	r24, r12
    2d76:	88 0f       	add	r24, r24
    2d78:	99 1f       	adc	r25, r25
    2d7a:	88 0f       	add	r24, r24
    2d7c:	99 1f       	adc	r25, r25
    2d7e:	fc 01       	movw	r30, r24
    2d80:	e0 51       	subi	r30, 0x10	; 16
    2d82:	fb 4f       	sbci	r31, 0xFB	; 251
    2d84:	80 81       	ld	r24, Z
    2d86:	91 81       	ldd	r25, Z+1	; 0x01
    2d88:	a2 81       	ldd	r26, Z+2	; 0x02
    2d8a:	b3 81       	ldd	r27, Z+3	; 0x03
    2d8c:	bf 70       	andi	r27, 0x0F	; 15
    2d8e:	88 83       	st	Y, r24
    2d90:	99 83       	std	Y+1, r25	; 0x01
    2d92:	aa 83       	std	Y+2, r26	; 0x02
    2d94:	bb 83       	std	Y+3, r27	; 0x03
    2d96:	81 e0       	ldi	r24, 0x01	; 1
  }
  return true;
}
    2d98:	df 91       	pop	r29
    2d9a:	cf 91       	pop	r28
    2d9c:	1f 91       	pop	r17
    2d9e:	0f 91       	pop	r16
    2da0:	ff 90       	pop	r15
    2da2:	ef 90       	pop	r14
    2da4:	df 90       	pop	r13
    2da6:	cf 90       	pop	r12
    2da8:	bf 90       	pop	r11
    2daa:	af 90       	pop	r10
    2dac:	9f 90       	pop	r9
    2dae:	8f 90       	pop	r8
    2db0:	08 95       	ret

00002db2 <_ZNK8SdVolume9chainSizeEmPm>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    2db2:	4f 92       	push	r4
    2db4:	5f 92       	push	r5
    2db6:	6f 92       	push	r6
    2db8:	7f 92       	push	r7
    2dba:	af 92       	push	r10
    2dbc:	bf 92       	push	r11
    2dbe:	cf 92       	push	r12
    2dc0:	df 92       	push	r13
    2dc2:	ef 92       	push	r14
    2dc4:	ff 92       	push	r15
    2dc6:	0f 93       	push	r16
    2dc8:	1f 93       	push	r17
    2dca:	cf 93       	push	r28
    2dcc:	df 93       	push	r29
    2dce:	00 d0       	rcall	.+0      	; 0x2dd0 <_ZNK8SdVolume9chainSizeEmPm+0x1e>
    2dd0:	00 d0       	rcall	.+0      	; 0x2dd2 <_ZNK8SdVolume9chainSizeEmPm+0x20>
    2dd2:	cd b7       	in	r28, 0x3d	; 61
    2dd4:	de b7       	in	r29, 0x3e	; 62
    2dd6:	8c 01       	movw	r16, r24
    2dd8:	49 83       	std	Y+1, r20	; 0x01
    2dda:	5a 83       	std	Y+2, r21	; 0x02
    2ddc:	6b 83       	std	Y+3, r22	; 0x03
    2dde:	7c 83       	std	Y+4, r23	; 0x04
    2de0:	59 01       	movw	r10, r18
  uint32_t s = 0;
    2de2:	c1 2c       	mov	r12, r1
    2de4:	d1 2c       	mov	r13, r1
    2de6:	76 01       	movw	r14, r12
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    2de8:	41 2c       	mov	r4, r1
    2dea:	82 e0       	ldi	r24, 0x02	; 2
    2dec:	58 2e       	mov	r5, r24
    2dee:	61 2c       	mov	r6, r1
    2df0:	71 2c       	mov	r7, r1
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    2df2:	49 81       	ldd	r20, Y+1	; 0x01
    2df4:	5a 81       	ldd	r21, Y+2	; 0x02
    2df6:	6b 81       	ldd	r22, Y+3	; 0x03
    2df8:	7c 81       	ldd	r23, Y+4	; 0x04
    2dfa:	9e 01       	movw	r18, r28
    2dfc:	2f 5f       	subi	r18, 0xFF	; 255
    2dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    2e00:	c8 01       	movw	r24, r16
    2e02:	0e 94 56 16 	call	0x2cac	; 0x2cac <_ZNK8SdVolume6fatGetEmPm>
    2e06:	88 23       	and	r24, r24
    2e08:	51 f1       	breq	.+84     	; 0x2e5e <_ZNK8SdVolume9chainSizeEmPm+0xac>
    s += 512UL << clusterSizeShift_;
    2e0a:	d3 01       	movw	r26, r6
    2e0c:	c2 01       	movw	r24, r4
    2e0e:	f8 01       	movw	r30, r16
    2e10:	05 84       	ldd	r0, Z+13	; 0x0d
    2e12:	04 c0       	rjmp	.+8      	; 0x2e1c <_ZNK8SdVolume9chainSizeEmPm+0x6a>
    2e14:	88 0f       	add	r24, r24
    2e16:	99 1f       	adc	r25, r25
    2e18:	aa 1f       	adc	r26, r26
    2e1a:	bb 1f       	adc	r27, r27
    2e1c:	0a 94       	dec	r0
    2e1e:	d2 f7       	brpl	.-12     	; 0x2e14 <_ZNK8SdVolume9chainSizeEmPm+0x62>
    2e20:	c8 0e       	add	r12, r24
    2e22:	d9 1e       	adc	r13, r25
    2e24:	ea 1e       	adc	r14, r26
    2e26:	fb 1e       	adc	r15, r27
  } while (!isEOC(cluster));
    2e28:	49 81       	ldd	r20, Y+1	; 0x01
    2e2a:	5a 81       	ldd	r21, Y+2	; 0x02
    2e2c:	6b 81       	ldd	r22, Y+3	; 0x03
    2e2e:	7c 81       	ldd	r23, Y+4	; 0x04
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2e30:	87 89       	ldd	r24, Z+23	; 0x17
    2e32:	80 31       	cpi	r24, 0x10	; 16
    2e34:	29 f0       	breq	.+10     	; 0x2e40 <_ZNK8SdVolume9chainSizeEmPm+0x8e>
    2e36:	88 ef       	ldi	r24, 0xF8	; 248
    2e38:	9f ef       	ldi	r25, 0xFF	; 255
    2e3a:	af ef       	ldi	r26, 0xFF	; 255
    2e3c:	bf e0       	ldi	r27, 0x0F	; 15
    2e3e:	04 c0       	rjmp	.+8      	; 0x2e48 <_ZNK8SdVolume9chainSizeEmPm+0x96>
    2e40:	88 ef       	ldi	r24, 0xF8	; 248
    2e42:	9f ef       	ldi	r25, 0xFF	; 255
    2e44:	a0 e0       	ldi	r26, 0x00	; 0
    2e46:	b0 e0       	ldi	r27, 0x00	; 0
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    2e48:	48 17       	cp	r20, r24
    2e4a:	59 07       	cpc	r21, r25
    2e4c:	6a 07       	cpc	r22, r26
    2e4e:	7b 07       	cpc	r23, r27
    2e50:	80 f2       	brcs	.-96     	; 0x2df2 <_ZNK8SdVolume9chainSizeEmPm+0x40>
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    2e52:	f5 01       	movw	r30, r10
    2e54:	c0 82       	st	Z, r12
    2e56:	d1 82       	std	Z+1, r13	; 0x01
    2e58:	e2 82       	std	Z+2, r14	; 0x02
    2e5a:	f3 82       	std	Z+3, r15	; 0x03
  return true;
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
}
    2e5e:	0f 90       	pop	r0
    2e60:	0f 90       	pop	r0
    2e62:	0f 90       	pop	r0
    2e64:	0f 90       	pop	r0
    2e66:	df 91       	pop	r29
    2e68:	cf 91       	pop	r28
    2e6a:	1f 91       	pop	r17
    2e6c:	0f 91       	pop	r16
    2e6e:	ff 90       	pop	r15
    2e70:	ef 90       	pop	r14
    2e72:	df 90       	pop	r13
    2e74:	cf 90       	pop	r12
    2e76:	bf 90       	pop	r11
    2e78:	af 90       	pop	r10
    2e7a:	7f 90       	pop	r7
    2e7c:	6f 90       	pop	r6
    2e7e:	5f 90       	pop	r5
    2e80:	4f 90       	pop	r4
    2e82:	08 95       	ret

00002e84 <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    2e84:	4f 92       	push	r4
    2e86:	5f 92       	push	r5
    2e88:	6f 92       	push	r6
    2e8a:	7f 92       	push	r7
    2e8c:	8f 92       	push	r8
    2e8e:	9f 92       	push	r9
    2e90:	af 92       	push	r10
    2e92:	bf 92       	push	r11
    2e94:	cf 92       	push	r12
    2e96:	df 92       	push	r13
    2e98:	ef 92       	push	r14
    2e9a:	ff 92       	push	r15
    2e9c:	0f 93       	push	r16
    2e9e:	1f 93       	push	r17
    2ea0:	cf 93       	push	r28
    2ea2:	df 93       	push	r29
    2ea4:	ec 01       	movw	r28, r24
  // error if reserved cluster
  if (cluster < 2) return false;
    2ea6:	42 30       	cpi	r20, 0x02	; 2
    2ea8:	51 05       	cpc	r21, r1
    2eaa:	61 05       	cpc	r22, r1
    2eac:	71 05       	cpc	r23, r1
    2eae:	10 f4       	brcc	.+4      	; 0x2eb4 <_ZN8SdVolume6fatPutEmm+0x30>
    2eb0:	80 e0       	ldi	r24, 0x00	; 0
    2eb2:	78 c0       	rjmp	.+240    	; 0x2fa4 <_ZN8SdVolume6fatPutEmm+0x120>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2eb4:	89 85       	ldd	r24, Y+9	; 0x09
    2eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb8:	ab 85       	ldd	r26, Y+11	; 0x0b
    2eba:	bc 85       	ldd	r27, Y+12	; 0x0c
    2ebc:	01 96       	adiw	r24, 0x01	; 1
    2ebe:	a1 1d       	adc	r26, r1
    2ec0:	b1 1d       	adc	r27, r1
    2ec2:	84 17       	cp	r24, r20
    2ec4:	95 07       	cpc	r25, r21
    2ec6:	a6 07       	cpc	r26, r22
    2ec8:	b7 07       	cpc	r27, r23
    2eca:	90 f3       	brcs	.-28     	; 0x2eb0 <_ZN8SdVolume6fatPutEmm+0x2c>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    2ecc:	cb 88       	ldd	r12, Y+19	; 0x13
    2ece:	dc 88       	ldd	r13, Y+20	; 0x14
    2ed0:	ed 88       	ldd	r14, Y+21	; 0x15
    2ed2:	fe 88       	ldd	r15, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2ed4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ed6:	80 31       	cpi	r24, 0x10	; 16
    2ed8:	29 f4       	brne	.+10     	; 0x2ee4 <_ZN8SdVolume6fatPutEmm+0x60>
    2eda:	bb 27       	eor	r27, r27
    2edc:	a7 2f       	mov	r26, r23
    2ede:	96 2f       	mov	r25, r22
    2ee0:	85 2f       	mov	r24, r21
    2ee2:	09 c0       	rjmp	.+18     	; 0x2ef6 <_ZN8SdVolume6fatPutEmm+0x72>
    2ee4:	db 01       	movw	r26, r22
    2ee6:	ca 01       	movw	r24, r20
    2ee8:	e7 e0       	ldi	r30, 0x07	; 7
    2eea:	b6 95       	lsr	r27
    2eec:	a7 95       	ror	r26
    2eee:	97 95       	ror	r25
    2ef0:	87 95       	ror	r24
    2ef2:	ea 95       	dec	r30
    2ef4:	d1 f7       	brne	.-12     	; 0x2eea <_ZN8SdVolume6fatPutEmm+0x66>
    2ef6:	48 01       	movw	r8, r16
    2ef8:	59 01       	movw	r10, r18
    2efa:	2a 01       	movw	r4, r20
    2efc:	3b 01       	movw	r6, r22
    2efe:	c8 0e       	add	r12, r24
    2f00:	d9 1e       	adc	r13, r25
    2f02:	ea 1e       	adc	r14, r26
    2f04:	fb 1e       	adc	r15, r27

  if (lba != cacheBlockNumber_) {
    2f06:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <_ZN8SdVolume17cacheBlockNumber_E>
    2f0a:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2f0e:	a0 91 4e 01 	lds	r26, 0x014E	; 0x80014e <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2f12:	b0 91 4f 01 	lds	r27, 0x014F	; 0x80014f <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2f16:	c8 16       	cp	r12, r24
    2f18:	d9 06       	cpc	r13, r25
    2f1a:	ea 06       	cpc	r14, r26
    2f1c:	fb 06       	cpc	r15, r27
    2f1e:	81 f4       	brne	.+32     	; 0x2f40 <_ZN8SdVolume6fatPutEmm+0xbc>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    2f20:	8f 89       	ldd	r24, Y+23	; 0x17
    2f22:	80 31       	cpi	r24, 0x10	; 16
    2f24:	a9 f4       	brne	.+42     	; 0x2f50 <_ZN8SdVolume6fatPutEmm+0xcc>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    2f26:	b3 01       	movw	r22, r6
    2f28:	a2 01       	movw	r20, r4
    2f2a:	55 27       	eor	r21, r21
    2f2c:	66 27       	eor	r22, r22
    2f2e:	77 27       	eor	r23, r23
    2f30:	44 0f       	add	r20, r20
    2f32:	55 1f       	adc	r21, r21
    2f34:	fa 01       	movw	r30, r20
    2f36:	e0 51       	subi	r30, 0x10	; 16
    2f38:	fb 4f       	sbci	r31, 0xFB	; 251
    2f3a:	91 82       	std	Z+1, r9	; 0x01
    2f3c:	80 82       	st	Z, r8
    2f3e:	19 c0       	rjmp	.+50     	; 0x2f72 <_ZN8SdVolume6fatPutEmm+0xee>
  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2f40:	40 e0       	ldi	r20, 0x00	; 0
    2f42:	c7 01       	movw	r24, r14
    2f44:	b6 01       	movw	r22, r12
    2f46:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_ZN8SdVolume13cacheRawBlockEmh>
    2f4a:	81 11       	cpse	r24, r1
    2f4c:	e9 cf       	rjmp	.-46     	; 0x2f20 <_ZN8SdVolume6fatPutEmm+0x9c>
    2f4e:	b0 cf       	rjmp	.-160    	; 0x2eb0 <_ZN8SdVolume6fatPutEmm+0x2c>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    2f50:	b3 01       	movw	r22, r6
    2f52:	a2 01       	movw	r20, r4
    2f54:	4f 77       	andi	r20, 0x7F	; 127
    2f56:	55 27       	eor	r21, r21
    2f58:	66 27       	eor	r22, r22
    2f5a:	77 27       	eor	r23, r23
    2f5c:	44 0f       	add	r20, r20
    2f5e:	55 1f       	adc	r21, r21
    2f60:	44 0f       	add	r20, r20
    2f62:	55 1f       	adc	r21, r21
    2f64:	fa 01       	movw	r30, r20
    2f66:	e0 51       	subi	r30, 0x10	; 16
    2f68:	fb 4f       	sbci	r31, 0xFB	; 251
    2f6a:	80 82       	st	Z, r8
    2f6c:	91 82       	std	Z+1, r9	; 0x01
    2f6e:	a2 82       	std	Z+2, r10	; 0x02
    2f70:	b3 82       	std	Z+3, r11	; 0x03
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2f72:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <_ZN8SdVolume11cacheDirty_E>
    2f76:	81 60       	ori	r24, 0x01	; 1
    2f78:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <_ZN8SdVolume11cacheDirty_E>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    2f7c:	8a 89       	ldd	r24, Y+18	; 0x12
    2f7e:	82 30       	cpi	r24, 0x02	; 2
    2f80:	80 f0       	brcs	.+32     	; 0x2fa2 <_ZN8SdVolume6fatPutEmm+0x11e>
    2f82:	8d 81       	ldd	r24, Y+5	; 0x05
    2f84:	9e 81       	ldd	r25, Y+6	; 0x06
    2f86:	af 81       	ldd	r26, Y+7	; 0x07
    2f88:	b8 85       	ldd	r27, Y+8	; 0x08
    2f8a:	c8 0e       	add	r12, r24
    2f8c:	d9 1e       	adc	r13, r25
    2f8e:	ea 1e       	adc	r14, r26
    2f90:	fb 1e       	adc	r15, r27
    2f92:	c0 92 e9 04 	sts	0x04E9, r12	; 0x8004e9 <_ZN8SdVolume17cacheMirrorBlock_E>
    2f96:	d0 92 ea 04 	sts	0x04EA, r13	; 0x8004ea <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2f9a:	e0 92 eb 04 	sts	0x04EB, r14	; 0x8004eb <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2f9e:	f0 92 ec 04 	sts	0x04EC, r15	; 0x8004ec <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  return true;
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
}
    2fa4:	df 91       	pop	r29
    2fa6:	cf 91       	pop	r28
    2fa8:	1f 91       	pop	r17
    2faa:	0f 91       	pop	r16
    2fac:	ff 90       	pop	r15
    2fae:	ef 90       	pop	r14
    2fb0:	df 90       	pop	r13
    2fb2:	cf 90       	pop	r12
    2fb4:	bf 90       	pop	r11
    2fb6:	af 90       	pop	r10
    2fb8:	9f 90       	pop	r9
    2fba:	8f 90       	pop	r8
    2fbc:	7f 90       	pop	r7
    2fbe:	6f 90       	pop	r6
    2fc0:	5f 90       	pop	r5
    2fc2:	4f 90       	pop	r4
    2fc4:	08 95       	ret

00002fc6 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    2fc6:	2f 92       	push	r2
    2fc8:	3f 92       	push	r3
    2fca:	4f 92       	push	r4
    2fcc:	5f 92       	push	r5
    2fce:	6f 92       	push	r6
    2fd0:	7f 92       	push	r7
    2fd2:	9f 92       	push	r9
    2fd4:	af 92       	push	r10
    2fd6:	bf 92       	push	r11
    2fd8:	cf 92       	push	r12
    2fda:	df 92       	push	r13
    2fdc:	ef 92       	push	r14
    2fde:	ff 92       	push	r15
    2fe0:	0f 93       	push	r16
    2fe2:	1f 93       	push	r17
    2fe4:	cf 93       	push	r28
    2fe6:	df 93       	push	r29
    2fe8:	cd b7       	in	r28, 0x3d	; 61
    2fea:	de b7       	in	r29, 0x3e	; 62
    2fec:	60 97       	sbiw	r28, 0x10	; 16
    2fee:	0f b6       	in	r0, 0x3f	; 63
    2ff0:	f8 94       	cli
    2ff2:	de bf       	out	0x3e, r29	; 62
    2ff4:	0f be       	out	0x3f, r0	; 63
    2ff6:	cd bf       	out	0x3d, r28	; 61
    2ff8:	5c 01       	movw	r10, r24
    2ffa:	49 87       	std	Y+9, r20	; 0x09
    2ffc:	5a 87       	std	Y+10, r21	; 0x0a
    2ffe:	6b 87       	std	Y+11, r22	; 0x0b
    3000:	7c 87       	std	Y+12, r23	; 0x0c
    3002:	19 01       	movw	r2, r18

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    3004:	d9 01       	movw	r26, r18
    3006:	cd 90       	ld	r12, X+
    3008:	dd 90       	ld	r13, X+
    300a:	ed 90       	ld	r14, X+
    300c:	fc 90       	ld	r15, X
    300e:	c1 14       	cp	r12, r1
    3010:	d1 04       	cpc	r13, r1
    3012:	e1 04       	cpc	r14, r1
    3014:	f1 04       	cpc	r15, r1
    3016:	31 f0       	breq	.+12     	; 0x3024 <_ZN8SdVolume15allocContiguousEmPm+0x5e>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    3018:	bf ef       	ldi	r27, 0xFF	; 255
    301a:	cb 1a       	sub	r12, r27
    301c:	db 0a       	sbc	r13, r27
    301e:	eb 0a       	sbc	r14, r27
    3020:	fb 0a       	sbc	r15, r27
    3022:	10 c0       	rjmp	.+32     	; 0x3044 <_ZN8SdVolume15allocContiguousEmPm+0x7e>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    3024:	fc 01       	movw	r30, r24
    3026:	c0 80       	ld	r12, Z
    3028:	d1 80       	ldd	r13, Z+1	; 0x01
    302a:	e2 80       	ldd	r14, Z+2	; 0x02
    302c:	f3 80       	ldd	r15, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    302e:	99 24       	eor	r9, r9
    3030:	93 94       	inc	r9
    3032:	09 85       	ldd	r16, Y+9	; 0x09
    3034:	1a 85       	ldd	r17, Y+10	; 0x0a
    3036:	2b 85       	ldd	r18, Y+11	; 0x0b
    3038:	3c 85       	ldd	r19, Y+12	; 0x0c
    303a:	01 30       	cpi	r16, 0x01	; 1
    303c:	11 05       	cpc	r17, r1
    303e:	21 05       	cpc	r18, r1
    3040:	31 05       	cpc	r19, r1
    3042:	09 f0       	breq	.+2      	; 0x3046 <_ZN8SdVolume15allocContiguousEmPm+0x80>
    3044:	91 2c       	mov	r9, r1
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    3046:	f5 01       	movw	r30, r10
    3048:	81 85       	ldd	r24, Z+9	; 0x09
    304a:	92 85       	ldd	r25, Z+10	; 0x0a
    304c:	a3 85       	ldd	r26, Z+11	; 0x0b
    304e:	b4 85       	ldd	r27, Z+12	; 0x0c
    3050:	8c 01       	movw	r16, r24
    3052:	9d 01       	movw	r18, r26
    3054:	0f 5f       	subi	r16, 0xFF	; 255
    3056:	1f 4f       	sbci	r17, 0xFF	; 255
    3058:	2f 4f       	sbci	r18, 0xFF	; 255
    305a:	3f 4f       	sbci	r19, 0xFF	; 255
    305c:	0d 87       	std	Y+13, r16	; 0x0d
    305e:	1e 87       	std	Y+14, r17	; 0x0e
    3060:	2f 87       	std	Y+15, r18	; 0x0f
    3062:	38 8b       	std	Y+16, r19	; 0x10

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    3064:	26 01       	movw	r4, r12
    3066:	37 01       	movw	r6, r14

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    3068:	1d 82       	std	Y+5, r1	; 0x05
    306a:	1e 82       	std	Y+6, r1	; 0x06
    306c:	1f 82       	std	Y+7, r1	; 0x07
    306e:	18 86       	std	Y+8, r1	; 0x08
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    3070:	f5 01       	movw	r30, r10
    3072:	81 85       	ldd	r24, Z+9	; 0x09
    3074:	92 85       	ldd	r25, Z+10	; 0x0a
    3076:	a3 85       	ldd	r26, Z+11	; 0x0b
    3078:	b4 85       	ldd	r27, Z+12	; 0x0c
    307a:	0d 81       	ldd	r16, Y+5	; 0x05
    307c:	1e 81       	ldd	r17, Y+6	; 0x06
    307e:	2f 81       	ldd	r18, Y+7	; 0x07
    3080:	38 85       	ldd	r19, Y+8	; 0x08
    3082:	08 17       	cp	r16, r24
    3084:	19 07       	cpc	r17, r25
    3086:	2a 07       	cpc	r18, r26
    3088:	3b 07       	cpc	r19, r27
    308a:	08 f0       	brcs	.+2      	; 0x308e <_ZN8SdVolume15allocContiguousEmPm+0xc8>
    308c:	56 c0       	rjmp	.+172    	; 0x313a <_ZN8SdVolume15allocContiguousEmPm+0x174>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    308e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3090:	3e 85       	ldd	r19, Y+14	; 0x0e
    3092:	4f 85       	ldd	r20, Y+15	; 0x0f
    3094:	58 89       	ldd	r21, Y+16	; 0x10
    3096:	24 15       	cp	r18, r4
    3098:	35 05       	cpc	r19, r5
    309a:	46 05       	cpc	r20, r6
    309c:	57 05       	cpc	r21, r7
    309e:	50 f4       	brcc	.+20     	; 0x30b4 <_ZN8SdVolume15allocContiguousEmPm+0xee>
      bgnCluster = endCluster = 2;
    30a0:	82 e0       	ldi	r24, 0x02	; 2
    30a2:	48 2e       	mov	r4, r24
    30a4:	51 2c       	mov	r5, r1
    30a6:	61 2c       	mov	r6, r1
    30a8:	71 2c       	mov	r7, r1
    30aa:	92 e0       	ldi	r25, 0x02	; 2
    30ac:	c9 2e       	mov	r12, r25
    30ae:	d1 2c       	mov	r13, r1
    30b0:	e1 2c       	mov	r14, r1
    30b2:	f1 2c       	mov	r15, r1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    30b4:	9e 01       	movw	r18, r28
    30b6:	2f 5f       	subi	r18, 0xFF	; 255
    30b8:	3f 4f       	sbci	r19, 0xFF	; 255
    30ba:	b3 01       	movw	r22, r6
    30bc:	a2 01       	movw	r20, r4
    30be:	c5 01       	movw	r24, r10
    30c0:	0e 94 56 16 	call	0x2cac	; 0x2cac <_ZNK8SdVolume6fatGetEmPm>
    30c4:	88 23       	and	r24, r24
    30c6:	c9 f1       	breq	.+114    	; 0x313a <_ZN8SdVolume15allocContiguousEmPm+0x174>

    if (f != 0) {
    30c8:	49 81       	ldd	r20, Y+1	; 0x01
    30ca:	5a 81       	ldd	r21, Y+2	; 0x02
    30cc:	6b 81       	ldd	r22, Y+3	; 0x03
    30ce:	7c 81       	ldd	r23, Y+4	; 0x04
    30d0:	d3 01       	movw	r26, r6
    30d2:	c2 01       	movw	r24, r4
    30d4:	01 96       	adiw	r24, 0x01	; 1
    30d6:	a1 1d       	adc	r26, r1
    30d8:	b1 1d       	adc	r27, r1
    30da:	45 2b       	or	r20, r21
    30dc:	46 2b       	or	r20, r22
    30de:	47 2b       	or	r20, r23
    30e0:	19 f0       	breq	.+6      	; 0x30e8 <_ZN8SdVolume15allocContiguousEmPm+0x122>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    30e2:	6c 01       	movw	r12, r24
    30e4:	7d 01       	movw	r14, r26
    30e6:	0f c0       	rjmp	.+30     	; 0x3106 <_ZN8SdVolume15allocContiguousEmPm+0x140>
    } else if ((endCluster - bgnCluster + 1) == count) {
    30e8:	ac 01       	movw	r20, r24
    30ea:	bd 01       	movw	r22, r26
    30ec:	4c 19       	sub	r20, r12
    30ee:	5d 09       	sbc	r21, r13
    30f0:	6e 09       	sbc	r22, r14
    30f2:	7f 09       	sbc	r23, r15
    30f4:	09 85       	ldd	r16, Y+9	; 0x09
    30f6:	1a 85       	ldd	r17, Y+10	; 0x0a
    30f8:	2b 85       	ldd	r18, Y+11	; 0x0b
    30fa:	3c 85       	ldd	r19, Y+12	; 0x0c
    30fc:	04 17       	cp	r16, r20
    30fe:	15 07       	cpc	r17, r21
    3100:	26 07       	cpc	r18, r22
    3102:	37 07       	cpc	r19, r23
    3104:	79 f0       	breq	.+30     	; 0x3124 <_ZN8SdVolume15allocContiguousEmPm+0x15e>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    3106:	2d 81       	ldd	r18, Y+5	; 0x05
    3108:	3e 81       	ldd	r19, Y+6	; 0x06
    310a:	4f 81       	ldd	r20, Y+7	; 0x07
    310c:	58 85       	ldd	r21, Y+8	; 0x08
    310e:	2f 5f       	subi	r18, 0xFF	; 255
    3110:	3f 4f       	sbci	r19, 0xFF	; 255
    3112:	4f 4f       	sbci	r20, 0xFF	; 255
    3114:	5f 4f       	sbci	r21, 0xFF	; 255
    3116:	2d 83       	std	Y+5, r18	; 0x05
    3118:	3e 83       	std	Y+6, r19	; 0x06
    311a:	4f 83       	std	Y+7, r20	; 0x07
    311c:	58 87       	std	Y+8, r21	; 0x08
    311e:	2c 01       	movw	r4, r24
    3120:	3d 01       	movw	r6, r26
    3122:	a6 cf       	rjmp	.-180    	; 0x3070 <_ZN8SdVolume15allocContiguousEmPm+0xaa>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    3124:	0f ef       	ldi	r16, 0xFF	; 255
    3126:	1f ef       	ldi	r17, 0xFF	; 255
    3128:	2f ef       	ldi	r18, 0xFF	; 255
    312a:	3f e0       	ldi	r19, 0x0F	; 15
    312c:	b3 01       	movw	r22, r6
    312e:	a2 01       	movw	r20, r4
    3130:	c5 01       	movw	r24, r10
    3132:	0e 94 42 17 	call	0x2e84	; 0x2e84 <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    3136:	81 11       	cpse	r24, r1
    3138:	18 c0       	rjmp	.+48     	; 0x316a <_ZN8SdVolume15allocContiguousEmPm+0x1a4>
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	41 c0       	rjmp	.+130    	; 0x31c0 <_ZN8SdVolume15allocContiguousEmPm+0x1fa>

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    313e:	d3 01       	movw	r26, r6
    3140:	c2 01       	movw	r24, r4
    3142:	01 97       	sbiw	r24, 0x01	; 1
    3144:	a1 09       	sbc	r26, r1
    3146:	b1 09       	sbc	r27, r1
    3148:	8d 83       	std	Y+5, r24	; 0x05
    314a:	9e 83       	std	Y+6, r25	; 0x06
    314c:	af 83       	std	Y+7, r26	; 0x07
    314e:	b8 87       	std	Y+8, r27	; 0x08
    3150:	93 01       	movw	r18, r6
    3152:	82 01       	movw	r16, r4
    3154:	ac 01       	movw	r20, r24
    3156:	bd 01       	movw	r22, r26
    3158:	c5 01       	movw	r24, r10
    315a:	0e 94 42 17 	call	0x2e84	; 0x2e84 <_ZN8SdVolume6fatPutEmm>
    315e:	88 23       	and	r24, r24
    3160:	61 f3       	breq	.-40     	; 0x313a <_ZN8SdVolume15allocContiguousEmPm+0x174>
    endCluster--;
    3162:	4d 80       	ldd	r4, Y+5	; 0x05
    3164:	5e 80       	ldd	r5, Y+6	; 0x06
    3166:	6f 80       	ldd	r6, Y+7	; 0x07
    3168:	78 84       	ldd	r7, Y+8	; 0x08
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    316a:	c4 14       	cp	r12, r4
    316c:	d5 04       	cpc	r13, r5
    316e:	e6 04       	cpc	r14, r6
    3170:	f7 04       	cpc	r15, r7
    3172:	28 f3       	brcs	.-54     	; 0x313e <_ZN8SdVolume15allocContiguousEmPm+0x178>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    3174:	d1 01       	movw	r26, r2
    3176:	4d 91       	ld	r20, X+
    3178:	5d 91       	ld	r21, X+
    317a:	6d 91       	ld	r22, X+
    317c:	7c 91       	ld	r23, X
    317e:	41 15       	cp	r20, r1
    3180:	51 05       	cpc	r21, r1
    3182:	61 05       	cpc	r22, r1
    3184:	71 05       	cpc	r23, r1
    3186:	99 f4       	brne	.+38     	; 0x31ae <_ZN8SdVolume15allocContiguousEmPm+0x1e8>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    3188:	f1 01       	movw	r30, r2
    318a:	c0 82       	st	Z, r12
    318c:	d1 82       	std	Z+1, r13	; 0x01
    318e:	e2 82       	std	Z+2, r14	; 0x02
    3190:	f3 82       	std	Z+3, r15	; 0x03

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    3192:	99 20       	and	r9, r9
    3194:	a1 f0       	breq	.+40     	; 0x31be <_ZN8SdVolume15allocContiguousEmPm+0x1f8>
    3196:	ff ef       	ldi	r31, 0xFF	; 255
    3198:	cf 1a       	sub	r12, r31
    319a:	df 0a       	sbc	r13, r31
    319c:	ef 0a       	sbc	r14, r31
    319e:	ff 0a       	sbc	r15, r31
    31a0:	d5 01       	movw	r26, r10
    31a2:	cd 92       	st	X+, r12
    31a4:	dd 92       	st	X+, r13
    31a6:	ed 92       	st	X+, r14
    31a8:	fc 92       	st	X, r15
    31aa:	13 97       	sbiw	r26, 0x03	; 3
    31ac:	08 c0       	rjmp	.+16     	; 0x31be <_ZN8SdVolume15allocContiguousEmPm+0x1f8>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    31ae:	97 01       	movw	r18, r14
    31b0:	86 01       	movw	r16, r12
    31b2:	c5 01       	movw	r24, r10
    31b4:	0e 94 42 17 	call	0x2e84	; 0x2e84 <_ZN8SdVolume6fatPutEmm>
    31b8:	81 11       	cpse	r24, r1
    31ba:	e6 cf       	rjmp	.-52     	; 0x3188 <_ZN8SdVolume15allocContiguousEmPm+0x1c2>
    31bc:	be cf       	rjmp	.-132    	; 0x313a <_ZN8SdVolume15allocContiguousEmPm+0x174>
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
    31be:	81 e0       	ldi	r24, 0x01	; 1
}
    31c0:	60 96       	adiw	r28, 0x10	; 16
    31c2:	0f b6       	in	r0, 0x3f	; 63
    31c4:	f8 94       	cli
    31c6:	de bf       	out	0x3e, r29	; 62
    31c8:	0f be       	out	0x3f, r0	; 63
    31ca:	cd bf       	out	0x3d, r28	; 61
    31cc:	df 91       	pop	r29
    31ce:	cf 91       	pop	r28
    31d0:	1f 91       	pop	r17
    31d2:	0f 91       	pop	r16
    31d4:	ff 90       	pop	r15
    31d6:	ef 90       	pop	r14
    31d8:	df 90       	pop	r13
    31da:	cf 90       	pop	r12
    31dc:	bf 90       	pop	r11
    31de:	af 90       	pop	r10
    31e0:	9f 90       	pop	r9
    31e2:	7f 90       	pop	r7
    31e4:	6f 90       	pop	r6
    31e6:	5f 90       	pop	r5
    31e8:	4f 90       	pop	r4
    31ea:	3f 90       	pop	r3
    31ec:	2f 90       	pop	r2
    31ee:	08 95       	ret

000031f0 <_ZN8SdVolume9freeChainEm>:
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    31f0:	af 92       	push	r10
    31f2:	bf 92       	push	r11
    31f4:	cf 92       	push	r12
    31f6:	df 92       	push	r13
    31f8:	ef 92       	push	r14
    31fa:	ff 92       	push	r15
    31fc:	0f 93       	push	r16
    31fe:	1f 93       	push	r17
    3200:	cf 93       	push	r28
    3202:	df 93       	push	r29
    3204:	00 d0       	rcall	.+0      	; 0x3206 <_ZN8SdVolume9freeChainEm+0x16>
    3206:	00 d0       	rcall	.+0      	; 0x3208 <_ZN8SdVolume9freeChainEm+0x18>
    3208:	cd b7       	in	r28, 0x3d	; 61
    320a:	de b7       	in	r29, 0x3e	; 62
    320c:	5c 01       	movw	r10, r24
    320e:	6a 01       	movw	r12, r20
    3210:	7b 01       	movw	r14, r22
  // clear free cluster location
  allocSearchStart_ = 2;
    3212:	82 e0       	ldi	r24, 0x02	; 2
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	a0 e0       	ldi	r26, 0x00	; 0
    3218:	b0 e0       	ldi	r27, 0x00	; 0
    321a:	f5 01       	movw	r30, r10
    321c:	80 83       	st	Z, r24
    321e:	91 83       	std	Z+1, r25	; 0x01
    3220:	a2 83       	std	Z+2, r26	; 0x02
    3222:	b3 83       	std	Z+3, r27	; 0x03

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    3224:	9e 01       	movw	r18, r28
    3226:	2f 5f       	subi	r18, 0xFF	; 255
    3228:	3f 4f       	sbci	r19, 0xFF	; 255
    322a:	b7 01       	movw	r22, r14
    322c:	a6 01       	movw	r20, r12
    322e:	c5 01       	movw	r24, r10
    3230:	0e 94 56 16 	call	0x2cac	; 0x2cac <_ZNK8SdVolume6fatGetEmPm>
    3234:	88 23       	and	r24, r24
    3236:	11 f1       	breq	.+68     	; 0x327c <_ZN8SdVolume9freeChainEm+0x8c>

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    3238:	00 e0       	ldi	r16, 0x00	; 0
    323a:	10 e0       	ldi	r17, 0x00	; 0
    323c:	98 01       	movw	r18, r16
    323e:	b7 01       	movw	r22, r14
    3240:	a6 01       	movw	r20, r12
    3242:	c5 01       	movw	r24, r10
    3244:	0e 94 42 17 	call	0x2e84	; 0x2e84 <_ZN8SdVolume6fatPutEmm>
    3248:	88 23       	and	r24, r24
    324a:	c1 f0       	breq	.+48     	; 0x327c <_ZN8SdVolume9freeChainEm+0x8c>

    cluster = next;
    324c:	c9 80       	ldd	r12, Y+1	; 0x01
    324e:	da 80       	ldd	r13, Y+2	; 0x02
    3250:	eb 80       	ldd	r14, Y+3	; 0x03
    3252:	fc 80       	ldd	r15, Y+4	; 0x04
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    3254:	f5 01       	movw	r30, r10
    3256:	87 89       	ldd	r24, Z+23	; 0x17
    3258:	80 31       	cpi	r24, 0x10	; 16
    325a:	29 f0       	breq	.+10     	; 0x3266 <_ZN8SdVolume9freeChainEm+0x76>
    325c:	88 ef       	ldi	r24, 0xF8	; 248
    325e:	9f ef       	ldi	r25, 0xFF	; 255
    3260:	af ef       	ldi	r26, 0xFF	; 255
    3262:	bf e0       	ldi	r27, 0x0F	; 15
    3264:	04 c0       	rjmp	.+8      	; 0x326e <_ZN8SdVolume9freeChainEm+0x7e>
    3266:	88 ef       	ldi	r24, 0xF8	; 248
    3268:	9f ef       	ldi	r25, 0xFF	; 255
    326a:	a0 e0       	ldi	r26, 0x00	; 0
    326c:	b0 e0       	ldi	r27, 0x00	; 0
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    326e:	c8 16       	cp	r12, r24
    3270:	d9 06       	cpc	r13, r25
    3272:	ea 06       	cpc	r14, r26
    3274:	fb 06       	cpc	r15, r27
    3276:	b0 f2       	brcs	.-84     	; 0x3224 <_ZN8SdVolume9freeChainEm+0x34>
    if (!fatPut(cluster, 0)) return false;

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    3278:	81 e0       	ldi	r24, 0x01	; 1
    327a:	01 c0       	rjmp	.+2      	; 0x327e <_ZN8SdVolume9freeChainEm+0x8e>
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    327c:	80 e0       	ldi	r24, 0x00	; 0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    327e:	0f 90       	pop	r0
    3280:	0f 90       	pop	r0
    3282:	0f 90       	pop	r0
    3284:	0f 90       	pop	r0
    3286:	df 91       	pop	r29
    3288:	cf 91       	pop	r28
    328a:	1f 91       	pop	r17
    328c:	0f 91       	pop	r16
    328e:	ff 90       	pop	r15
    3290:	ef 90       	pop	r14
    3292:	df 90       	pop	r13
    3294:	cf 90       	pop	r12
    3296:	bf 90       	pop	r11
    3298:	af 90       	pop	r10
    329a:	08 95       	ret

0000329c <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    329c:	8f 92       	push	r8
    329e:	9f 92       	push	r9
    32a0:	af 92       	push	r10
    32a2:	bf 92       	push	r11
    32a4:	cf 92       	push	r12
    32a6:	df 92       	push	r13
    32a8:	ef 92       	push	r14
    32aa:	ff 92       	push	r15
    32ac:	0f 93       	push	r16
    32ae:	1f 93       	push	r17
    32b0:	cf 93       	push	r28
    32b2:	df 93       	push	r29
    32b4:	ec 01       	movw	r28, r24
    32b6:	14 2f       	mov	r17, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    32b8:	70 93 ef 04 	sts	0x04EF, r23	; 0x8004ef <_ZN8SdVolume7sdCard_E+0x1>
    32bc:	60 93 ee 04 	sts	0x04EE, r22	; 0x8004ee <_ZN8SdVolume7sdCard_E>
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    32c0:	44 23       	and	r20, r20
    32c2:	69 f1       	breq	.+90     	; 0x331e <_ZN8SdVolume4initEP7Sd2Cardh+0x82>
    if (part > 4)return false;
    32c4:	45 30       	cpi	r20, 0x05	; 5
    32c6:	10 f0       	brcs	.+4      	; 0x32cc <_ZN8SdVolume4initEP7Sd2Cardh+0x30>
    32c8:	80 e0       	ldi	r24, 0x00	; 0
    32ca:	f2 c0       	rjmp	.+484    	; 0x34b0 <_ZN8SdVolume4initEP7Sd2Cardh+0x214>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    32cc:	40 e0       	ldi	r20, 0x00	; 0
    32ce:	60 e0       	ldi	r22, 0x00	; 0
    32d0:	70 e0       	ldi	r23, 0x00	; 0
    32d2:	cb 01       	movw	r24, r22
    32d4:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_ZN8SdVolume13cacheRawBlockEmh>
    32d8:	88 23       	and	r24, r24
    32da:	b1 f3       	breq	.-20     	; 0x32c8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    32dc:	20 e1       	ldi	r18, 0x10	; 16
    32de:	12 9f       	mul	r17, r18
    32e0:	a0 01       	movw	r20, r0
    32e2:	11 24       	eor	r1, r1
    32e4:	40 52       	subi	r20, 0x20	; 32
    32e6:	5b 4f       	sbci	r21, 0xFB	; 251
    32e8:	fa 01       	movw	r30, r20
    32ea:	e2 54       	subi	r30, 0x42	; 66
    32ec:	fe 4f       	sbci	r31, 0xFE	; 254
    32ee:	80 81       	ld	r24, Z
    32f0:	8f 77       	andi	r24, 0x7F	; 127
    32f2:	51 f7       	brne	.-44     	; 0x32c8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
    32f4:	3c 96       	adiw	r30, 0x0c	; 12
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    32f6:	80 81       	ld	r24, Z
    32f8:	91 81       	ldd	r25, Z+1	; 0x01
    32fa:	a2 81       	ldd	r26, Z+2	; 0x02
    32fc:	b3 81       	ldd	r27, Z+3	; 0x03
    32fe:	84 36       	cpi	r24, 0x64	; 100
    3300:	91 05       	cpc	r25, r1
    3302:	a1 05       	cpc	r26, r1
    3304:	b1 05       	cpc	r27, r1
    3306:	00 f3       	brcs	.-64     	; 0x32c8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
      p->firstSector == 0) {
    3308:	34 97       	sbiw	r30, 0x04	; 4
    330a:	c0 80       	ld	r12, Z
    330c:	d1 80       	ldd	r13, Z+1	; 0x01
    330e:	e2 80       	ldd	r14, Z+2	; 0x02
    3310:	f3 80       	ldd	r15, Z+3	; 0x03
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
    3312:	c1 14       	cp	r12, r1
    3314:	d1 04       	cpc	r13, r1
    3316:	e1 04       	cpc	r14, r1
    3318:	f1 04       	cpc	r15, r1
    331a:	21 f4       	brne	.+8      	; 0x3324 <_ZN8SdVolume4initEP7Sd2Cardh+0x88>
    331c:	d5 cf       	rjmp	.-86     	; 0x32c8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    331e:	c1 2c       	mov	r12, r1
    3320:	d1 2c       	mov	r13, r1
    3322:	76 01       	movw	r14, r12
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    3324:	40 e0       	ldi	r20, 0x00	; 0
    3326:	c7 01       	movw	r24, r14
    3328:	b6 01       	movw	r22, r12
    332a:	0e 94 f7 15 	call	0x2bee	; 0x2bee <_ZN8SdVolume13cacheRawBlockEmh>
    332e:	88 23       	and	r24, r24
    3330:	59 f2       	breq	.-106    	; 0x32c8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    3332:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <_ZN8SdVolume12cacheBuffer_E+0xb>
    3336:	90 91 fc 04 	lds	r25, 0x04FC	; 0x8004fc <_ZN8SdVolume12cacheBuffer_E+0xc>
    333a:	81 15       	cp	r24, r1
    333c:	92 40       	sbci	r25, 0x02	; 2
    333e:	21 f6       	brne	.-120    	; 0x32c8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    3340:	90 91 00 05 	lds	r25, 0x0500	; 0x800500 <_ZN8SdVolume12cacheBuffer_E+0x10>
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    3344:	99 23       	and	r25, r25
    3346:	09 f4       	brne	.+2      	; 0x334a <_ZN8SdVolume4initEP7Sd2Cardh+0xae>
    3348:	bf cf       	rjmp	.-130    	; 0x32c8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    334a:	20 91 fe 04 	lds	r18, 0x04FE	; 0x8004fe <_ZN8SdVolume12cacheBuffer_E+0xe>
    334e:	30 91 ff 04 	lds	r19, 0x04FF	; 0x8004ff <_ZN8SdVolume12cacheBuffer_E+0xf>
    3352:	23 2b       	or	r18, r19
    3354:	09 f4       	brne	.+2      	; 0x3358 <_ZN8SdVolume4initEP7Sd2Cardh+0xbc>
    3356:	b8 cf       	rjmp	.-144    	; 0x32c8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
    3358:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <_ZN8SdVolume12cacheBuffer_E+0xd>
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    335c:	88 23       	and	r24, r24
    335e:	09 f4       	brne	.+2      	; 0x3362 <_ZN8SdVolume4initEP7Sd2Cardh+0xc6>
    3360:	b3 cf       	rjmp	.-154    	; 0x32c8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    3362:	9a 8b       	std	Y+18, r25	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    3364:	8c 83       	std	Y+4, r24	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    3366:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	41 e0       	ldi	r20, 0x01	; 1
    336c:	50 e0       	ldi	r21, 0x00	; 0
    336e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3370:	e2 2f       	mov	r30, r18
    3372:	ba 01       	movw	r22, r20
    3374:	02 2e       	mov	r0, r18
    3376:	02 c0       	rjmp	.+4      	; 0x337c <_ZN8SdVolume4initEP7Sd2Cardh+0xe0>
    3378:	66 0f       	add	r22, r22
    337a:	77 1f       	adc	r23, r23
    337c:	0a 94       	dec	r0
    337e:	e2 f7       	brpl	.-8      	; 0x3378 <_ZN8SdVolume4initEP7Sd2Cardh+0xdc>
    3380:	86 17       	cp	r24, r22
    3382:	97 07       	cpc	r25, r23
    3384:	31 f0       	breq	.+12     	; 0x3392 <_ZN8SdVolume4initEP7Sd2Cardh+0xf6>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    3386:	31 e0       	ldi	r19, 0x01	; 1
    3388:	32 0f       	add	r19, r18
    338a:	3d 87       	std	Y+13, r19	; 0x0d
    338c:	28 30       	cpi	r18, 0x08	; 8
    338e:	78 f3       	brcs	.-34     	; 0x336e <_ZN8SdVolume4initEP7Sd2Cardh+0xd2>
    3390:	9b cf       	rjmp	.-202    	; 0x32c8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    3392:	20 91 06 05 	lds	r18, 0x0506	; 0x800506 <_ZN8SdVolume12cacheBuffer_E+0x16>
    3396:	30 91 07 05 	lds	r19, 0x0507	; 0x800507 <_ZN8SdVolume12cacheBuffer_E+0x17>
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    339a:	21 15       	cp	r18, r1
    339c:	31 05       	cpc	r19, r1
    339e:	19 f0       	breq	.+6      	; 0x33a6 <_ZN8SdVolume4initEP7Sd2Cardh+0x10a>
    33a0:	40 e0       	ldi	r20, 0x00	; 0
    33a2:	50 e0       	ldi	r21, 0x00	; 0
    33a4:	08 c0       	rjmp	.+16     	; 0x33b6 <_ZN8SdVolume4initEP7Sd2Cardh+0x11a>
    33a6:	20 91 14 05 	lds	r18, 0x0514	; 0x800514 <_ZN8SdVolume12cacheBuffer_E+0x24>
    33aa:	30 91 15 05 	lds	r19, 0x0515	; 0x800515 <_ZN8SdVolume12cacheBuffer_E+0x25>
    33ae:	40 91 16 05 	lds	r20, 0x0516	; 0x800516 <_ZN8SdVolume12cacheBuffer_E+0x26>
    33b2:	50 91 17 05 	lds	r21, 0x0517	; 0x800517 <_ZN8SdVolume12cacheBuffer_E+0x27>
    33b6:	2d 83       	std	Y+5, r18	; 0x05
    33b8:	3e 83       	std	Y+6, r19	; 0x06
    33ba:	4f 83       	std	Y+7, r20	; 0x07
    33bc:	58 87       	std	Y+8, r21	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    33be:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <_ZN8SdVolume12cacheBuffer_E+0xe>
    33c2:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <_ZN8SdVolume12cacheBuffer_E+0xf>
    33c6:	46 01       	movw	r8, r12
    33c8:	57 01       	movw	r10, r14
    33ca:	88 0e       	add	r8, r24
    33cc:	99 1e       	adc	r9, r25
    33ce:	a1 1c       	adc	r10, r1
    33d0:	b1 1c       	adc	r11, r1
    33d2:	8b 8a       	std	Y+19, r8	; 0x13
    33d4:	9c 8a       	std	Y+20, r9	; 0x14
    33d6:	ad 8a       	std	Y+21, r10	; 0x15
    33d8:	be 8a       	std	Y+22, r11	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    33da:	00 91 01 05 	lds	r16, 0x0501	; 0x800501 <_ZN8SdVolume12cacheBuffer_E+0x11>
    33de:	10 91 02 05 	lds	r17, 0x0502	; 0x800502 <_ZN8SdVolume12cacheBuffer_E+0x12>
    33e2:	19 8f       	std	Y+25, r17	; 0x19
    33e4:	08 8f       	std	Y+24, r16	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    33e6:	a0 91 00 05 	lds	r26, 0x0500	; 0x800500 <_ZN8SdVolume12cacheBuffer_E+0x10>
    33ea:	b0 e0       	ldi	r27, 0x00	; 0
    33ec:	0e 94 b8 1b 	call	0x3770	; 0x3770 <__muluhisi3>
    33f0:	86 0e       	add	r8, r22
    33f2:	97 1e       	adc	r9, r23
    33f4:	a8 1e       	adc	r10, r24
    33f6:	b9 1e       	adc	r11, r25
    33f8:	8a 8e       	std	Y+26, r8	; 0x1a
    33fa:	9b 8e       	std	Y+27, r9	; 0x1b
    33fc:	ac 8e       	std	Y+28, r10	; 0x1c
    33fe:	bd 8e       	std	Y+29, r11	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    3400:	85 e0       	ldi	r24, 0x05	; 5
    3402:	00 0f       	add	r16, r16
    3404:	11 1f       	adc	r17, r17
    3406:	8a 95       	dec	r24
    3408:	e1 f7       	brne	.-8      	; 0x3402 <_ZN8SdVolume4initEP7Sd2Cardh+0x166>
    340a:	01 50       	subi	r16, 0x01	; 1
    340c:	1e 4f       	sbci	r17, 0xFE	; 254
    340e:	01 2f       	mov	r16, r17
    3410:	11 27       	eor	r17, r17
    3412:	06 95       	lsr	r16
    3414:	80 0e       	add	r8, r16
    3416:	91 1e       	adc	r9, r17
    3418:	a1 1c       	adc	r10, r1
    341a:	b1 1c       	adc	r11, r1
    341c:	8e 86       	std	Y+14, r8	; 0x0e
    341e:	9f 86       	std	Y+15, r9	; 0x0f
    3420:	a8 8a       	std	Y+16, r10	; 0x10
    3422:	b9 8a       	std	Y+17, r11	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    3424:	20 91 03 05 	lds	r18, 0x0503	; 0x800503 <_ZN8SdVolume12cacheBuffer_E+0x13>
    3428:	30 91 04 05 	lds	r19, 0x0504	; 0x800504 <_ZN8SdVolume12cacheBuffer_E+0x14>
                           bpb->totalSectors16 : bpb->totalSectors32;
    342c:	21 15       	cp	r18, r1
    342e:	31 05       	cpc	r19, r1
    3430:	21 f0       	breq	.+8      	; 0x343a <_ZN8SdVolume4initEP7Sd2Cardh+0x19e>
    3432:	a9 01       	movw	r20, r18
    3434:	60 e0       	ldi	r22, 0x00	; 0
    3436:	70 e0       	ldi	r23, 0x00	; 0
    3438:	08 c0       	rjmp	.+16     	; 0x344a <_ZN8SdVolume4initEP7Sd2Cardh+0x1ae>
    343a:	40 91 10 05 	lds	r20, 0x0510	; 0x800510 <_ZN8SdVolume12cacheBuffer_E+0x20>
    343e:	50 91 11 05 	lds	r21, 0x0511	; 0x800511 <_ZN8SdVolume12cacheBuffer_E+0x21>
    3442:	60 91 12 05 	lds	r22, 0x0512	; 0x800512 <_ZN8SdVolume12cacheBuffer_E+0x22>
    3446:	70 91 13 05 	lds	r23, 0x0513	; 0x800513 <_ZN8SdVolume12cacheBuffer_E+0x23>
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    344a:	d7 01       	movw	r26, r14
    344c:	c6 01       	movw	r24, r12
    344e:	88 19       	sub	r24, r8
    3450:	99 09       	sbc	r25, r9
    3452:	aa 09       	sbc	r26, r10
    3454:	bb 09       	sbc	r27, r11
    3456:	84 0f       	add	r24, r20
    3458:	95 1f       	adc	r25, r21
    345a:	a6 1f       	adc	r26, r22
    345c:	b7 1f       	adc	r27, r23
    345e:	04 c0       	rjmp	.+8      	; 0x3468 <_ZN8SdVolume4initEP7Sd2Cardh+0x1cc>
    3460:	b6 95       	lsr	r27
    3462:	a7 95       	ror	r26
    3464:	97 95       	ror	r25
    3466:	87 95       	ror	r24
    3468:	ea 95       	dec	r30
    346a:	d2 f7       	brpl	.-12     	; 0x3460 <_ZN8SdVolume4initEP7Sd2Cardh+0x1c4>
    346c:	89 87       	std	Y+9, r24	; 0x09
    346e:	9a 87       	std	Y+10, r25	; 0x0a
    3470:	ab 87       	std	Y+11, r26	; 0x0b
    3472:	bc 87       	std	Y+12, r27	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    3474:	85 3f       	cpi	r24, 0xF5	; 245
    3476:	2f e0       	ldi	r18, 0x0F	; 15
    3478:	92 07       	cpc	r25, r18
    347a:	a1 05       	cpc	r26, r1
    347c:	b1 05       	cpc	r27, r1
    347e:	10 f4       	brcc	.+4      	; 0x3484 <_ZN8SdVolume4initEP7Sd2Cardh+0x1e8>
    fatType_ = 12;
    3480:	8c e0       	ldi	r24, 0x0C	; 12
    3482:	14 c0       	rjmp	.+40     	; 0x34ac <_ZN8SdVolume4initEP7Sd2Cardh+0x210>
  } else if (clusterCount_ < 65525) {
    3484:	85 3f       	cpi	r24, 0xF5	; 245
    3486:	9f 4f       	sbci	r25, 0xFF	; 255
    3488:	a1 05       	cpc	r26, r1
    348a:	b1 05       	cpc	r27, r1
    348c:	10 f4       	brcc	.+4      	; 0x3492 <_ZN8SdVolume4initEP7Sd2Cardh+0x1f6>
    fatType_ = 16;
    348e:	80 e1       	ldi	r24, 0x10	; 16
    3490:	0d c0       	rjmp	.+26     	; 0x34ac <_ZN8SdVolume4initEP7Sd2Cardh+0x210>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    3492:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <_ZN8SdVolume12cacheBuffer_E+0x2c>
    3496:	90 91 1d 05 	lds	r25, 0x051D	; 0x80051d <_ZN8SdVolume12cacheBuffer_E+0x2d>
    349a:	a0 91 1e 05 	lds	r26, 0x051E	; 0x80051e <_ZN8SdVolume12cacheBuffer_E+0x2e>
    349e:	b0 91 1f 05 	lds	r27, 0x051F	; 0x80051f <_ZN8SdVolume12cacheBuffer_E+0x2f>
    34a2:	8a 8f       	std	Y+26, r24	; 0x1a
    34a4:	9b 8f       	std	Y+27, r25	; 0x1b
    34a6:	ac 8f       	std	Y+28, r26	; 0x1c
    34a8:	bd 8f       	std	Y+29, r27	; 0x1d
    fatType_ = 32;
    34aa:	80 e2       	ldi	r24, 0x20	; 32
    34ac:	8f 8b       	std	Y+23, r24	; 0x17
  }
  return true;
    34ae:	81 e0       	ldi	r24, 0x01	; 1
}
    34b0:	df 91       	pop	r29
    34b2:	cf 91       	pop	r28
    34b4:	1f 91       	pop	r17
    34b6:	0f 91       	pop	r16
    34b8:	ff 90       	pop	r15
    34ba:	ef 90       	pop	r14
    34bc:	df 90       	pop	r13
    34be:	cf 90       	pop	r12
    34c0:	bf 90       	pop	r11
    34c2:	af 90       	pop	r10
    34c4:	9f 90       	pop	r9
    34c6:	8f 90       	pop	r8
    34c8:	08 95       	ret

000034ca <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    34ca:	cf 93       	push	r28
  uint8_t sreg = SREG;
    34cc:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    34ce:	f8 94       	cli
  if (!initialized) {
    34d0:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <_ZN8SPIClass11initializedE>
    34d4:	81 11       	cpse	r24, r1
    34d6:	27 c0       	rjmp	.+78     	; 0x3526 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    34d8:	ea e9       	ldi	r30, 0x9A	; 154
    34da:	f0 e0       	ldi	r31, 0x00	; 0
    34dc:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    34de:	e6 e8       	ldi	r30, 0x86	; 134
    34e0:	f0 e0       	ldi	r31, 0x00	; 0
    34e2:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    34e4:	e8 2f       	mov	r30, r24
    34e6:	f0 e0       	ldi	r31, 0x00	; 0
    34e8:	ee 0f       	add	r30, r30
    34ea:	ff 1f       	adc	r31, r31
    34ec:	e8 54       	subi	r30, 0x48	; 72
    34ee:	ff 4f       	sbci	r31, 0xFF	; 255
    34f0:	a5 91       	lpm	r26, Z+
    34f2:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    34f4:	ec 91       	ld	r30, X
    34f6:	e9 23       	and	r30, r25
    34f8:	21 f4       	brne	.+8      	; 0x3502 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    34fa:	61 e0       	ldi	r22, 0x01	; 1
    34fc:	8a e0       	ldi	r24, 0x0A	; 10
    34fe:	0e 94 0b 06 	call	0xc16	; 0xc16 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    3502:	61 e0       	ldi	r22, 0x01	; 1
    3504:	8a e0       	ldi	r24, 0x0A	; 10
    3506:	0e 94 cf 05 	call	0xb9e	; 0xb9e <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    350a:	8c b5       	in	r24, 0x2c	; 44
    350c:	80 61       	ori	r24, 0x10	; 16
    350e:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    3510:	8c b5       	in	r24, 0x2c	; 44
    3512:	80 64       	ori	r24, 0x40	; 64
    3514:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    3516:	61 e0       	ldi	r22, 0x01	; 1
    3518:	8d e0       	ldi	r24, 0x0D	; 13
    351a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <pinMode>
    pinMode(MOSI, OUTPUT);
    351e:	61 e0       	ldi	r22, 0x01	; 1
    3520:	8b e0       	ldi	r24, 0x0B	; 11
    3522:	0e 94 cf 05 	call	0xb9e	; 0xb9e <pinMode>
  }
  initialized++; // reference count
    3526:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <_ZN8SPIClass11initializedE>
    352a:	8f 5f       	subi	r24, 0xFF	; 255
    352c:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    3530:	cf bf       	out	0x3f, r28	; 63
}
    3532:	cf 91       	pop	r28
    3534:	08 95       	ret

00003536 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3536:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    3538:	91 8d       	ldd	r25, Z+25	; 0x19
    353a:	22 8d       	ldd	r18, Z+26	; 0x1a
    353c:	89 2f       	mov	r24, r25
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	80 5c       	subi	r24, 0xC0	; 192
    3542:	9f 4f       	sbci	r25, 0xFF	; 255
    3544:	82 1b       	sub	r24, r18
    3546:	91 09       	sbc	r25, r1
}
    3548:	8f 73       	andi	r24, 0x3F	; 63
    354a:	99 27       	eor	r25, r25
    354c:	08 95       	ret

0000354e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    354e:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3550:	91 8d       	ldd	r25, Z+25	; 0x19
    3552:	82 8d       	ldd	r24, Z+26	; 0x1a
    3554:	98 17       	cp	r25, r24
    3556:	31 f0       	breq	.+12     	; 0x3564 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3558:	82 8d       	ldd	r24, Z+26	; 0x1a
    355a:	e8 0f       	add	r30, r24
    355c:	f1 1d       	adc	r31, r1
    355e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3564:	8f ef       	ldi	r24, 0xFF	; 255
    3566:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3568:	08 95       	ret

0000356a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    356a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    356c:	91 8d       	ldd	r25, Z+25	; 0x19
    356e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3570:	98 17       	cp	r25, r24
    3572:	61 f0       	breq	.+24     	; 0x358c <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3574:	82 8d       	ldd	r24, Z+26	; 0x1a
    3576:	df 01       	movw	r26, r30
    3578:	a8 0f       	add	r26, r24
    357a:	b1 1d       	adc	r27, r1
    357c:	5d 96       	adiw	r26, 0x1d	; 29
    357e:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3580:	92 8d       	ldd	r25, Z+26	; 0x1a
    3582:	9f 5f       	subi	r25, 0xFF	; 255
    3584:	9f 73       	andi	r25, 0x3F	; 63
    3586:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    358c:	8f ef       	ldi	r24, 0xFF	; 255
    358e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3590:	08 95       	ret

00003592 <_ZN14HardwareSerial17availableForWriteEv>:
int HardwareSerial::availableForWrite(void)
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    3592:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3594:	f8 94       	cli
    head = _tx_buffer_head;
    3596:	fc 01       	movw	r30, r24
    3598:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    359a:	44 8d       	ldd	r20, Z+28	; 0x1c
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    359c:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    359e:	25 2f       	mov	r18, r21
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	84 2f       	mov	r24, r20
    35a4:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    35a6:	82 1b       	sub	r24, r18
    35a8:	93 0b       	sbc	r25, r19
    35aa:	54 17       	cp	r21, r20
    35ac:	18 f0       	brcs	.+6      	; 0x35b4 <_ZN14HardwareSerial17availableForWriteEv+0x22>
    35ae:	81 50       	subi	r24, 0x01	; 1
    35b0:	9e 4f       	sbci	r25, 0xFE	; 254
    35b2:	08 95       	ret
  return tail - head - 1;
    35b4:	01 97       	sbiw	r24, 0x01	; 1
}
    35b6:	08 95       	ret

000035b8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    35b8:	85 ec       	ldi	r24, 0xC5	; 197
    35ba:	93 e0       	ldi	r25, 0x03	; 3
    35bc:	89 2b       	or	r24, r25
    35be:	49 f0       	breq	.+18     	; 0x35d2 <_Z14serialEventRunv+0x1a>
    35c0:	80 e0       	ldi	r24, 0x00	; 0
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	89 2b       	or	r24, r25
    35c6:	29 f0       	breq	.+10     	; 0x35d2 <_Z14serialEventRunv+0x1a>
    35c8:	0e 94 c5 03 	call	0x78a	; 0x78a <_Z17Serial0_availablev>
    35cc:	81 11       	cpse	r24, r1
    35ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    35d2:	08 95       	ret

000035d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    35d4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    35d6:	84 8d       	ldd	r24, Z+28	; 0x1c
    35d8:	df 01       	movw	r26, r30
    35da:	a8 0f       	add	r26, r24
    35dc:	b1 1d       	adc	r27, r1
    35de:	a3 5a       	subi	r26, 0xA3	; 163
    35e0:	bf 4f       	sbci	r27, 0xFF	; 255
    35e2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    35e4:	84 8d       	ldd	r24, Z+28	; 0x1c
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	01 96       	adiw	r24, 0x01	; 1
    35ea:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    35ec:	a6 89       	ldd	r26, Z+22	; 0x16
    35ee:	b7 89       	ldd	r27, Z+23	; 0x17
    35f0:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    35f2:	a0 89       	ldd	r26, Z+16	; 0x10
    35f4:	b1 89       	ldd	r27, Z+17	; 0x11
    35f6:	8c 91       	ld	r24, X
    35f8:	83 70       	andi	r24, 0x03	; 3
    35fa:	80 64       	ori	r24, 0x40	; 64
    35fc:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    35fe:	93 8d       	ldd	r25, Z+27	; 0x1b
    3600:	84 8d       	ldd	r24, Z+28	; 0x1c
    3602:	98 13       	cpse	r25, r24
    3604:	06 c0       	rjmp	.+12     	; 0x3612 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x3e>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    3606:	02 88       	ldd	r0, Z+18	; 0x12
    3608:	f3 89       	ldd	r31, Z+19	; 0x13
    360a:	e0 2d       	mov	r30, r0
    360c:	80 81       	ld	r24, Z
    360e:	8f 7d       	andi	r24, 0xDF	; 223
    3610:	80 83       	st	Z, r24
    3612:	08 95       	ret

00003614 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3614:	ef 92       	push	r14
    3616:	ff 92       	push	r15
    3618:	0f 93       	push	r16
    361a:	1f 93       	push	r17
    361c:	cf 93       	push	r28
    361e:	df 93       	push	r29
    3620:	ec 01       	movw	r28, r24
  _written = true;
    3622:	81 e0       	ldi	r24, 0x01	; 1
    3624:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3626:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3628:	8c 8d       	ldd	r24, Y+28	; 0x1c
    362a:	98 13       	cpse	r25, r24
    362c:	05 c0       	rjmp	.+10     	; 0x3638 <_ZN14HardwareSerial5writeEh+0x24>
    362e:	e8 89       	ldd	r30, Y+16	; 0x10
    3630:	f9 89       	ldd	r31, Y+17	; 0x11
    3632:	80 81       	ld	r24, Z
    3634:	85 fd       	sbrc	r24, 5
    3636:	24 c0       	rjmp	.+72     	; 0x3680 <_ZN14HardwareSerial5writeEh+0x6c>
    3638:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    363a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    363c:	10 e0       	ldi	r17, 0x00	; 0
    363e:	0f 5f       	subi	r16, 0xFF	; 255
    3640:	1f 4f       	sbci	r17, 0xFF	; 255
    3642:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3644:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3646:	e8 12       	cpse	r14, r24
    3648:	0c c0       	rjmp	.+24     	; 0x3662 <_ZN14HardwareSerial5writeEh+0x4e>
    if (bit_is_clear(SREG, SREG_I)) {
    364a:	0f b6       	in	r0, 0x3f	; 63
    364c:	07 fc       	sbrc	r0, 7
    364e:	fa cf       	rjmp	.-12     	; 0x3644 <_ZN14HardwareSerial5writeEh+0x30>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3650:	e8 89       	ldd	r30, Y+16	; 0x10
    3652:	f9 89       	ldd	r31, Y+17	; 0x11
    3654:	80 81       	ld	r24, Z
    3656:	85 ff       	sbrs	r24, 5
    3658:	f5 cf       	rjmp	.-22     	; 0x3644 <_ZN14HardwareSerial5writeEh+0x30>
	_tx_udr_empty_irq();
    365a:	ce 01       	movw	r24, r28
    365c:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3660:	f1 cf       	rjmp	.-30     	; 0x3644 <_ZN14HardwareSerial5writeEh+0x30>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3662:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3664:	fe 01       	movw	r30, r28
    3666:	e8 0f       	add	r30, r24
    3668:	f1 1d       	adc	r31, r1
    366a:	e3 5a       	subi	r30, 0xA3	; 163
    366c:	ff 4f       	sbci	r31, 0xFF	; 255
    366e:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3670:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3672:	f8 94       	cli
    _tx_buffer_head = i;
    3674:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    3676:	ea 89       	ldd	r30, Y+18	; 0x12
    3678:	fb 89       	ldd	r31, Y+19	; 0x13
    367a:	80 81       	ld	r24, Z
    367c:	80 62       	ori	r24, 0x20	; 32
    367e:	0a c0       	rjmp	.+20     	; 0x3694 <_ZN14HardwareSerial5writeEh+0x80>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3680:	9f b7       	in	r25, 0x3f	; 63
    3682:	f8 94       	cli
      *_udr = c;
    3684:	ee 89       	ldd	r30, Y+22	; 0x16
    3686:	ff 89       	ldd	r31, Y+23	; 0x17
    3688:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    368a:	e8 89       	ldd	r30, Y+16	; 0x10
    368c:	f9 89       	ldd	r31, Y+17	; 0x11
    368e:	80 81       	ld	r24, Z
    3690:	83 70       	andi	r24, 0x03	; 3
    3692:	80 64       	ori	r24, 0x40	; 64
    3694:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3696:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    3698:	81 e0       	ldi	r24, 0x01	; 1
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	df 91       	pop	r29
    369e:	cf 91       	pop	r28
    36a0:	1f 91       	pop	r17
    36a2:	0f 91       	pop	r16
    36a4:	ff 90       	pop	r15
    36a6:	ef 90       	pop	r14
    36a8:	08 95       	ret

000036aa <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    36aa:	cf 93       	push	r28
    36ac:	df 93       	push	r29
    36ae:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    36b0:	88 8d       	ldd	r24, Y+24	; 0x18
    36b2:	88 23       	and	r24, r24
    36b4:	c9 f0       	breq	.+50     	; 0x36e8 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    36b6:	ea 89       	ldd	r30, Y+18	; 0x12
    36b8:	fb 89       	ldd	r31, Y+19	; 0x13
    36ba:	80 81       	ld	r24, Z
    36bc:	85 fd       	sbrc	r24, 5
    36be:	05 c0       	rjmp	.+10     	; 0x36ca <_ZN14HardwareSerial5flushEv+0x20>
    36c0:	a8 89       	ldd	r26, Y+16	; 0x10
    36c2:	b9 89       	ldd	r27, Y+17	; 0x11
    36c4:	8c 91       	ld	r24, X
    36c6:	86 fd       	sbrc	r24, 6
    36c8:	0f c0       	rjmp	.+30     	; 0x36e8 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    36ca:	0f b6       	in	r0, 0x3f	; 63
    36cc:	07 fc       	sbrc	r0, 7
    36ce:	f5 cf       	rjmp	.-22     	; 0x36ba <_ZN14HardwareSerial5flushEv+0x10>
    36d0:	80 81       	ld	r24, Z
    36d2:	85 ff       	sbrs	r24, 5
    36d4:	f2 cf       	rjmp	.-28     	; 0x36ba <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    36d6:	a8 89       	ldd	r26, Y+16	; 0x10
    36d8:	b9 89       	ldd	r27, Y+17	; 0x11
    36da:	8c 91       	ld	r24, X
    36dc:	85 ff       	sbrs	r24, 5
    36de:	ed cf       	rjmp	.-38     	; 0x36ba <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    36e0:	ce 01       	movw	r24, r28
    36e2:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    36e6:	e7 cf       	rjmp	.-50     	; 0x36b6 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    36e8:	df 91       	pop	r29
    36ea:	cf 91       	pop	r28
    36ec:	08 95       	ret

000036ee <__udivmodsi4>:
    36ee:	a1 e2       	ldi	r26, 0x21	; 33
    36f0:	1a 2e       	mov	r1, r26
    36f2:	aa 1b       	sub	r26, r26
    36f4:	bb 1b       	sub	r27, r27
    36f6:	fd 01       	movw	r30, r26
    36f8:	0d c0       	rjmp	.+26     	; 0x3714 <__udivmodsi4_ep>

000036fa <__udivmodsi4_loop>:
    36fa:	aa 1f       	adc	r26, r26
    36fc:	bb 1f       	adc	r27, r27
    36fe:	ee 1f       	adc	r30, r30
    3700:	ff 1f       	adc	r31, r31
    3702:	a2 17       	cp	r26, r18
    3704:	b3 07       	cpc	r27, r19
    3706:	e4 07       	cpc	r30, r20
    3708:	f5 07       	cpc	r31, r21
    370a:	20 f0       	brcs	.+8      	; 0x3714 <__udivmodsi4_ep>
    370c:	a2 1b       	sub	r26, r18
    370e:	b3 0b       	sbc	r27, r19
    3710:	e4 0b       	sbc	r30, r20
    3712:	f5 0b       	sbc	r31, r21

00003714 <__udivmodsi4_ep>:
    3714:	66 1f       	adc	r22, r22
    3716:	77 1f       	adc	r23, r23
    3718:	88 1f       	adc	r24, r24
    371a:	99 1f       	adc	r25, r25
    371c:	1a 94       	dec	r1
    371e:	69 f7       	brne	.-38     	; 0x36fa <__udivmodsi4_loop>
    3720:	60 95       	com	r22
    3722:	70 95       	com	r23
    3724:	80 95       	com	r24
    3726:	90 95       	com	r25
    3728:	9b 01       	movw	r18, r22
    372a:	ac 01       	movw	r20, r24
    372c:	bd 01       	movw	r22, r26
    372e:	cf 01       	movw	r24, r30
    3730:	08 95       	ret

00003732 <__divmodsi4>:
    3732:	05 2e       	mov	r0, r21
    3734:	97 fb       	bst	r25, 7
    3736:	1e f4       	brtc	.+6      	; 0x373e <__divmodsi4+0xc>
    3738:	00 94       	com	r0
    373a:	0e 94 b0 1b 	call	0x3760	; 0x3760 <__negsi2>
    373e:	57 fd       	sbrc	r21, 7
    3740:	07 d0       	rcall	.+14     	; 0x3750 <__divmodsi4_neg2>
    3742:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__udivmodsi4>
    3746:	07 fc       	sbrc	r0, 7
    3748:	03 d0       	rcall	.+6      	; 0x3750 <__divmodsi4_neg2>
    374a:	4e f4       	brtc	.+18     	; 0x375e <__divmodsi4_exit>
    374c:	0c 94 b0 1b 	jmp	0x3760	; 0x3760 <__negsi2>

00003750 <__divmodsi4_neg2>:
    3750:	50 95       	com	r21
    3752:	40 95       	com	r20
    3754:	30 95       	com	r19
    3756:	21 95       	neg	r18
    3758:	3f 4f       	sbci	r19, 0xFF	; 255
    375a:	4f 4f       	sbci	r20, 0xFF	; 255
    375c:	5f 4f       	sbci	r21, 0xFF	; 255

0000375e <__divmodsi4_exit>:
    375e:	08 95       	ret

00003760 <__negsi2>:
    3760:	90 95       	com	r25
    3762:	80 95       	com	r24
    3764:	70 95       	com	r23
    3766:	61 95       	neg	r22
    3768:	7f 4f       	sbci	r23, 0xFF	; 255
    376a:	8f 4f       	sbci	r24, 0xFF	; 255
    376c:	9f 4f       	sbci	r25, 0xFF	; 255
    376e:	08 95       	ret

00003770 <__muluhisi3>:
    3770:	0e 94 c9 1b 	call	0x3792	; 0x3792 <__umulhisi3>
    3774:	a5 9f       	mul	r26, r21
    3776:	90 0d       	add	r25, r0
    3778:	b4 9f       	mul	r27, r20
    377a:	90 0d       	add	r25, r0
    377c:	a4 9f       	mul	r26, r20
    377e:	80 0d       	add	r24, r0
    3780:	91 1d       	adc	r25, r1
    3782:	11 24       	eor	r1, r1
    3784:	08 95       	ret

00003786 <__tablejump2__>:
    3786:	ee 0f       	add	r30, r30
    3788:	ff 1f       	adc	r31, r31
    378a:	05 90       	lpm	r0, Z+
    378c:	f4 91       	lpm	r31, Z
    378e:	e0 2d       	mov	r30, r0
    3790:	09 94       	ijmp

00003792 <__umulhisi3>:
    3792:	a2 9f       	mul	r26, r18
    3794:	b0 01       	movw	r22, r0
    3796:	b3 9f       	mul	r27, r19
    3798:	c0 01       	movw	r24, r0
    379a:	a3 9f       	mul	r26, r19
    379c:	70 0d       	add	r23, r0
    379e:	81 1d       	adc	r24, r1
    37a0:	11 24       	eor	r1, r1
    37a2:	91 1d       	adc	r25, r1
    37a4:	b2 9f       	mul	r27, r18
    37a6:	70 0d       	add	r23, r0
    37a8:	81 1d       	adc	r24, r1
    37aa:	11 24       	eor	r1, r1
    37ac:	91 1d       	adc	r25, r1
    37ae:	08 95       	ret

000037b0 <malloc>:
    37b0:	0f 93       	push	r16
    37b2:	1f 93       	push	r17
    37b4:	cf 93       	push	r28
    37b6:	df 93       	push	r29
    37b8:	82 30       	cpi	r24, 0x02	; 2
    37ba:	91 05       	cpc	r25, r1
    37bc:	10 f4       	brcc	.+4      	; 0x37c2 <malloc+0x12>
    37be:	82 e0       	ldi	r24, 0x02	; 2
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	e0 91 f6 06 	lds	r30, 0x06F6	; 0x8006f6 <__flp>
    37c6:	f0 91 f7 06 	lds	r31, 0x06F7	; 0x8006f7 <__flp+0x1>
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	a0 e0       	ldi	r26, 0x00	; 0
    37d0:	b0 e0       	ldi	r27, 0x00	; 0
    37d2:	30 97       	sbiw	r30, 0x00	; 0
    37d4:	19 f1       	breq	.+70     	; 0x381c <malloc+0x6c>
    37d6:	40 81       	ld	r20, Z
    37d8:	51 81       	ldd	r21, Z+1	; 0x01
    37da:	02 81       	ldd	r16, Z+2	; 0x02
    37dc:	13 81       	ldd	r17, Z+3	; 0x03
    37de:	48 17       	cp	r20, r24
    37e0:	59 07       	cpc	r21, r25
    37e2:	c8 f0       	brcs	.+50     	; 0x3816 <malloc+0x66>
    37e4:	84 17       	cp	r24, r20
    37e6:	95 07       	cpc	r25, r21
    37e8:	69 f4       	brne	.+26     	; 0x3804 <malloc+0x54>
    37ea:	10 97       	sbiw	r26, 0x00	; 0
    37ec:	31 f0       	breq	.+12     	; 0x37fa <malloc+0x4a>
    37ee:	12 96       	adiw	r26, 0x02	; 2
    37f0:	0c 93       	st	X, r16
    37f2:	12 97       	sbiw	r26, 0x02	; 2
    37f4:	13 96       	adiw	r26, 0x03	; 3
    37f6:	1c 93       	st	X, r17
    37f8:	27 c0       	rjmp	.+78     	; 0x3848 <malloc+0x98>
    37fa:	00 93 f6 06 	sts	0x06F6, r16	; 0x8006f6 <__flp>
    37fe:	10 93 f7 06 	sts	0x06F7, r17	; 0x8006f7 <__flp+0x1>
    3802:	22 c0       	rjmp	.+68     	; 0x3848 <malloc+0x98>
    3804:	21 15       	cp	r18, r1
    3806:	31 05       	cpc	r19, r1
    3808:	19 f0       	breq	.+6      	; 0x3810 <malloc+0x60>
    380a:	42 17       	cp	r20, r18
    380c:	53 07       	cpc	r21, r19
    380e:	18 f4       	brcc	.+6      	; 0x3816 <malloc+0x66>
    3810:	9a 01       	movw	r18, r20
    3812:	bd 01       	movw	r22, r26
    3814:	ef 01       	movw	r28, r30
    3816:	df 01       	movw	r26, r30
    3818:	f8 01       	movw	r30, r16
    381a:	db cf       	rjmp	.-74     	; 0x37d2 <malloc+0x22>
    381c:	21 15       	cp	r18, r1
    381e:	31 05       	cpc	r19, r1
    3820:	f9 f0       	breq	.+62     	; 0x3860 <malloc+0xb0>
    3822:	28 1b       	sub	r18, r24
    3824:	39 0b       	sbc	r19, r25
    3826:	24 30       	cpi	r18, 0x04	; 4
    3828:	31 05       	cpc	r19, r1
    382a:	80 f4       	brcc	.+32     	; 0x384c <malloc+0x9c>
    382c:	8a 81       	ldd	r24, Y+2	; 0x02
    382e:	9b 81       	ldd	r25, Y+3	; 0x03
    3830:	61 15       	cp	r22, r1
    3832:	71 05       	cpc	r23, r1
    3834:	21 f0       	breq	.+8      	; 0x383e <malloc+0x8e>
    3836:	fb 01       	movw	r30, r22
    3838:	93 83       	std	Z+3, r25	; 0x03
    383a:	82 83       	std	Z+2, r24	; 0x02
    383c:	04 c0       	rjmp	.+8      	; 0x3846 <malloc+0x96>
    383e:	90 93 f7 06 	sts	0x06F7, r25	; 0x8006f7 <__flp+0x1>
    3842:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <__flp>
    3846:	fe 01       	movw	r30, r28
    3848:	32 96       	adiw	r30, 0x02	; 2
    384a:	44 c0       	rjmp	.+136    	; 0x38d4 <malloc+0x124>
    384c:	fe 01       	movw	r30, r28
    384e:	e2 0f       	add	r30, r18
    3850:	f3 1f       	adc	r31, r19
    3852:	81 93       	st	Z+, r24
    3854:	91 93       	st	Z+, r25
    3856:	22 50       	subi	r18, 0x02	; 2
    3858:	31 09       	sbc	r19, r1
    385a:	39 83       	std	Y+1, r19	; 0x01
    385c:	28 83       	st	Y, r18
    385e:	3a c0       	rjmp	.+116    	; 0x38d4 <malloc+0x124>
    3860:	20 91 f4 06 	lds	r18, 0x06F4	; 0x8006f4 <__brkval>
    3864:	30 91 f5 06 	lds	r19, 0x06F5	; 0x8006f5 <__brkval+0x1>
    3868:	23 2b       	or	r18, r19
    386a:	41 f4       	brne	.+16     	; 0x387c <malloc+0xcc>
    386c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3870:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3874:	30 93 f5 06 	sts	0x06F5, r19	; 0x8006f5 <__brkval+0x1>
    3878:	20 93 f4 06 	sts	0x06F4, r18	; 0x8006f4 <__brkval>
    387c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3880:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3884:	21 15       	cp	r18, r1
    3886:	31 05       	cpc	r19, r1
    3888:	41 f4       	brne	.+16     	; 0x389a <malloc+0xea>
    388a:	2d b7       	in	r18, 0x3d	; 61
    388c:	3e b7       	in	r19, 0x3e	; 62
    388e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3892:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3896:	24 1b       	sub	r18, r20
    3898:	35 0b       	sbc	r19, r21
    389a:	e0 91 f4 06 	lds	r30, 0x06F4	; 0x8006f4 <__brkval>
    389e:	f0 91 f5 06 	lds	r31, 0x06F5	; 0x8006f5 <__brkval+0x1>
    38a2:	e2 17       	cp	r30, r18
    38a4:	f3 07       	cpc	r31, r19
    38a6:	a0 f4       	brcc	.+40     	; 0x38d0 <malloc+0x120>
    38a8:	2e 1b       	sub	r18, r30
    38aa:	3f 0b       	sbc	r19, r31
    38ac:	28 17       	cp	r18, r24
    38ae:	39 07       	cpc	r19, r25
    38b0:	78 f0       	brcs	.+30     	; 0x38d0 <malloc+0x120>
    38b2:	ac 01       	movw	r20, r24
    38b4:	4e 5f       	subi	r20, 0xFE	; 254
    38b6:	5f 4f       	sbci	r21, 0xFF	; 255
    38b8:	24 17       	cp	r18, r20
    38ba:	35 07       	cpc	r19, r21
    38bc:	48 f0       	brcs	.+18     	; 0x38d0 <malloc+0x120>
    38be:	4e 0f       	add	r20, r30
    38c0:	5f 1f       	adc	r21, r31
    38c2:	50 93 f5 06 	sts	0x06F5, r21	; 0x8006f5 <__brkval+0x1>
    38c6:	40 93 f4 06 	sts	0x06F4, r20	; 0x8006f4 <__brkval>
    38ca:	81 93       	st	Z+, r24
    38cc:	91 93       	st	Z+, r25
    38ce:	02 c0       	rjmp	.+4      	; 0x38d4 <malloc+0x124>
    38d0:	e0 e0       	ldi	r30, 0x00	; 0
    38d2:	f0 e0       	ldi	r31, 0x00	; 0
    38d4:	cf 01       	movw	r24, r30
    38d6:	df 91       	pop	r29
    38d8:	cf 91       	pop	r28
    38da:	1f 91       	pop	r17
    38dc:	0f 91       	pop	r16
    38de:	08 95       	ret

000038e0 <free>:
    38e0:	cf 93       	push	r28
    38e2:	df 93       	push	r29
    38e4:	00 97       	sbiw	r24, 0x00	; 0
    38e6:	09 f4       	brne	.+2      	; 0x38ea <free+0xa>
    38e8:	81 c0       	rjmp	.+258    	; 0x39ec <free+0x10c>
    38ea:	fc 01       	movw	r30, r24
    38ec:	32 97       	sbiw	r30, 0x02	; 2
    38ee:	13 82       	std	Z+3, r1	; 0x03
    38f0:	12 82       	std	Z+2, r1	; 0x02
    38f2:	a0 91 f6 06 	lds	r26, 0x06F6	; 0x8006f6 <__flp>
    38f6:	b0 91 f7 06 	lds	r27, 0x06F7	; 0x8006f7 <__flp+0x1>
    38fa:	10 97       	sbiw	r26, 0x00	; 0
    38fc:	81 f4       	brne	.+32     	; 0x391e <free+0x3e>
    38fe:	20 81       	ld	r18, Z
    3900:	31 81       	ldd	r19, Z+1	; 0x01
    3902:	82 0f       	add	r24, r18
    3904:	93 1f       	adc	r25, r19
    3906:	20 91 f4 06 	lds	r18, 0x06F4	; 0x8006f4 <__brkval>
    390a:	30 91 f5 06 	lds	r19, 0x06F5	; 0x8006f5 <__brkval+0x1>
    390e:	28 17       	cp	r18, r24
    3910:	39 07       	cpc	r19, r25
    3912:	51 f5       	brne	.+84     	; 0x3968 <free+0x88>
    3914:	f0 93 f5 06 	sts	0x06F5, r31	; 0x8006f5 <__brkval+0x1>
    3918:	e0 93 f4 06 	sts	0x06F4, r30	; 0x8006f4 <__brkval>
    391c:	67 c0       	rjmp	.+206    	; 0x39ec <free+0x10c>
    391e:	ed 01       	movw	r28, r26
    3920:	20 e0       	ldi	r18, 0x00	; 0
    3922:	30 e0       	ldi	r19, 0x00	; 0
    3924:	ce 17       	cp	r28, r30
    3926:	df 07       	cpc	r29, r31
    3928:	40 f4       	brcc	.+16     	; 0x393a <free+0x5a>
    392a:	4a 81       	ldd	r20, Y+2	; 0x02
    392c:	5b 81       	ldd	r21, Y+3	; 0x03
    392e:	9e 01       	movw	r18, r28
    3930:	41 15       	cp	r20, r1
    3932:	51 05       	cpc	r21, r1
    3934:	f1 f0       	breq	.+60     	; 0x3972 <free+0x92>
    3936:	ea 01       	movw	r28, r20
    3938:	f5 cf       	rjmp	.-22     	; 0x3924 <free+0x44>
    393a:	d3 83       	std	Z+3, r29	; 0x03
    393c:	c2 83       	std	Z+2, r28	; 0x02
    393e:	40 81       	ld	r20, Z
    3940:	51 81       	ldd	r21, Z+1	; 0x01
    3942:	84 0f       	add	r24, r20
    3944:	95 1f       	adc	r25, r21
    3946:	c8 17       	cp	r28, r24
    3948:	d9 07       	cpc	r29, r25
    394a:	59 f4       	brne	.+22     	; 0x3962 <free+0x82>
    394c:	88 81       	ld	r24, Y
    394e:	99 81       	ldd	r25, Y+1	; 0x01
    3950:	84 0f       	add	r24, r20
    3952:	95 1f       	adc	r25, r21
    3954:	02 96       	adiw	r24, 0x02	; 2
    3956:	91 83       	std	Z+1, r25	; 0x01
    3958:	80 83       	st	Z, r24
    395a:	8a 81       	ldd	r24, Y+2	; 0x02
    395c:	9b 81       	ldd	r25, Y+3	; 0x03
    395e:	93 83       	std	Z+3, r25	; 0x03
    3960:	82 83       	std	Z+2, r24	; 0x02
    3962:	21 15       	cp	r18, r1
    3964:	31 05       	cpc	r19, r1
    3966:	29 f4       	brne	.+10     	; 0x3972 <free+0x92>
    3968:	f0 93 f7 06 	sts	0x06F7, r31	; 0x8006f7 <__flp+0x1>
    396c:	e0 93 f6 06 	sts	0x06F6, r30	; 0x8006f6 <__flp>
    3970:	3d c0       	rjmp	.+122    	; 0x39ec <free+0x10c>
    3972:	e9 01       	movw	r28, r18
    3974:	fb 83       	std	Y+3, r31	; 0x03
    3976:	ea 83       	std	Y+2, r30	; 0x02
    3978:	49 91       	ld	r20, Y+
    397a:	59 91       	ld	r21, Y+
    397c:	c4 0f       	add	r28, r20
    397e:	d5 1f       	adc	r29, r21
    3980:	ec 17       	cp	r30, r28
    3982:	fd 07       	cpc	r31, r29
    3984:	61 f4       	brne	.+24     	; 0x399e <free+0xbe>
    3986:	80 81       	ld	r24, Z
    3988:	91 81       	ldd	r25, Z+1	; 0x01
    398a:	84 0f       	add	r24, r20
    398c:	95 1f       	adc	r25, r21
    398e:	02 96       	adiw	r24, 0x02	; 2
    3990:	e9 01       	movw	r28, r18
    3992:	99 83       	std	Y+1, r25	; 0x01
    3994:	88 83       	st	Y, r24
    3996:	82 81       	ldd	r24, Z+2	; 0x02
    3998:	93 81       	ldd	r25, Z+3	; 0x03
    399a:	9b 83       	std	Y+3, r25	; 0x03
    399c:	8a 83       	std	Y+2, r24	; 0x02
    399e:	e0 e0       	ldi	r30, 0x00	; 0
    39a0:	f0 e0       	ldi	r31, 0x00	; 0
    39a2:	12 96       	adiw	r26, 0x02	; 2
    39a4:	8d 91       	ld	r24, X+
    39a6:	9c 91       	ld	r25, X
    39a8:	13 97       	sbiw	r26, 0x03	; 3
    39aa:	00 97       	sbiw	r24, 0x00	; 0
    39ac:	19 f0       	breq	.+6      	; 0x39b4 <free+0xd4>
    39ae:	fd 01       	movw	r30, r26
    39b0:	dc 01       	movw	r26, r24
    39b2:	f7 cf       	rjmp	.-18     	; 0x39a2 <free+0xc2>
    39b4:	8d 91       	ld	r24, X+
    39b6:	9c 91       	ld	r25, X
    39b8:	11 97       	sbiw	r26, 0x01	; 1
    39ba:	9d 01       	movw	r18, r26
    39bc:	2e 5f       	subi	r18, 0xFE	; 254
    39be:	3f 4f       	sbci	r19, 0xFF	; 255
    39c0:	82 0f       	add	r24, r18
    39c2:	93 1f       	adc	r25, r19
    39c4:	20 91 f4 06 	lds	r18, 0x06F4	; 0x8006f4 <__brkval>
    39c8:	30 91 f5 06 	lds	r19, 0x06F5	; 0x8006f5 <__brkval+0x1>
    39cc:	28 17       	cp	r18, r24
    39ce:	39 07       	cpc	r19, r25
    39d0:	69 f4       	brne	.+26     	; 0x39ec <free+0x10c>
    39d2:	30 97       	sbiw	r30, 0x00	; 0
    39d4:	29 f4       	brne	.+10     	; 0x39e0 <free+0x100>
    39d6:	10 92 f7 06 	sts	0x06F7, r1	; 0x8006f7 <__flp+0x1>
    39da:	10 92 f6 06 	sts	0x06F6, r1	; 0x8006f6 <__flp>
    39de:	02 c0       	rjmp	.+4      	; 0x39e4 <free+0x104>
    39e0:	13 82       	std	Z+3, r1	; 0x03
    39e2:	12 82       	std	Z+2, r1	; 0x02
    39e4:	b0 93 f5 06 	sts	0x06F5, r27	; 0x8006f5 <__brkval+0x1>
    39e8:	a0 93 f4 06 	sts	0x06F4, r26	; 0x8006f4 <__brkval>
    39ec:	df 91       	pop	r29
    39ee:	cf 91       	pop	r28
    39f0:	08 95       	ret

000039f2 <realloc>:
    39f2:	a0 e0       	ldi	r26, 0x00	; 0
    39f4:	b0 e0       	ldi	r27, 0x00	; 0
    39f6:	ef ef       	ldi	r30, 0xFF	; 255
    39f8:	fc e1       	ldi	r31, 0x1C	; 28
    39fa:	0c 94 fa 1d 	jmp	0x3bf4	; 0x3bf4 <__prologue_saves__+0x8>
    39fe:	ec 01       	movw	r28, r24
    3a00:	00 97       	sbiw	r24, 0x00	; 0
    3a02:	21 f4       	brne	.+8      	; 0x3a0c <realloc+0x1a>
    3a04:	cb 01       	movw	r24, r22
    3a06:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <malloc>
    3a0a:	b4 c0       	rjmp	.+360    	; 0x3b74 <realloc+0x182>
    3a0c:	fc 01       	movw	r30, r24
    3a0e:	e6 0f       	add	r30, r22
    3a10:	f7 1f       	adc	r31, r23
    3a12:	9c 01       	movw	r18, r24
    3a14:	22 50       	subi	r18, 0x02	; 2
    3a16:	31 09       	sbc	r19, r1
    3a18:	e2 17       	cp	r30, r18
    3a1a:	f3 07       	cpc	r31, r19
    3a1c:	08 f4       	brcc	.+2      	; 0x3a20 <realloc+0x2e>
    3a1e:	a8 c0       	rjmp	.+336    	; 0x3b70 <realloc+0x17e>
    3a20:	d9 01       	movw	r26, r18
    3a22:	0d 91       	ld	r16, X+
    3a24:	1c 91       	ld	r17, X
    3a26:	11 97       	sbiw	r26, 0x01	; 1
    3a28:	06 17       	cp	r16, r22
    3a2a:	17 07       	cpc	r17, r23
    3a2c:	b0 f0       	brcs	.+44     	; 0x3a5a <realloc+0x68>
    3a2e:	05 30       	cpi	r16, 0x05	; 5
    3a30:	11 05       	cpc	r17, r1
    3a32:	08 f4       	brcc	.+2      	; 0x3a36 <realloc+0x44>
    3a34:	9b c0       	rjmp	.+310    	; 0x3b6c <realloc+0x17a>
    3a36:	c8 01       	movw	r24, r16
    3a38:	04 97       	sbiw	r24, 0x04	; 4
    3a3a:	86 17       	cp	r24, r22
    3a3c:	97 07       	cpc	r25, r23
    3a3e:	08 f4       	brcc	.+2      	; 0x3a42 <realloc+0x50>
    3a40:	95 c0       	rjmp	.+298    	; 0x3b6c <realloc+0x17a>
    3a42:	02 50       	subi	r16, 0x02	; 2
    3a44:	11 09       	sbc	r17, r1
    3a46:	06 1b       	sub	r16, r22
    3a48:	17 0b       	sbc	r17, r23
    3a4a:	01 93       	st	Z+, r16
    3a4c:	11 93       	st	Z+, r17
    3a4e:	6d 93       	st	X+, r22
    3a50:	7c 93       	st	X, r23
    3a52:	cf 01       	movw	r24, r30
    3a54:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <free>
    3a58:	89 c0       	rjmp	.+274    	; 0x3b6c <realloc+0x17a>
    3a5a:	5b 01       	movw	r10, r22
    3a5c:	a0 1a       	sub	r10, r16
    3a5e:	b1 0a       	sbc	r11, r17
    3a60:	4c 01       	movw	r8, r24
    3a62:	80 0e       	add	r8, r16
    3a64:	91 1e       	adc	r9, r17
    3a66:	a0 91 f6 06 	lds	r26, 0x06F6	; 0x8006f6 <__flp>
    3a6a:	b0 91 f7 06 	lds	r27, 0x06F7	; 0x8006f7 <__flp+0x1>
    3a6e:	61 2c       	mov	r6, r1
    3a70:	71 2c       	mov	r7, r1
    3a72:	e1 2c       	mov	r14, r1
    3a74:	f1 2c       	mov	r15, r1
    3a76:	10 97       	sbiw	r26, 0x00	; 0
    3a78:	09 f4       	brne	.+2      	; 0x3a7c <realloc+0x8a>
    3a7a:	46 c0       	rjmp	.+140    	; 0x3b08 <realloc+0x116>
    3a7c:	8d 91       	ld	r24, X+
    3a7e:	9c 91       	ld	r25, X
    3a80:	11 97       	sbiw	r26, 0x01	; 1
    3a82:	a8 15       	cp	r26, r8
    3a84:	b9 05       	cpc	r27, r9
    3a86:	b1 f5       	brne	.+108    	; 0x3af4 <realloc+0x102>
    3a88:	6c 01       	movw	r12, r24
    3a8a:	42 e0       	ldi	r20, 0x02	; 2
    3a8c:	c4 0e       	add	r12, r20
    3a8e:	d1 1c       	adc	r13, r1
    3a90:	ca 14       	cp	r12, r10
    3a92:	db 04       	cpc	r13, r11
    3a94:	78 f1       	brcs	.+94     	; 0x3af4 <realloc+0x102>
    3a96:	4c 01       	movw	r8, r24
    3a98:	8a 18       	sub	r8, r10
    3a9a:	9b 08       	sbc	r9, r11
    3a9c:	64 01       	movw	r12, r8
    3a9e:	42 e0       	ldi	r20, 0x02	; 2
    3aa0:	c4 0e       	add	r12, r20
    3aa2:	d1 1c       	adc	r13, r1
    3aa4:	12 96       	adiw	r26, 0x02	; 2
    3aa6:	bc 90       	ld	r11, X
    3aa8:	12 97       	sbiw	r26, 0x02	; 2
    3aaa:	13 96       	adiw	r26, 0x03	; 3
    3aac:	ac 91       	ld	r26, X
    3aae:	b5 e0       	ldi	r27, 0x05	; 5
    3ab0:	cb 16       	cp	r12, r27
    3ab2:	d1 04       	cpc	r13, r1
    3ab4:	40 f0       	brcs	.+16     	; 0x3ac6 <realloc+0xd4>
    3ab6:	b2 82       	std	Z+2, r11	; 0x02
    3ab8:	a3 83       	std	Z+3, r26	; 0x03
    3aba:	91 82       	std	Z+1, r9	; 0x01
    3abc:	80 82       	st	Z, r8
    3abe:	d9 01       	movw	r26, r18
    3ac0:	6d 93       	st	X+, r22
    3ac2:	7c 93       	st	X, r23
    3ac4:	09 c0       	rjmp	.+18     	; 0x3ad8 <realloc+0xe6>
    3ac6:	0e 5f       	subi	r16, 0xFE	; 254
    3ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    3aca:	80 0f       	add	r24, r16
    3acc:	91 1f       	adc	r25, r17
    3ace:	f9 01       	movw	r30, r18
    3ad0:	91 83       	std	Z+1, r25	; 0x01
    3ad2:	80 83       	st	Z, r24
    3ad4:	eb 2d       	mov	r30, r11
    3ad6:	fa 2f       	mov	r31, r26
    3ad8:	e1 14       	cp	r14, r1
    3ada:	f1 04       	cpc	r15, r1
    3adc:	31 f0       	breq	.+12     	; 0x3aea <realloc+0xf8>
    3ade:	d7 01       	movw	r26, r14
    3ae0:	13 96       	adiw	r26, 0x03	; 3
    3ae2:	fc 93       	st	X, r31
    3ae4:	ee 93       	st	-X, r30
    3ae6:	12 97       	sbiw	r26, 0x02	; 2
    3ae8:	41 c0       	rjmp	.+130    	; 0x3b6c <realloc+0x17a>
    3aea:	f0 93 f7 06 	sts	0x06F7, r31	; 0x8006f7 <__flp+0x1>
    3aee:	e0 93 f6 06 	sts	0x06F6, r30	; 0x8006f6 <__flp>
    3af2:	3c c0       	rjmp	.+120    	; 0x3b6c <realloc+0x17a>
    3af4:	68 16       	cp	r6, r24
    3af6:	79 06       	cpc	r7, r25
    3af8:	08 f4       	brcc	.+2      	; 0x3afc <realloc+0x10a>
    3afa:	3c 01       	movw	r6, r24
    3afc:	7d 01       	movw	r14, r26
    3afe:	12 96       	adiw	r26, 0x02	; 2
    3b00:	0d 90       	ld	r0, X+
    3b02:	bc 91       	ld	r27, X
    3b04:	a0 2d       	mov	r26, r0
    3b06:	b7 cf       	rjmp	.-146    	; 0x3a76 <realloc+0x84>
    3b08:	80 91 f4 06 	lds	r24, 0x06F4	; 0x8006f4 <__brkval>
    3b0c:	90 91 f5 06 	lds	r25, 0x06F5	; 0x8006f5 <__brkval+0x1>
    3b10:	88 16       	cp	r8, r24
    3b12:	99 06       	cpc	r9, r25
    3b14:	e1 f4       	brne	.+56     	; 0x3b4e <realloc+0x15c>
    3b16:	66 16       	cp	r6, r22
    3b18:	77 06       	cpc	r7, r23
    3b1a:	c8 f4       	brcc	.+50     	; 0x3b4e <realloc+0x15c>
    3b1c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3b20:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    3b24:	00 97       	sbiw	r24, 0x00	; 0
    3b26:	41 f4       	brne	.+16     	; 0x3b38 <realloc+0x146>
    3b28:	8d b7       	in	r24, 0x3d	; 61
    3b2a:	9e b7       	in	r25, 0x3e	; 62
    3b2c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3b30:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3b34:	84 1b       	sub	r24, r20
    3b36:	95 0b       	sbc	r25, r21
    3b38:	e8 17       	cp	r30, r24
    3b3a:	f9 07       	cpc	r31, r25
    3b3c:	c8 f4       	brcc	.+50     	; 0x3b70 <realloc+0x17e>
    3b3e:	f0 93 f5 06 	sts	0x06F5, r31	; 0x8006f5 <__brkval+0x1>
    3b42:	e0 93 f4 06 	sts	0x06F4, r30	; 0x8006f4 <__brkval>
    3b46:	f9 01       	movw	r30, r18
    3b48:	71 83       	std	Z+1, r23	; 0x01
    3b4a:	60 83       	st	Z, r22
    3b4c:	0f c0       	rjmp	.+30     	; 0x3b6c <realloc+0x17a>
    3b4e:	cb 01       	movw	r24, r22
    3b50:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <malloc>
    3b54:	7c 01       	movw	r14, r24
    3b56:	00 97       	sbiw	r24, 0x00	; 0
    3b58:	59 f0       	breq	.+22     	; 0x3b70 <realloc+0x17e>
    3b5a:	a8 01       	movw	r20, r16
    3b5c:	be 01       	movw	r22, r28
    3b5e:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <memcpy>
    3b62:	ce 01       	movw	r24, r28
    3b64:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <free>
    3b68:	c7 01       	movw	r24, r14
    3b6a:	04 c0       	rjmp	.+8      	; 0x3b74 <realloc+0x182>
    3b6c:	ce 01       	movw	r24, r28
    3b6e:	02 c0       	rjmp	.+4      	; 0x3b74 <realloc+0x182>
    3b70:	80 e0       	ldi	r24, 0x00	; 0
    3b72:	90 e0       	ldi	r25, 0x00	; 0
    3b74:	cd b7       	in	r28, 0x3d	; 61
    3b76:	de b7       	in	r29, 0x3e	; 62
    3b78:	ee e0       	ldi	r30, 0x0E	; 14
    3b7a:	0c 94 16 1e 	jmp	0x3c2c	; 0x3c2c <__epilogue_restores__+0x8>

00003b7e <memcmp>:
    3b7e:	fb 01       	movw	r30, r22
    3b80:	dc 01       	movw	r26, r24
    3b82:	04 c0       	rjmp	.+8      	; 0x3b8c <memcmp+0xe>
    3b84:	8d 91       	ld	r24, X+
    3b86:	01 90       	ld	r0, Z+
    3b88:	80 19       	sub	r24, r0
    3b8a:	21 f4       	brne	.+8      	; 0x3b94 <memcmp+0x16>
    3b8c:	41 50       	subi	r20, 0x01	; 1
    3b8e:	50 40       	sbci	r21, 0x00	; 0
    3b90:	c8 f7       	brcc	.-14     	; 0x3b84 <memcmp+0x6>
    3b92:	88 1b       	sub	r24, r24
    3b94:	99 0b       	sbc	r25, r25
    3b96:	08 95       	ret

00003b98 <memcpy>:
    3b98:	fb 01       	movw	r30, r22
    3b9a:	dc 01       	movw	r26, r24
    3b9c:	02 c0       	rjmp	.+4      	; 0x3ba2 <memcpy+0xa>
    3b9e:	01 90       	ld	r0, Z+
    3ba0:	0d 92       	st	X+, r0
    3ba2:	41 50       	subi	r20, 0x01	; 1
    3ba4:	50 40       	sbci	r21, 0x00	; 0
    3ba6:	d8 f7       	brcc	.-10     	; 0x3b9e <memcpy+0x6>
    3ba8:	08 95       	ret

00003baa <strchr>:
    3baa:	fc 01       	movw	r30, r24
    3bac:	81 91       	ld	r24, Z+
    3bae:	86 17       	cp	r24, r22
    3bb0:	21 f0       	breq	.+8      	; 0x3bba <strchr+0x10>
    3bb2:	88 23       	and	r24, r24
    3bb4:	d9 f7       	brne	.-10     	; 0x3bac <strchr+0x2>
    3bb6:	99 27       	eor	r25, r25
    3bb8:	08 95       	ret
    3bba:	31 97       	sbiw	r30, 0x01	; 1
    3bbc:	cf 01       	movw	r24, r30
    3bbe:	08 95       	ret

00003bc0 <strcpy>:
    3bc0:	fb 01       	movw	r30, r22
    3bc2:	dc 01       	movw	r26, r24
    3bc4:	01 90       	ld	r0, Z+
    3bc6:	0d 92       	st	X+, r0
    3bc8:	00 20       	and	r0, r0
    3bca:	e1 f7       	brne	.-8      	; 0x3bc4 <strcpy+0x4>
    3bcc:	08 95       	ret

00003bce <strncpy>:
    3bce:	fb 01       	movw	r30, r22
    3bd0:	dc 01       	movw	r26, r24
    3bd2:	41 50       	subi	r20, 0x01	; 1
    3bd4:	50 40       	sbci	r21, 0x00	; 0
    3bd6:	48 f0       	brcs	.+18     	; 0x3bea <strncpy+0x1c>
    3bd8:	01 90       	ld	r0, Z+
    3bda:	0d 92       	st	X+, r0
    3bdc:	00 20       	and	r0, r0
    3bde:	c9 f7       	brne	.-14     	; 0x3bd2 <strncpy+0x4>
    3be0:	01 c0       	rjmp	.+2      	; 0x3be4 <strncpy+0x16>
    3be2:	1d 92       	st	X+, r1
    3be4:	41 50       	subi	r20, 0x01	; 1
    3be6:	50 40       	sbci	r21, 0x00	; 0
    3be8:	e0 f7       	brcc	.-8      	; 0x3be2 <strncpy+0x14>
    3bea:	08 95       	ret

00003bec <__prologue_saves__>:
    3bec:	2f 92       	push	r2
    3bee:	3f 92       	push	r3
    3bf0:	4f 92       	push	r4
    3bf2:	5f 92       	push	r5
    3bf4:	6f 92       	push	r6
    3bf6:	7f 92       	push	r7
    3bf8:	8f 92       	push	r8
    3bfa:	9f 92       	push	r9
    3bfc:	af 92       	push	r10
    3bfe:	bf 92       	push	r11
    3c00:	cf 92       	push	r12
    3c02:	df 92       	push	r13
    3c04:	ef 92       	push	r14
    3c06:	ff 92       	push	r15
    3c08:	0f 93       	push	r16
    3c0a:	1f 93       	push	r17
    3c0c:	cf 93       	push	r28
    3c0e:	df 93       	push	r29
    3c10:	cd b7       	in	r28, 0x3d	; 61
    3c12:	de b7       	in	r29, 0x3e	; 62
    3c14:	ca 1b       	sub	r28, r26
    3c16:	db 0b       	sbc	r29, r27
    3c18:	0f b6       	in	r0, 0x3f	; 63
    3c1a:	f8 94       	cli
    3c1c:	de bf       	out	0x3e, r29	; 62
    3c1e:	0f be       	out	0x3f, r0	; 63
    3c20:	cd bf       	out	0x3d, r28	; 61
    3c22:	09 94       	ijmp

00003c24 <__epilogue_restores__>:
    3c24:	2a 88       	ldd	r2, Y+18	; 0x12
    3c26:	39 88       	ldd	r3, Y+17	; 0x11
    3c28:	48 88       	ldd	r4, Y+16	; 0x10
    3c2a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c2c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c2e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c30:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c32:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c34:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c36:	b9 84       	ldd	r11, Y+9	; 0x09
    3c38:	c8 84       	ldd	r12, Y+8	; 0x08
    3c3a:	df 80       	ldd	r13, Y+7	; 0x07
    3c3c:	ee 80       	ldd	r14, Y+6	; 0x06
    3c3e:	fd 80       	ldd	r15, Y+5	; 0x05
    3c40:	0c 81       	ldd	r16, Y+4	; 0x04
    3c42:	1b 81       	ldd	r17, Y+3	; 0x03
    3c44:	aa 81       	ldd	r26, Y+2	; 0x02
    3c46:	b9 81       	ldd	r27, Y+1	; 0x01
    3c48:	ce 0f       	add	r28, r30
    3c4a:	d1 1d       	adc	r29, r1
    3c4c:	0f b6       	in	r0, 0x3f	; 63
    3c4e:	f8 94       	cli
    3c50:	de bf       	out	0x3e, r29	; 62
    3c52:	0f be       	out	0x3f, r0	; 63
    3c54:	cd bf       	out	0x3d, r28	; 61
    3c56:	ed 01       	movw	r28, r26
    3c58:	08 95       	ret

00003c5a <_exit>:
    3c5a:	f8 94       	cli

00003c5c <__stop_program>:
    3c5c:	ff cf       	rjmp	.-2      	; 0x3c5c <__stop_program>
