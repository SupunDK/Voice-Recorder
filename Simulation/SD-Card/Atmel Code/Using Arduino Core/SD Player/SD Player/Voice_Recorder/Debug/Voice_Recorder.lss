
Voice_Recorder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000134  00800100  00003c84  00003d18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000051a  00800234  00800234  00003e4c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003e4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003e7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009e8  00000000  00000000  00003ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000223fd  00000000  00000000  000048a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000475b  00000000  00000000  00026ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000061de  00000000  00000000  0002b3fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000026c4  00000000  00000000  000315dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000548e  00000000  00000000  00033ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000fbaa  00000000  00000000  0003912e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b88  00000000  00000000  00048cd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6d 00 	jmp	0xda	; 0xda <__ctors_end>
       4:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__vector_1>
       8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
       c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      10:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      14:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      1c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      24:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__vector_9>
      28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      2c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      40:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__vector_16>
      44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      48:	0c 94 c8 03 	jmp	0x790	; 0x790 <__vector_18>
      4c:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__vector_19>
      50:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      54:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      58:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      60:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
      64:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <_ZZN6SdFile10make83NameEPKcPhE3__c>:
      c2:	7c 3c 3e 5e 2b 3d 3f 2f 5b 5d 3b 2c 2a 22 5c 00     |<>^+=?/[];,*"\.

000000d2 <__ctors_start>:
      d2:	3a 01       	movw	r6, r20
      d4:	2a 04       	cpc	r2, r10
      d6:	e0 0a       	sbc	r14, r16
      d8:	6a 0e       	add	r6, r26

000000da <__ctors_end>:
      da:	11 24       	eor	r1, r1
      dc:	1f be       	out	0x3f, r1	; 63
      de:	cf ef       	ldi	r28, 0xFF	; 255
      e0:	d8 e0       	ldi	r29, 0x08	; 8
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	cd bf       	out	0x3d, r28	; 61

000000e6 <__do_copy_data>:
      e6:	12 e0       	ldi	r17, 0x02	; 2
      e8:	a0 e0       	ldi	r26, 0x00	; 0
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	e4 e8       	ldi	r30, 0x84	; 132
      ee:	fc e3       	ldi	r31, 0x3C	; 60
      f0:	02 c0       	rjmp	.+4      	; 0xf6 <__do_copy_data+0x10>
      f2:	05 90       	lpm	r0, Z+
      f4:	0d 92       	st	X+, r0
      f6:	a4 33       	cpi	r26, 0x34	; 52
      f8:	b1 07       	cpc	r27, r17
      fa:	d9 f7       	brne	.-10     	; 0xf2 <__do_copy_data+0xc>

000000fc <__do_clear_bss>:
      fc:	27 e0       	ldi	r18, 0x07	; 7
      fe:	a4 e3       	ldi	r26, 0x34	; 52
     100:	b2 e0       	ldi	r27, 0x02	; 2
     102:	01 c0       	rjmp	.+2      	; 0x106 <.do_clear_bss_start>

00000104 <.do_clear_bss_loop>:
     104:	1d 92       	st	X+, r1

00000106 <.do_clear_bss_start>:
     106:	ae 34       	cpi	r26, 0x4E	; 78
     108:	b2 07       	cpc	r27, r18
     10a:	e1 f7       	brne	.-8      	; 0x104 <.do_clear_bss_loop>

0000010c <__do_global_ctors>:
     10c:	10 e0       	ldi	r17, 0x00	; 0
     10e:	cd e6       	ldi	r28, 0x6D	; 109
     110:	d0 e0       	ldi	r29, 0x00	; 0
     112:	04 c0       	rjmp	.+8      	; 0x11c <__do_global_ctors+0x10>
     114:	21 97       	sbiw	r28, 0x01	; 1
     116:	fe 01       	movw	r30, r28
     118:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <__tablejump2__>
     11c:	c9 36       	cpi	r28, 0x69	; 105
     11e:	d1 07       	cpc	r29, r17
     120:	c9 f7       	brne	.-14     	; 0x114 <__do_global_ctors+0x8>
     122:	0e 94 58 04 	call	0x8b0	; 0x8b0 <main>
     126:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <_exit>

0000012a <__bad_interrupt>:
     12a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012e <_Z9UART_Initj>:
 */ 
//Functions for Serial Out
#include <avr/io.h>

void UART_Init(unsigned int baud){
	unsigned int ubrr = (16000000/16/baud-1);
     12e:	9c 01       	movw	r18, r24
     130:	40 e0       	ldi	r20, 0x00	; 0
     132:	50 e0       	ldi	r21, 0x00	; 0
     134:	60 e4       	ldi	r22, 0x40	; 64
     136:	72 e4       	ldi	r23, 0x42	; 66
     138:	8f e0       	ldi	r24, 0x0F	; 15
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	0e 94 ac 1b 	call	0x3758	; 0x3758 <__divmodsi4>
     140:	21 50       	subi	r18, 0x01	; 1
     142:	31 09       	sbc	r19, r1
	UBRR0H =(unsigned char)(ubrr>>8);
     144:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
     148:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B =(1 << RXEN0) | (1 << TXEN0);
     14c:	88 e1       	ldi	r24, 0x18	; 24
     14e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
     152:	86 e0       	ldi	r24, 0x06	; 6
     154:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     158:	08 95       	ret

0000015a <_Z9UART_putch>:
}

void UART_putc(unsigned char data)
{
	// wait for transmit buffer to be empty
	while(!(UCSR0A & (1 << UDRE0)));
     15a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     15e:	95 ff       	sbrs	r25, 5
     160:	fc cf       	rjmp	.-8      	; 0x15a <_Z9UART_putch>
	// load data into transmit register
	UDR0 = data;
     162:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     166:	08 95       	ret

00000168 <_Z9UART_putsPc>:
}

/*Sending a String*/
void UART_puts(char* s)
{
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	ec 01       	movw	r28, r24
	// transmit character until NULL is reached
	while(*s > 0) UART_putc(*s++);
     16e:	89 91       	ld	r24, Y+
     170:	88 23       	and	r24, r24
     172:	19 f0       	breq	.+6      	; 0x17a <_Z9UART_putsPc+0x12>
     174:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z9UART_putch>
     178:	fa cf       	rjmp	.-12     	; 0x16e <_Z9UART_putsPc+0x6>
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	08 95       	ret

00000180 <_Z9Port_Initv>:




void Port_Init(){	
	DDRD = 0b10011011;//Setting Speaker as Output and PlayBtn as Input
     180:	8b e9       	ldi	r24, 0x9B	; 155
     182:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PLAYBtn)|(1<<RECBtn)|(1<<STOPBtn);//Adding Input pull up to that buttons
     184:	3b b1       	in	r19, 0x0b	; 11
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	bc 01       	movw	r22, r24
     18c:	00 90 50 01 	lds	r0, 0x0150	; 0x800150 <PLAYBtn>
     190:	02 c0       	rjmp	.+4      	; 0x196 <_Z9Port_Initv+0x16>
     192:	66 0f       	add	r22, r22
     194:	77 1f       	adc	r23, r23
     196:	0a 94       	dec	r0
     198:	e2 f7       	brpl	.-8      	; 0x192 <_Z9Port_Initv+0x12>
     19a:	ac 01       	movw	r20, r24
     19c:	00 90 4f 01 	lds	r0, 0x014F	; 0x80014f <RECBtn>
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <_Z9Port_Initv+0x26>
     1a2:	44 0f       	add	r20, r20
     1a4:	55 1f       	adc	r21, r21
     1a6:	0a 94       	dec	r0
     1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <_Z9Port_Initv+0x22>
     1aa:	26 2f       	mov	r18, r22
     1ac:	24 2b       	or	r18, r20
     1ae:	23 2b       	or	r18, r19
     1b0:	00 90 4e 01 	lds	r0, 0x014E	; 0x80014e <STOPBtn>
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <_Z9Port_Initv+0x3a>
     1b6:	88 0f       	add	r24, r24
     1b8:	99 1f       	adc	r25, r25
     1ba:	0a 94       	dec	r0
     1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <_Z9Port_Initv+0x36>
     1be:	82 2b       	or	r24, r18
     1c0:	8b b9       	out	0x0b, r24	; 11
	
 	EIMSK = (1<< INT0);//(1<<INT1);//Adding External interrupts
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	8d bb       	out	0x1d, r24	; 29
 	EICRA =  (1<<ISC00) |(1<<ISC01);//(1<<ISC10)|(1<<ISC11);  //Interrupt occur at rising edge
     1c6:	83 e0       	ldi	r24, 0x03	; 3
     1c8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	 
	// set up Timer2 to run at 11025 Hz (or near it)
    TCCR2A = 0b00100011; // fast PWM mode with OC2B changed
     1cc:	83 e2       	ldi	r24, 0x23	; 35
     1ce:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    TCCR2B = 0b00000010; // last 3 bits 010 select clock/8 or 16MHz/8 = 2MHz
     1d2:	82 e0       	ldi	r24, 0x02	; 2
     1d4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    OCR2A = 179; // should give 11025 Hz, might need tweaking
     1d8:	83 eb       	ldi	r24, 0xB3	; 179
     1da:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = 80;
     1de:	80 e5       	ldi	r24, 0x50	; 80
     1e0:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     1e4:	08 95       	ret

000001e6 <setup>:
void saveFile(String filename);
ISR(TIMER2_OVF_vect );


void setup() {
  UART_Init(9600);//Initializing Serial
     1e6:	80 e8       	ldi	r24, 0x80	; 128
     1e8:	95 e2       	ldi	r25, 0x25	; 37
     1ea:	0e 94 97 00 	call	0x12e	; 0x12e <_Z9UART_Initj>
  UART_puts("Starting simple WAV demo\n");
     1ee:	85 e5       	ldi	r24, 0x55	; 85
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	0e 94 b4 00 	call	0x168	; 0x168 <_Z9UART_putsPc>
  Port_Init();//Initializing Ports
     1f6:	0e 94 c0 00 	call	0x180	; 0x180 <_Z9Port_Initv>
  
  if (!SD.begin(10)) {
     1fa:	6a e0       	ldi	r22, 0x0A	; 10
     1fc:	81 ef       	ldi	r24, 0xF1	; 241
     1fe:	94 e0       	ldi	r25, 0x04	; 4
     200:	0e 94 3c 09 	call	0x1278	; 0x1278 <_ZN5SDLib7SDClass5beginEh>
     204:	81 11       	cpse	r24, r1
     206:	04 c0       	rjmp	.+8      	; 0x210 <setup+0x2a>
    UART_puts("SD fail\n");  
     208:	8f e6       	ldi	r24, 0x6F	; 111
     20a:	91 e0       	ldi	r25, 0x01	; 1
     20c:	0c 94 b4 00 	jmp	0x168	; 0x168 <_Z9UART_putsPc>
     210:	08 95       	ret

00000212 <_ZN5SDLib4FileaSEOS0_>:
#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT | O_APPEND)

namespace SDLib {

class File : public Stream {
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	fb 01       	movw	r30, r22
     218:	22 81       	ldd	r18, Z+2	; 0x02
     21a:	33 81       	ldd	r19, Z+3	; 0x03
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
     21c:	dc 01       	movw	r26, r24
     21e:	13 96       	adiw	r26, 0x03	; 3
     220:	3c 93       	st	X, r19
     222:	2e 93       	st	-X, r18
     224:	12 97       	sbiw	r26, 0x02	; 2
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
     226:	44 81       	ldd	r20, Z+4	; 0x04
     228:	55 81       	ldd	r21, Z+5	; 0x05
     22a:	66 81       	ldd	r22, Z+6	; 0x06
     22c:	77 81       	ldd	r23, Z+7	; 0x07
     22e:	14 96       	adiw	r26, 0x04	; 4
     230:	4d 93       	st	X+, r20
     232:	5d 93       	st	X+, r21
     234:	6d 93       	st	X+, r22
     236:	7c 93       	st	X, r23
     238:	17 97       	sbiw	r26, 0x07	; 7
     23a:	40 85       	ldd	r20, Z+8	; 0x08
     23c:	51 85       	ldd	r21, Z+9	; 0x09
     23e:	62 85       	ldd	r22, Z+10	; 0x0a
     240:	73 85       	ldd	r23, Z+11	; 0x0b
     242:	18 96       	adiw	r26, 0x08	; 8
     244:	4d 93       	st	X+, r20
     246:	5d 93       	st	X+, r21
     248:	6d 93       	st	X+, r22
     24a:	7c 93       	st	X, r23
     24c:	1b 97       	sbiw	r26, 0x0b	; 11
     24e:	1c 96       	adiw	r26, 0x0c	; 12
     250:	ef 01       	movw	r28, r30
     252:	2c 96       	adiw	r28, 0x0c	; 12
     254:	9c 01       	movw	r18, r24
     256:	27 5e       	subi	r18, 0xE7	; 231
     258:	3f 4f       	sbci	r19, 0xFF	; 255
     25a:	49 91       	ld	r20, Y+
     25c:	4d 93       	st	X+, r20
     25e:	a2 17       	cp	r26, r18
     260:	b3 07       	cpc	r27, r19
     262:	d9 f7       	brne	.-10     	; 0x25a <_ZN5SDLib4FileaSEOS0_+0x48>
     264:	21 8d       	ldd	r18, Z+25	; 0x19
     266:	32 8d       	ldd	r19, Z+26	; 0x1a
     268:	fc 01       	movw	r30, r24
     26a:	32 8f       	std	Z+26, r19	; 0x1a
     26c:	21 8f       	std	Z+25, r18	; 0x19
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <_GLOBAL__sub_I_PlayFlag>:

const byte Speaker = 3; // OC2B
int dataCount = 0;
unsigned int numBytes;

File PlayFile;
     274:	8a e6       	ldi	r24, 0x6A	; 106
     276:	92 e0       	ldi	r25, 0x02	; 2
     278:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5SDLib4FileC1Ev>
File RecFile;
     27c:	8f e4       	ldi	r24, 0x4F	; 79
     27e:	92 e0       	ldi	r25, 0x02	; 2
     280:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5SDLib4FileC1Ev>
File temp;
     284:	84 e3       	ldi	r24, 0x34	; 52
     286:	92 e0       	ldi	r25, 0x02	; 2
     288:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <_ZN5SDLib4FileC1Ev>

0000028c <_Z9playAudio6String>:
	}
}



void playAudio(String file){
     28c:	ef 92       	push	r14
     28e:	ff 92       	push	r15
     290:	0f 93       	push	r16
     292:	1f 93       	push	r17
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
     29c:	6b 97       	sbiw	r28, 0x1b	; 27
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	f8 94       	cli
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	cd bf       	out	0x3d, r28	; 61
	if (PlayFlag==0){
     2a8:	20 91 8a 02 	lds	r18, 0x028A	; 0x80028a <PlayFlag>
     2ac:	21 11       	cpse	r18, r1
     2ae:	62 c0       	rjmp	.+196    	; 0x374 <_Z9playAudio6String+0xe8>
		PlayFlag=1;
     2b0:	21 e0       	ldi	r18, 0x01	; 1
     2b2:	20 93 8a 02 	sts	0x028A, r18	; 0x80028a <PlayFlag>

  // Open the specified file/directory with the supplied mode (e.g. read or
  // write, etc). Returns a File object for interacting with the file.
  // Note that currently only one file can be open at a time.
  File open(const char *filename, uint8_t mode = FILE_READ);
  File open(const String &filename, uint8_t mode = FILE_READ) { return open( filename.c_str(), mode ); }
     2b6:	fc 01       	movw	r30, r24
     2b8:	40 81       	ld	r20, Z
     2ba:	51 81       	ldd	r21, Z+1	; 0x01
     2bc:	61 ef       	ldi	r22, 0xF1	; 241
     2be:	74 e0       	ldi	r23, 0x04	; 4
     2c0:	ce 01       	movw	r24, r28
     2c2:	01 96       	adiw	r24, 0x01	; 1
     2c4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <_ZN5SDLib7SDClass4openEPKch>
		PlayFile = SD.open(file,FILE_READ);
     2c8:	be 01       	movw	r22, r28
     2ca:	6f 5f       	subi	r22, 0xFF	; 255
     2cc:	7f 4f       	sbci	r23, 0xFF	; 255
     2ce:	8a e6       	ldi	r24, 0x6A	; 106
     2d0:	92 e0       	ldi	r25, 0x02	; 2
     2d2:	0e 94 09 01 	call	0x212	; 0x212 <_ZN5SDLib4FileaSEOS0_>
		if( !PlayFile ){
     2d6:	8a e6       	ldi	r24, 0x6A	; 106
     2d8:	92 e0       	ldi	r25, 0x02	; 2
     2da:	0e 94 34 08 	call	0x1068	; 0x1068 <_ZN5SDLib4FilecvbEv>
     2de:	81 11       	cpse	r24, r1
     2e0:	05 c0       	rjmp	.+10     	; 0x2ec <_Z9playAudio6String+0x60>
			UART_puts("File not opened\n");
     2e2:	88 e7       	ldi	r24, 0x78	; 120
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	0e 94 b4 00 	call	0x168	; 0x168 <_Z9UART_putsPc>
     2ea:	4c c0       	rjmp	.+152    	; 0x384 <_Z9playAudio6String+0xf8>
		}
		else {
			byte numByteArray[4];
			PlayFile.seek(40);
     2ec:	48 e2       	ldi	r20, 0x28	; 40
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	60 e0       	ldi	r22, 0x00	; 0
     2f2:	70 e0       	ldi	r23, 0x00	; 0
     2f4:	8a e6       	ldi	r24, 0x6A	; 106
     2f6:	92 e0       	ldi	r25, 0x02	; 2
     2f8:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_ZN5SDLib4File4seekEm>
     2fc:	8e 01       	movw	r16, r28
     2fe:	0f 5f       	subi	r16, 0xFF	; 255
     300:	1f 4f       	sbci	r17, 0xFF	; 255
     302:	7e 01       	movw	r14, r28
     304:	f5 e0       	ldi	r31, 0x05	; 5
     306:	ef 0e       	add	r14, r31
     308:	f1 1c       	adc	r15, r1
			for(uint8_t b=0; b<4;b++)
			{
			numByteArray[b] = PlayFile.read();
     30a:	8a e6       	ldi	r24, 0x6A	; 106
     30c:	92 e0       	ldi	r25, 0x02	; 2
     30e:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN5SDLib4File4readEv>
     312:	f8 01       	movw	r30, r16
     314:	81 93       	st	Z+, r24
     316:	8f 01       	movw	r16, r30
			UART_puts("File not opened\n");
		}
		else {
			byte numByteArray[4];
			PlayFile.seek(40);
			for(uint8_t b=0; b<4;b++)
     318:	ee 15       	cp	r30, r14
     31a:	ff 05       	cpc	r31, r15
     31c:	b1 f7       	brne	.-20     	; 0x30a <_Z9playAudio6String+0x7e>
			{
			numByteArray[b] = PlayFile.read();
			}
			numBytes = numByteArray[0] + (numByteArray[1] << 8) + (numByteArray[2] << 16) + (numByteArray[3] << 24);
     31e:	8a 81       	ldd	r24, Y+2	; 0x02
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	98 2f       	mov	r25, r24
     324:	88 27       	eor	r24, r24
     326:	29 81       	ldd	r18, Y+1	; 0x01
     328:	82 0f       	add	r24, r18
     32a:	91 1d       	adc	r25, r1
     32c:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <numBytes+0x1>
     330:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <numBytes>
			Serial.print("Num Bytes:");
     334:	69 e8       	ldi	r22, 0x89	; 137
     336:	71 e0       	ldi	r23, 0x01	; 1
     338:	8b e8       	ldi	r24, 0x8B	; 139
     33a:	92 e0       	ldi	r25, 0x02	; 2
     33c:	0e 94 a6 04 	call	0x94c	; 0x94c <_ZN5Print5printEPKc>
			Serial.print(numBytes);
     340:	60 91 85 02 	lds	r22, 0x0285	; 0x800285 <numBytes>
     344:	70 91 86 02 	lds	r23, 0x0286	; 0x800286 <numBytes+0x1>
     348:	4a e0       	ldi	r20, 0x0A	; 10
     34a:	50 e0       	ldi	r21, 0x00	; 0
     34c:	8b e8       	ldi	r24, 0x8B	; 139
     34e:	92 e0       	ldi	r25, 0x02	; 2
     350:	0e 94 02 05 	call	0xa04	; 0xa04 <_ZN5Print5printEji>
			Serial.println();
     354:	8b e8       	ldi	r24, 0x8B	; 139
     356:	92 e0       	ldi	r25, 0x02	; 2
     358:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN5Print7printlnEv>
			
			// move the pointer back to the start of the data
			PlayFile.seek(44);
     35c:	4c e2       	ldi	r20, 0x2C	; 44
     35e:	50 e0       	ldi	r21, 0x00	; 0
     360:	60 e0       	ldi	r22, 0x00	; 0
     362:	70 e0       	ldi	r23, 0x00	; 0
     364:	8a e6       	ldi	r24, 0x6A	; 106
     366:	92 e0       	ldi	r25, 0x02	; 2
     368:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_ZN5SDLib4File4seekEm>
			TIMSK2 = 0b00000001;//Start playing Wav file
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     372:	08 c0       	rjmp	.+16     	; 0x384 <_Z9playAudio6String+0xf8>
		}		
		
	}
	else{
		TIMSK2 = 0b00000000;//stop playing Wav file
     374:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
		PlayFile.close();
     378:	8a e6       	ldi	r24, 0x6A	; 106
     37a:	92 e0       	ldi	r25, 0x02	; 2
     37c:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN5SDLib4File5closeEv>
		PlayFlag=0;
     380:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <PlayFlag>
	}	
}
     384:	6b 96       	adiw	r28, 0x1b	; 27
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	f8 94       	cli
     38a:	de bf       	out	0x3e, r29	; 62
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	cd bf       	out	0x3d, r28	; 61
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	1f 91       	pop	r17
     396:	0f 91       	pop	r16
     398:	ff 90       	pop	r15
     39a:	ef 90       	pop	r14
     39c:	08 95       	ret

0000039e <__vector_9>:
	}
	
}


ISR (TIMER2_OVF_vect) {
     39e:	1f 92       	push	r1
     3a0:	0f 92       	push	r0
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	0f 92       	push	r0
     3a6:	11 24       	eor	r1, r1
     3a8:	2f 93       	push	r18
     3aa:	3f 93       	push	r19
     3ac:	4f 93       	push	r20
     3ae:	5f 93       	push	r21
     3b0:	6f 93       	push	r22
     3b2:	7f 93       	push	r23
     3b4:	8f 93       	push	r24
     3b6:	9f 93       	push	r25
     3b8:	af 93       	push	r26
     3ba:	bf 93       	push	r27
     3bc:	ef 93       	push	r30
     3be:	ff 93       	push	r31
	if(PlayFlag==1)
     3c0:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <PlayFlag>
     3c4:	88 23       	and	r24, r24
     3c6:	11 f1       	breq	.+68     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
	{	
	OCR2B = PlayFile.read(); // this represents the amplitude of each sample
     3c8:	8a e6       	ldi	r24, 0x6A	; 106
     3ca:	92 e0       	ldi	r25, 0x02	; 2
     3cc:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN5SDLib4File4readEv>
     3d0:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	dataCount ++;
     3d4:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <dataCount>
     3d8:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <dataCount+0x1>
     3dc:	01 96       	adiw	r24, 0x01	; 1
     3de:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <dataCount+0x1>
     3e2:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <dataCount>
	if (dataCount >= numBytes) { // go back to the start of the file
     3e6:	20 91 85 02 	lds	r18, 0x0285	; 0x800285 <numBytes>
     3ea:	30 91 86 02 	lds	r19, 0x0286	; 0x800286 <numBytes+0x1>
     3ee:	82 17       	cp	r24, r18
     3f0:	93 07       	cpc	r25, r19
     3f2:	60 f0       	brcs	.+24     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		dataCount = 0;
     3f4:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <dataCount+0x1>
     3f8:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <dataCount>
		PlayFile.seek(44);
     3fc:	4c e2       	ldi	r20, 0x2C	; 44
     3fe:	50 e0       	ldi	r21, 0x00	; 0
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	8a e6       	ldi	r24, 0x6A	; 106
     406:	92 e0       	ldi	r25, 0x02	; 2
     408:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_ZN5SDLib4File4seekEm>
	}
	}
	if(RecFlag==1){
     40c:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <RecFlag>
     410:	88 23       	and	r24, r24
     412:	71 f0       	breq	.+28     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
		//Serial.write(0x24);
		temp.write(0x24);
     414:	64 e2       	ldi	r22, 0x24	; 36
     416:	84 e3       	ldi	r24, 0x34	; 52
     418:	92 e0       	ldi	r25, 0x02	; 2
     41a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <_ZN5SDLib4File5writeEh>
		dataCount++;	
     41e:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <dataCount>
     422:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <dataCount+0x1>
     426:	01 96       	adiw	r24, 0x01	; 1
     428:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <dataCount+0x1>
     42c:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <dataCount>

	}
}
     430:	ff 91       	pop	r31
     432:	ef 91       	pop	r30
     434:	bf 91       	pop	r27
     436:	af 91       	pop	r26
     438:	9f 91       	pop	r25
     43a:	8f 91       	pop	r24
     43c:	7f 91       	pop	r23
     43e:	6f 91       	pop	r22
     440:	5f 91       	pop	r21
     442:	4f 91       	pop	r20
     444:	3f 91       	pop	r19
     446:	2f 91       	pop	r18
     448:	0f 90       	pop	r0
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	0f 90       	pop	r0
     44e:	1f 90       	pop	r1
     450:	18 95       	reti

00000452 <_Z8saveFile6String>:
		dataCount=0;		
		RecFlag=0;
	}
}

void saveFile(String filename){
     452:	ef 92       	push	r14
     454:	ff 92       	push	r15
     456:	0f 93       	push	r16
     458:	1f 93       	push	r17
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	cd b7       	in	r28, 0x3d	; 61
     460:	de b7       	in	r29, 0x3e	; 62
     462:	6b 97       	sbiw	r28, 0x1b	; 27
     464:	0f b6       	in	r0, 0x3f	; 63
     466:	f8 94       	cli
     468:	de bf       	out	0x3e, r29	; 62
     46a:	0f be       	out	0x3f, r0	; 63
     46c:	cd bf       	out	0x3d, r28	; 61
     46e:	8c 01       	movw	r16, r24
	unsigned int i;
	temp = SD.open(tempFile,FILE_READ);
     470:	21 e0       	ldi	r18, 0x01	; 1
     472:	4e e2       	ldi	r20, 0x2E	; 46
     474:	51 e0       	ldi	r21, 0x01	; 1
     476:	61 ef       	ldi	r22, 0xF1	; 241
     478:	74 e0       	ldi	r23, 0x04	; 4
     47a:	ce 01       	movw	r24, r28
     47c:	01 96       	adiw	r24, 0x01	; 1
     47e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <_ZN5SDLib7SDClass4openEPKch>
     482:	be 01       	movw	r22, r28
     484:	6f 5f       	subi	r22, 0xFF	; 255
     486:	7f 4f       	sbci	r23, 0xFF	; 255
     488:	84 e3       	ldi	r24, 0x34	; 52
     48a:	92 e0       	ldi	r25, 0x02	; 2
     48c:	0e 94 09 01 	call	0x212	; 0x212 <_ZN5SDLib4FileaSEOS0_>
     490:	f8 01       	movw	r30, r16
     492:	40 81       	ld	r20, Z
     494:	51 81       	ldd	r21, Z+1	; 0x01
     496:	27 e1       	ldi	r18, 0x17	; 23
     498:	61 ef       	ldi	r22, 0xF1	; 241
     49a:	74 e0       	ldi	r23, 0x04	; 4
     49c:	ce 01       	movw	r24, r28
     49e:	01 96       	adiw	r24, 0x01	; 1
     4a0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <_ZN5SDLib7SDClass4openEPKch>
	RecFile = SD.open(filename,FILE_WRITE);
     4a4:	be 01       	movw	r22, r28
     4a6:	6f 5f       	subi	r22, 0xFF	; 255
     4a8:	7f 4f       	sbci	r23, 0xFF	; 255
     4aa:	8f e4       	ldi	r24, 0x4F	; 79
     4ac:	92 e0       	ldi	r25, 0x02	; 2
     4ae:	0e 94 09 01 	call	0x212	; 0x212 <_ZN5SDLib4FileaSEOS0_>
	if (!temp || !RecFile)
     4b2:	84 e3       	ldi	r24, 0x34	; 52
     4b4:	92 e0       	ldi	r25, 0x02	; 2
     4b6:	0e 94 34 08 	call	0x1068	; 0x1068 <_ZN5SDLib4FilecvbEv>
     4ba:	88 23       	and	r24, r24
     4bc:	09 f4       	brne	.+2      	; 0x4c0 <_Z8saveFile6String+0x6e>
     4be:	56 c0       	rjmp	.+172    	; 0x56c <_Z8saveFile6String+0x11a>
     4c0:	8f e4       	ldi	r24, 0x4F	; 79
     4c2:	92 e0       	ldi	r25, 0x02	; 2
     4c4:	0e 94 34 08 	call	0x1068	; 0x1068 <_ZN5SDLib4FilecvbEv>
     4c8:	88 23       	and	r24, r24
     4ca:	09 f4       	brne	.+2      	; 0x4ce <_Z8saveFile6String+0x7c>
     4cc:	4f c0       	rjmp	.+158    	; 0x56c <_Z8saveFile6String+0x11a>
	{
		UART_puts("Error Saving File!\n");
	}
	else
	{
		UART_puts("Saving Started...\n");
     4ce:	84 ea       	ldi	r24, 0xA4	; 164
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	0e 94 b4 00 	call	0x168	; 0x168 <_Z9UART_putsPc>
     4d6:	06 e0       	ldi	r16, 0x06	; 6
     4d8:	11 e0       	ldi	r17, 0x01	; 1
     4da:	8e e2       	ldi	r24, 0x2E	; 46
     4dc:	e8 2e       	mov	r14, r24
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	f8 2e       	mov	r15, r24
		for(i=0;i<40;i++)
		{
			RecFile.write(sampleData[i]);
     4e2:	f8 01       	movw	r30, r16
     4e4:	61 91       	ld	r22, Z+
     4e6:	8f 01       	movw	r16, r30
     4e8:	8f e4       	ldi	r24, 0x4F	; 79
     4ea:	92 e0       	ldi	r25, 0x02	; 2
     4ec:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <_ZN5SDLib4File5writeEh>
		UART_puts("Error Saving File!\n");
	}
	else
	{
		UART_puts("Saving Started...\n");
		for(i=0;i<40;i++)
     4f0:	e0 16       	cp	r14, r16
     4f2:	f1 06       	cpc	r15, r17
     4f4:	b1 f7       	brne	.-20     	; 0x4e2 <_Z8saveFile6String+0x90>
     4f6:	00 e0       	ldi	r16, 0x00	; 0
     4f8:	10 e0       	ldi	r17, 0x00	; 0
		}
		for(i=0;i<4;i++)
		{
			//Serial.println();
			//Serial.println(dataCount>>(8*i)&0xFF,HEX);			
			RecFile.write(dataCount>>(8*i)&0xFF);
     4fa:	60 91 87 02 	lds	r22, 0x0287	; 0x800287 <dataCount>
     4fe:	70 91 88 02 	lds	r23, 0x0288	; 0x800288 <dataCount+0x1>
     502:	00 2e       	mov	r0, r16
     504:	02 c0       	rjmp	.+4      	; 0x50a <_Z8saveFile6String+0xb8>
     506:	75 95       	asr	r23
     508:	67 95       	ror	r22
     50a:	0a 94       	dec	r0
     50c:	e2 f7       	brpl	.-8      	; 0x506 <_Z8saveFile6String+0xb4>
     50e:	8f e4       	ldi	r24, 0x4F	; 79
     510:	92 e0       	ldi	r25, 0x02	; 2
     512:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <_ZN5SDLib4File5writeEh>
     516:	08 5f       	subi	r16, 0xF8	; 248
     518:	1f 4f       	sbci	r17, 0xFF	; 255
		for(i=0;i<40;i++)
		{
			RecFile.write(sampleData[i]);
			//Serial.write(sampleData[i]);
		}
		for(i=0;i<4;i++)
     51a:	00 32       	cpi	r16, 0x20	; 32
     51c:	11 05       	cpc	r17, r1
     51e:	69 f7       	brne	.-38     	; 0x4fa <_Z8saveFile6String+0xa8>
     520:	00 e0       	ldi	r16, 0x00	; 0
     522:	10 e0       	ldi	r17, 0x00	; 0
			//Serial.println();
			//Serial.println(dataCount>>(8*i)&0xFF,HEX);			
			RecFile.write(dataCount>>(8*i)&0xFF);
		}
		char a;
		for(i=0;i<dataCount;i++)
     524:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <dataCount>
     528:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <dataCount+0x1>
     52c:	08 17       	cp	r16, r24
     52e:	19 07       	cpc	r17, r25
     530:	60 f4       	brcc	.+24     	; 0x54a <_Z8saveFile6String+0xf8>
		{
			a = temp.read();
     532:	84 e3       	ldi	r24, 0x34	; 52
     534:	92 e0       	ldi	r25, 0x02	; 2
     536:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN5SDLib4File4readEv>
			RecFile.write(a);
     53a:	68 2f       	mov	r22, r24
     53c:	8f e4       	ldi	r24, 0x4F	; 79
     53e:	92 e0       	ldi	r25, 0x02	; 2
     540:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <_ZN5SDLib4File5writeEh>
			//Serial.println();
			//Serial.println(dataCount>>(8*i)&0xFF,HEX);			
			RecFile.write(dataCount>>(8*i)&0xFF);
		}
		char a;
		for(i=0;i<dataCount;i++)
     544:	0f 5f       	subi	r16, 0xFF	; 255
     546:	1f 4f       	sbci	r17, 0xFF	; 255
     548:	ed cf       	rjmp	.-38     	; 0x524 <_Z8saveFile6String+0xd2>
		{
			a = temp.read();
			RecFile.write(a);
		}
		temp.close();
     54a:	84 e3       	ldi	r24, 0x34	; 52
     54c:	92 e0       	ldi	r25, 0x02	; 2
     54e:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN5SDLib4File5closeEv>
		RecFile.close();
     552:	8f e4       	ldi	r24, 0x4F	; 79
     554:	92 e0       	ldi	r25, 0x02	; 2
     556:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN5SDLib4File5closeEv>
		SD.remove(tempFile);
     55a:	6e e2       	ldi	r22, 0x2E	; 46
     55c:	71 e0       	ldi	r23, 0x01	; 1
     55e:	81 ef       	ldi	r24, 0xF1	; 241
     560:	94 e0       	ldi	r25, 0x04	; 4
     562:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <_ZN5SDLib7SDClass6removeEPKc>
		UART_puts("Done Saving...\n");
     566:	84 e9       	ldi	r24, 0x94	; 148
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	02 c0       	rjmp	.+4      	; 0x570 <_Z8saveFile6String+0x11e>
	unsigned int i;
	temp = SD.open(tempFile,FILE_READ);
	RecFile = SD.open(filename,FILE_WRITE);
	if (!temp || !RecFile)
	{
		UART_puts("Error Saving File!\n");
     56c:	87 eb       	ldi	r24, 0xB7	; 183
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	0e 94 b4 00 	call	0x168	; 0x168 <_Z9UART_putsPc>
		RecFile.close();
		SD.remove(tempFile);
		UART_puts("Done Saving...\n");
	}

     574:	6b 96       	adiw	r28, 0x1b	; 27
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	f8 94       	cli
     57a:	de bf       	out	0x3e, r29	; 62
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	cd bf       	out	0x3d, r28	; 61
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	ff 90       	pop	r15
     58a:	ef 90       	pop	r14
     58c:	08 95       	ret

0000058e <_Z11RecordAudio6String>:
		PlayFlag=0;
	}	
}

void RecordAudio(String file)
{
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	6b 97       	sbiw	r28, 0x1b	; 27
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	de bf       	out	0x3e, r29	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	cd bf       	out	0x3d, r28	; 61
     5a6:	8c 01       	movw	r16, r24
	if (RecFlag==0){
     5a8:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <RecFlag>
     5ac:	81 11       	cpse	r24, r1
     5ae:	25 c0       	rjmp	.+74     	; 0x5fa <_Z11RecordAudio6String+0x6c>
		RecFlag=1;
     5b0:	11 e0       	ldi	r17, 0x01	; 1
     5b2:	10 93 89 02 	sts	0x0289, r17	; 0x800289 <RecFlag>
		temp = SD.open(tempFile,FILE_WRITE);
     5b6:	27 e1       	ldi	r18, 0x17	; 23
     5b8:	4e e2       	ldi	r20, 0x2E	; 46
     5ba:	51 e0       	ldi	r21, 0x01	; 1
     5bc:	61 ef       	ldi	r22, 0xF1	; 241
     5be:	74 e0       	ldi	r23, 0x04	; 4
     5c0:	ce 01       	movw	r24, r28
     5c2:	01 96       	adiw	r24, 0x01	; 1
     5c4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <_ZN5SDLib7SDClass4openEPKch>
     5c8:	be 01       	movw	r22, r28
     5ca:	6f 5f       	subi	r22, 0xFF	; 255
     5cc:	7f 4f       	sbci	r23, 0xFF	; 255
     5ce:	84 e3       	ldi	r24, 0x34	; 52
     5d0:	92 e0       	ldi	r25, 0x02	; 2
     5d2:	0e 94 09 01 	call	0x212	; 0x212 <_ZN5SDLib4FileaSEOS0_>
		if( !temp ){
     5d6:	84 e3       	ldi	r24, 0x34	; 52
     5d8:	92 e0       	ldi	r25, 0x02	; 2
     5da:	0e 94 34 08 	call	0x1068	; 0x1068 <_ZN5SDLib4FilecvbEv>
     5de:	81 11       	cpse	r24, r1
     5e0:	05 c0       	rjmp	.+10     	; 0x5ec <_Z11RecordAudio6String+0x5e>
			UART_puts("File not opened\n");
     5e2:	88 e7       	ldi	r24, 0x78	; 120
     5e4:	91 e0       	ldi	r25, 0x01	; 1
     5e6:	0e 94 b4 00 	call	0x168	; 0x168 <_Z9UART_putsPc>
     5ea:	24 c0       	rjmp	.+72     	; 0x634 <_Z11RecordAudio6String+0xa6>
		}
		else 
		{
		UART_puts("Rec Started\n");
     5ec:	8b ec       	ldi	r24, 0xCB	; 203
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	0e 94 b4 00 	call	0x168	; 0x168 <_Z9UART_putsPc>
		TIMSK2 = 0b00000001;//Start Recording Wav file
     5f4:	10 93 70 00 	sts	0x0070, r17	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
     5f8:	1d c0       	rjmp	.+58     	; 0x634 <_Z11RecordAudio6String+0xa6>
		}
	}
	else{
		UART_puts("Wait for saving the file!\n");
     5fa:	88 ed       	ldi	r24, 0xD8	; 216
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	0e 94 b4 00 	call	0x168	; 0x168 <_Z9UART_putsPc>
		TIMSK2 = 0b00000000;//stop Recording Wav file
     602:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
		//Serial.println(dataCount);
		temp.close();
     606:	84 e3       	ldi	r24, 0x34	; 52
     608:	92 e0       	ldi	r25, 0x02	; 2
     60a:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN5SDLib4File5closeEv>
		saveFile(file);
     60e:	b8 01       	movw	r22, r16
     610:	ce 01       	movw	r24, r28
     612:	01 96       	adiw	r24, 0x01	; 1
     614:	0e 94 f0 06 	call	0xde0	; 0xde0 <_ZN6StringC1ERKS_>
     618:	ce 01       	movw	r24, r28
     61a:	01 96       	adiw	r24, 0x01	; 1
     61c:	0e 94 29 02 	call	0x452	; 0x452 <_Z8saveFile6String>
     620:	ce 01       	movw	r24, r28
     622:	01 96       	adiw	r24, 0x01	; 1
     624:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN6StringD1Ev>
		dataCount=0;		
     628:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <dataCount+0x1>
     62c:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <dataCount>
		RecFlag=0;
     630:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <RecFlag>
	}
}
     634:	6b 96       	adiw	r28, 0x1b	; 27
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	cd bf       	out	0x3d, r28	; 61
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	1f 91       	pop	r17
     646:	0f 91       	pop	r16
     648:	08 95       	ret

0000064a <loop>:
    return;
  }


}
void loop(){
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	00 d0       	rcall	.+0      	; 0x650 <loop+0x6>
     650:	00 d0       	rcall	.+0      	; 0x652 <loop+0x8>
     652:	00 d0       	rcall	.+0      	; 0x654 <loop+0xa>
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
	if(digitalRead(PLAYBtn)==LOW){//Check whether Playing button is pressed.
     658:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <PLAYBtn>
     65c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalRead>
     660:	89 2b       	or	r24, r25
     662:	b9 f4       	brne	.+46     	; 0x692 <loop+0x48>
		playAudio(playfilename);
     664:	63 e4       	ldi	r22, 0x43	; 67
     666:	71 e0       	ldi	r23, 0x01	; 1
     668:	ce 01       	movw	r24, r28
     66a:	01 96       	adiw	r24, 0x01	; 1
     66c:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN6StringC1EPKc>
     670:	ce 01       	movw	r24, r28
     672:	01 96       	adiw	r24, 0x01	; 1
     674:	0e 94 46 01 	call	0x28c	; 0x28c <_Z9playAudio6String>
     678:	ce 01       	movw	r24, r28
     67a:	01 96       	adiw	r24, 0x01	; 1
     67c:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN6StringD1Ev>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     680:	2f ef       	ldi	r18, 0xFF	; 255
     682:	89 e6       	ldi	r24, 0x69	; 105
     684:	98 e1       	ldi	r25, 0x18	; 24
     686:	21 50       	subi	r18, 0x01	; 1
     688:	80 40       	sbci	r24, 0x00	; 0
     68a:	90 40       	sbci	r25, 0x00	; 0
     68c:	e1 f7       	brne	.-8      	; 0x686 <loop+0x3c>
     68e:	00 c0       	rjmp	.+0      	; 0x690 <loop+0x46>
     690:	00 00       	nop
		_delay_ms(500);	
	}
	if(digitalRead(RECBtn)==LOW){//Check whether Recording button is pressed.
     692:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <RECBtn>
     696:	0e 94 2d 06 	call	0xc5a	; 0xc5a <digitalRead>
     69a:	89 2b       	or	r24, r25
     69c:	b9 f4       	brne	.+46     	; 0x6cc <loop+0x82>
		RecordAudio(recfilename);
     69e:	67 e3       	ldi	r22, 0x37	; 55
     6a0:	71 e0       	ldi	r23, 0x01	; 1
     6a2:	ce 01       	movw	r24, r28
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN6StringC1EPKc>
     6aa:	ce 01       	movw	r24, r28
     6ac:	01 96       	adiw	r24, 0x01	; 1
     6ae:	0e 94 c7 02 	call	0x58e	; 0x58e <_Z11RecordAudio6String>
     6b2:	ce 01       	movw	r24, r28
     6b4:	01 96       	adiw	r24, 0x01	; 1
     6b6:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN6StringD1Ev>
     6ba:	2f ef       	ldi	r18, 0xFF	; 255
     6bc:	89 e6       	ldi	r24, 0x69	; 105
     6be:	98 e1       	ldi	r25, 0x18	; 24
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	80 40       	sbci	r24, 0x00	; 0
     6c4:	90 40       	sbci	r25, 0x00	; 0
     6c6:	e1 f7       	brne	.-8      	; 0x6c0 <loop+0x76>
     6c8:	00 c0       	rjmp	.+0      	; 0x6ca <loop+0x80>
     6ca:	00 00       	nop
		_delay_ms(500);
	}
	
	
}
     6cc:	26 96       	adiw	r28, 0x06	; 6
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	cd bf       	out	0x3d, r28	; 61
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	08 95       	ret

000006de <__vector_1>:
    OCR2A = 179; // should give 11025 Hz, might need tweaking
    OCR2B = 80;
      // set the interrupt last thing so other stuff is not affected
}

ISR(INT0_vect){
     6de:	1f 92       	push	r1
     6e0:	0f 92       	push	r0
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	0f 92       	push	r0
     6e6:	11 24       	eor	r1, r1
     6e8:	2f 93       	push	r18
     6ea:	3f 93       	push	r19
     6ec:	4f 93       	push	r20
     6ee:	5f 93       	push	r21
     6f0:	6f 93       	push	r22
     6f2:	7f 93       	push	r23
     6f4:	8f 93       	push	r24
     6f6:	9f 93       	push	r25
     6f8:	af 93       	push	r26
     6fa:	bf 93       	push	r27
     6fc:	ef 93       	push	r30
     6fe:	ff 93       	push	r31
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	cd b7       	in	r28, 0x3d	; 61
     706:	de b7       	in	r29, 0x3e	; 62
     708:	26 97       	sbiw	r28, 0x06	; 6
     70a:	de bf       	out	0x3e, r29	; 62
     70c:	cd bf       	out	0x3d, r28	; 61
	if(PlayFlag==1)
     70e:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <PlayFlag>
     712:	88 23       	and	r24, r24
     714:	71 f0       	breq	.+28     	; 0x732 <__vector_1+0x54>
	{
		playAudio(playfilename);
     716:	63 e4       	ldi	r22, 0x43	; 67
     718:	71 e0       	ldi	r23, 0x01	; 1
     71a:	ce 01       	movw	r24, r28
     71c:	01 96       	adiw	r24, 0x01	; 1
     71e:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN6StringC1EPKc>
     722:	ce 01       	movw	r24, r28
     724:	01 96       	adiw	r24, 0x01	; 1
     726:	0e 94 46 01 	call	0x28c	; 0x28c <_Z9playAudio6String>
     72a:	ce 01       	movw	r24, r28
     72c:	01 96       	adiw	r24, 0x01	; 1
     72e:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN6StringD1Ev>
	}
	if(RecFlag==1)
     732:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <RecFlag>
     736:	88 23       	and	r24, r24
     738:	71 f0       	breq	.+28     	; 0x756 <__vector_1+0x78>
	{
		RecordAudio(recfilename);
     73a:	67 e3       	ldi	r22, 0x37	; 55
     73c:	71 e0       	ldi	r23, 0x01	; 1
     73e:	ce 01       	movw	r24, r28
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN6StringC1EPKc>
     746:	ce 01       	movw	r24, r28
     748:	01 96       	adiw	r24, 0x01	; 1
     74a:	0e 94 c7 02 	call	0x58e	; 0x58e <_Z11RecordAudio6String>
     74e:	ce 01       	movw	r24, r28
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN6StringD1Ev>
	}
	
}
     756:	26 96       	adiw	r28, 0x06	; 6
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	0f be       	out	0x3f, r0	; 63
     760:	cd bf       	out	0x3d, r28	; 61
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	ff 91       	pop	r31
     768:	ef 91       	pop	r30
     76a:	bf 91       	pop	r27
     76c:	af 91       	pop	r26
     76e:	9f 91       	pop	r25
     770:	8f 91       	pop	r24
     772:	7f 91       	pop	r23
     774:	6f 91       	pop	r22
     776:	5f 91       	pop	r21
     778:	4f 91       	pop	r20
     77a:	3f 91       	pop	r19
     77c:	2f 91       	pop	r18
     77e:	0f 90       	pop	r0
     780:	0f be       	out	0x3f, r0	; 63
     782:	0f 90       	pop	r0
     784:	1f 90       	pop	r1
     786:	18 95       	reti

00000788 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	08 95       	ret

0000078e <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     78e:	08 95       	ret

00000790 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     790:	1f 92       	push	r1
     792:	0f 92       	push	r0
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	0f 92       	push	r0
     798:	11 24       	eor	r1, r1
     79a:	2f 93       	push	r18
     79c:	8f 93       	push	r24
     79e:	9f 93       	push	r25
     7a0:	ef 93       	push	r30
     7a2:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     7a4:	e0 91 9b 02 	lds	r30, 0x029B	; 0x80029b <Serial+0x10>
     7a8:	f0 91 9c 02 	lds	r31, 0x029C	; 0x80029c <Serial+0x11>
     7ac:	80 81       	ld	r24, Z
     7ae:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <Serial+0x16>
     7b2:	f0 91 a2 02 	lds	r31, 0x02A2	; 0x8002a2 <Serial+0x17>
     7b6:	82 fd       	sbrc	r24, 2
     7b8:	12 c0       	rjmp	.+36     	; 0x7de <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     7ba:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     7bc:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <Serial+0x19>
     7c0:	8f 5f       	subi	r24, 0xFF	; 255
     7c2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     7c4:	20 91 a5 02 	lds	r18, 0x02A5	; 0x8002a5 <Serial+0x1a>
     7c8:	82 17       	cp	r24, r18
     7ca:	51 f0       	breq	.+20     	; 0x7e0 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     7cc:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <Serial+0x19>
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	e5 57       	subi	r30, 0x75	; 117
     7d4:	fd 4f       	sbci	r31, 0xFD	; 253
     7d6:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     7d8:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <Serial+0x19>
     7dc:	01 c0       	rjmp	.+2      	; 0x7e0 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     7de:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     7e0:	ff 91       	pop	r31
     7e2:	ef 91       	pop	r30
     7e4:	9f 91       	pop	r25
     7e6:	8f 91       	pop	r24
     7e8:	2f 91       	pop	r18
     7ea:	0f 90       	pop	r0
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	0f 90       	pop	r0
     7f0:	1f 90       	pop	r1
     7f2:	18 95       	reti

000007f4 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     7f4:	1f 92       	push	r1
     7f6:	0f 92       	push	r0
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	0f 92       	push	r0
     7fc:	11 24       	eor	r1, r1
     7fe:	2f 93       	push	r18
     800:	3f 93       	push	r19
     802:	4f 93       	push	r20
     804:	5f 93       	push	r21
     806:	6f 93       	push	r22
     808:	7f 93       	push	r23
     80a:	8f 93       	push	r24
     80c:	9f 93       	push	r25
     80e:	af 93       	push	r26
     810:	bf 93       	push	r27
     812:	ef 93       	push	r30
     814:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     816:	8b e8       	ldi	r24, 0x8B	; 139
     818:	92 e0       	ldi	r25, 0x02	; 2
     81a:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     81e:	ff 91       	pop	r31
     820:	ef 91       	pop	r30
     822:	bf 91       	pop	r27
     824:	af 91       	pop	r26
     826:	9f 91       	pop	r25
     828:	8f 91       	pop	r24
     82a:	7f 91       	pop	r23
     82c:	6f 91       	pop	r22
     82e:	5f 91       	pop	r21
     830:	4f 91       	pop	r20
     832:	3f 91       	pop	r19
     834:	2f 91       	pop	r18
     836:	0f 90       	pop	r0
     838:	0f be       	out	0x3f, r0	; 63
     83a:	0f 90       	pop	r0
     83c:	1f 90       	pop	r1
     83e:	18 95       	reti

00000840 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     840:	8b e8       	ldi	r24, 0x8B	; 139
     842:	92 e0       	ldi	r25, 0x02	; 2
     844:	0e 94 ae 1a 	call	0x355c	; 0x355c <_ZN14HardwareSerial9availableEv>
     848:	21 e0       	ldi	r18, 0x01	; 1
     84a:	89 2b       	or	r24, r25
     84c:	09 f4       	brne	.+2      	; 0x850 <_Z17Serial0_availablev+0x10>
     84e:	20 e0       	ldi	r18, 0x00	; 0
}
     850:	82 2f       	mov	r24, r18
     852:	08 95       	ret

00000854 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     854:	eb e8       	ldi	r30, 0x8B	; 139
     856:	f2 e0       	ldi	r31, 0x02	; 2
     858:	13 82       	std	Z+3, r1	; 0x03
     85a:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     85c:	88 ee       	ldi	r24, 0xE8	; 232
     85e:	93 e0       	ldi	r25, 0x03	; 3
     860:	a0 e0       	ldi	r26, 0x00	; 0
     862:	b0 e0       	ldi	r27, 0x00	; 0
     864:	84 83       	std	Z+4, r24	; 0x04
     866:	95 83       	std	Z+5, r25	; 0x05
     868:	a6 83       	std	Z+6, r26	; 0x06
     86a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     86c:	86 e2       	ldi	r24, 0x26	; 38
     86e:	92 e0       	ldi	r25, 0x02	; 2
     870:	91 83       	std	Z+1, r25	; 0x01
     872:	80 83       	st	Z, r24
     874:	85 ec       	ldi	r24, 0xC5	; 197
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	95 87       	std	Z+13, r25	; 0x0d
     87a:	84 87       	std	Z+12, r24	; 0x0c
     87c:	84 ec       	ldi	r24, 0xC4	; 196
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	97 87       	std	Z+15, r25	; 0x0f
     882:	86 87       	std	Z+14, r24	; 0x0e
     884:	80 ec       	ldi	r24, 0xC0	; 192
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	91 8b       	std	Z+17, r25	; 0x11
     88a:	80 8b       	std	Z+16, r24	; 0x10
     88c:	81 ec       	ldi	r24, 0xC1	; 193
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	93 8b       	std	Z+19, r25	; 0x13
     892:	82 8b       	std	Z+18, r24	; 0x12
     894:	82 ec       	ldi	r24, 0xC2	; 194
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	95 8b       	std	Z+21, r25	; 0x15
     89a:	84 8b       	std	Z+20, r24	; 0x14
     89c:	86 ec       	ldi	r24, 0xC6	; 198
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	97 8b       	std	Z+23, r25	; 0x17
     8a2:	86 8b       	std	Z+22, r24	; 0x16
     8a4:	11 8e       	std	Z+25, r1	; 0x19
     8a6:	12 8e       	std	Z+26, r1	; 0x1a
     8a8:	13 8e       	std	Z+27, r1	; 0x1b
     8aa:	14 8e       	std	Z+28, r1	; 0x1c
     8ac:	08 95       	ret

000008ae <initVariant>:
     8ae:	08 95       	ret

000008b0 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     8b0:	0e 94 5e 05 	call	0xabc	; 0xabc <init>

	initVariant();
     8b4:	0e 94 57 04 	call	0x8ae	; 0x8ae <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     8b8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     8bc:	cf ee       	ldi	r28, 0xEF	; 239
     8be:	da e1       	ldi	r29, 0x1A	; 26
#endif
	
	setup();
    
	for (;;) {
		loop();
     8c0:	0e 94 25 03 	call	0x64a	; 0x64a <loop>
		if (serialEventRun) serialEventRun();
     8c4:	20 97       	sbiw	r28, 0x00	; 0
     8c6:	e1 f3       	breq	.-8      	; 0x8c0 <main+0x10>
     8c8:	0e 94 ef 1a 	call	0x35de	; 0x35de <_Z14serialEventRunv>
     8cc:	f9 cf       	rjmp	.-14     	; 0x8c0 <main+0x10>

000008ce <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
  return n;
}
     8ce:	cf 92       	push	r12
     8d0:	df 92       	push	r13
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	6c 01       	movw	r12, r24
     8e0:	7a 01       	movw	r14, r20
     8e2:	8b 01       	movw	r16, r22
     8e4:	c0 e0       	ldi	r28, 0x00	; 0
     8e6:	d0 e0       	ldi	r29, 0x00	; 0
     8e8:	ce 15       	cp	r28, r14
     8ea:	df 05       	cpc	r29, r15
     8ec:	81 f0       	breq	.+32     	; 0x90e <__stack+0xf>
     8ee:	d8 01       	movw	r26, r16
     8f0:	6d 91       	ld	r22, X+
     8f2:	8d 01       	movw	r16, r26
     8f4:	d6 01       	movw	r26, r12
     8f6:	ed 91       	ld	r30, X+
     8f8:	fc 91       	ld	r31, X
     8fa:	01 90       	ld	r0, Z+
     8fc:	f0 81       	ld	r31, Z
     8fe:	e0 2d       	mov	r30, r0
     900:	c6 01       	movw	r24, r12
     902:	09 95       	icall
     904:	89 2b       	or	r24, r25
     906:	11 f0       	breq	.+4      	; 0x90c <__stack+0xd>
     908:	21 96       	adiw	r28, 0x01	; 1
     90a:	ee cf       	rjmp	.-36     	; 0x8e8 <_ZN5Print5writeEPKhj+0x1a>
     90c:	7e 01       	movw	r14, r28
     90e:	c7 01       	movw	r24, r14
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	ff 90       	pop	r15
     91a:	ef 90       	pop	r14
     91c:	df 90       	pop	r13
     91e:	cf 90       	pop	r12
     920:	08 95       	ret

00000922 <_ZN5Print5writeEPKc>:
     922:	61 15       	cp	r22, r1
     924:	71 05       	cpc	r23, r1
     926:	79 f0       	breq	.+30     	; 0x946 <_ZN5Print5writeEPKc+0x24>
     928:	fb 01       	movw	r30, r22
     92a:	01 90       	ld	r0, Z+
     92c:	00 20       	and	r0, r0
     92e:	e9 f7       	brne	.-6      	; 0x92a <_ZN5Print5writeEPKc+0x8>
     930:	31 97       	sbiw	r30, 0x01	; 1
     932:	af 01       	movw	r20, r30
     934:	46 1b       	sub	r20, r22
     936:	57 0b       	sbc	r21, r23
     938:	dc 01       	movw	r26, r24
     93a:	ed 91       	ld	r30, X+
     93c:	fc 91       	ld	r31, X
     93e:	02 80       	ldd	r0, Z+2	; 0x02
     940:	f3 81       	ldd	r31, Z+3	; 0x03
     942:	e0 2d       	mov	r30, r0
     944:	09 94       	ijmp
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	08 95       	ret

0000094c <_ZN5Print5printEPKc>:
     94c:	0c 94 91 04 	jmp	0x922	; 0x922 <_ZN5Print5writeEPKc>

00000950 <_ZN5Print7printlnEv>:
     950:	63 ef       	ldi	r22, 0xF3	; 243
     952:	71 e0       	ldi	r23, 0x01	; 1
     954:	0c 94 91 04 	jmp	0x922	; 0x922 <_ZN5Print5writeEPKc>

00000958 <_ZN5Print11printNumberEmh>:
     958:	8f 92       	push	r8
     95a:	9f 92       	push	r9
     95c:	af 92       	push	r10
     95e:	bf 92       	push	r11
     960:	ef 92       	push	r14
     962:	ff 92       	push	r15
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
     970:	a1 97       	sbiw	r28, 0x21	; 33
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	de bf       	out	0x3e, r29	; 62
     978:	0f be       	out	0x3f, r0	; 63
     97a:	cd bf       	out	0x3d, r28	; 61
     97c:	7c 01       	movw	r14, r24
     97e:	fa 01       	movw	r30, r20
     980:	cb 01       	movw	r24, r22
     982:	19 a2       	std	Y+33, r1	; 0x21
     984:	22 30       	cpi	r18, 0x02	; 2
     986:	08 f4       	brcc	.+2      	; 0x98a <_ZN5Print11printNumberEmh+0x32>
     988:	2a e0       	ldi	r18, 0x0A	; 10
     98a:	8e 01       	movw	r16, r28
     98c:	0f 5d       	subi	r16, 0xDF	; 223
     98e:	1f 4f       	sbci	r17, 0xFF	; 255
     990:	82 2e       	mov	r8, r18
     992:	91 2c       	mov	r9, r1
     994:	a1 2c       	mov	r10, r1
     996:	b1 2c       	mov	r11, r1
     998:	bf 01       	movw	r22, r30
     99a:	a5 01       	movw	r20, r10
     99c:	94 01       	movw	r18, r8
     99e:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__udivmodsi4>
     9a2:	f9 01       	movw	r30, r18
     9a4:	ca 01       	movw	r24, r20
     9a6:	01 50       	subi	r16, 0x01	; 1
     9a8:	11 09       	sbc	r17, r1
     9aa:	6a 30       	cpi	r22, 0x0A	; 10
     9ac:	10 f4       	brcc	.+4      	; 0x9b2 <_ZN5Print11printNumberEmh+0x5a>
     9ae:	60 5d       	subi	r22, 0xD0	; 208
     9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <_ZN5Print11printNumberEmh+0x5c>
     9b2:	69 5c       	subi	r22, 0xC9	; 201
     9b4:	d8 01       	movw	r26, r16
     9b6:	6c 93       	st	X, r22
     9b8:	23 2b       	or	r18, r19
     9ba:	24 2b       	or	r18, r20
     9bc:	25 2b       	or	r18, r21
     9be:	61 f7       	brne	.-40     	; 0x998 <_ZN5Print11printNumberEmh+0x40>
     9c0:	b8 01       	movw	r22, r16
     9c2:	c7 01       	movw	r24, r14
     9c4:	0e 94 91 04 	call	0x922	; 0x922 <_ZN5Print5writeEPKc>
     9c8:	a1 96       	adiw	r28, 0x21	; 33
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	de bf       	out	0x3e, r29	; 62
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	cd bf       	out	0x3d, r28	; 61
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	1f 91       	pop	r17
     9da:	0f 91       	pop	r16
     9dc:	ff 90       	pop	r15
     9de:	ef 90       	pop	r14
     9e0:	bf 90       	pop	r11
     9e2:	af 90       	pop	r10
     9e4:	9f 90       	pop	r9
     9e6:	8f 90       	pop	r8
     9e8:	08 95       	ret

000009ea <_ZN5Print5printEmi>:
     9ea:	21 15       	cp	r18, r1
     9ec:	31 05       	cpc	r19, r1
     9ee:	41 f4       	brne	.+16     	; 0xa00 <_ZN5Print5printEmi+0x16>
     9f0:	dc 01       	movw	r26, r24
     9f2:	ed 91       	ld	r30, X+
     9f4:	fc 91       	ld	r31, X
     9f6:	01 90       	ld	r0, Z+
     9f8:	f0 81       	ld	r31, Z
     9fa:	e0 2d       	mov	r30, r0
     9fc:	64 2f       	mov	r22, r20
     9fe:	09 94       	ijmp
     a00:	0c 94 ac 04 	jmp	0x958	; 0x958 <_ZN5Print11printNumberEmh>

00000a04 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
     a04:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
     a06:	ab 01       	movw	r20, r22
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <_ZN5Print5printEmi>

00000a10 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     a10:	1f 92       	push	r1
     a12:	0f 92       	push	r0
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	0f 92       	push	r0
     a18:	11 24       	eor	r1, r1
     a1a:	2f 93       	push	r18
     a1c:	3f 93       	push	r19
     a1e:	8f 93       	push	r24
     a20:	9f 93       	push	r25
     a22:	af 93       	push	r26
     a24:	bf 93       	push	r27
     a26:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <timer0_millis>
     a2a:	90 91 ea 04 	lds	r25, 0x04EA	; 0x8004ea <timer0_millis+0x1>
     a2e:	a0 91 eb 04 	lds	r26, 0x04EB	; 0x8004eb <timer0_millis+0x2>
     a32:	b0 91 ec 04 	lds	r27, 0x04EC	; 0x8004ec <timer0_millis+0x3>
     a36:	30 91 e8 04 	lds	r19, 0x04E8	; 0x8004e8 <timer0_fract>
     a3a:	23 e0       	ldi	r18, 0x03	; 3
     a3c:	23 0f       	add	r18, r19
     a3e:	2d 37       	cpi	r18, 0x7D	; 125
     a40:	20 f4       	brcc	.+8      	; 0xa4a <__vector_16+0x3a>
     a42:	01 96       	adiw	r24, 0x01	; 1
     a44:	a1 1d       	adc	r26, r1
     a46:	b1 1d       	adc	r27, r1
     a48:	05 c0       	rjmp	.+10     	; 0xa54 <__vector_16+0x44>
     a4a:	26 e8       	ldi	r18, 0x86	; 134
     a4c:	23 0f       	add	r18, r19
     a4e:	02 96       	adiw	r24, 0x02	; 2
     a50:	a1 1d       	adc	r26, r1
     a52:	b1 1d       	adc	r27, r1
     a54:	20 93 e8 04 	sts	0x04E8, r18	; 0x8004e8 <timer0_fract>
     a58:	80 93 e9 04 	sts	0x04E9, r24	; 0x8004e9 <timer0_millis>
     a5c:	90 93 ea 04 	sts	0x04EA, r25	; 0x8004ea <timer0_millis+0x1>
     a60:	a0 93 eb 04 	sts	0x04EB, r26	; 0x8004eb <timer0_millis+0x2>
     a64:	b0 93 ec 04 	sts	0x04EC, r27	; 0x8004ec <timer0_millis+0x3>
     a68:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <timer0_overflow_count>
     a6c:	90 91 ee 04 	lds	r25, 0x04EE	; 0x8004ee <timer0_overflow_count+0x1>
     a70:	a0 91 ef 04 	lds	r26, 0x04EF	; 0x8004ef <timer0_overflow_count+0x2>
     a74:	b0 91 f0 04 	lds	r27, 0x04F0	; 0x8004f0 <timer0_overflow_count+0x3>
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	a1 1d       	adc	r26, r1
     a7c:	b1 1d       	adc	r27, r1
     a7e:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <timer0_overflow_count>
     a82:	90 93 ee 04 	sts	0x04EE, r25	; 0x8004ee <timer0_overflow_count+0x1>
     a86:	a0 93 ef 04 	sts	0x04EF, r26	; 0x8004ef <timer0_overflow_count+0x2>
     a8a:	b0 93 f0 04 	sts	0x04F0, r27	; 0x8004f0 <timer0_overflow_count+0x3>
     a8e:	bf 91       	pop	r27
     a90:	af 91       	pop	r26
     a92:	9f 91       	pop	r25
     a94:	8f 91       	pop	r24
     a96:	3f 91       	pop	r19
     a98:	2f 91       	pop	r18
     a9a:	0f 90       	pop	r0
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	0f 90       	pop	r0
     aa0:	1f 90       	pop	r1
     aa2:	18 95       	reti

00000aa4 <millis>:
     aa4:	2f b7       	in	r18, 0x3f	; 63
     aa6:	f8 94       	cli
     aa8:	60 91 e9 04 	lds	r22, 0x04E9	; 0x8004e9 <timer0_millis>
     aac:	70 91 ea 04 	lds	r23, 0x04EA	; 0x8004ea <timer0_millis+0x1>
     ab0:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <timer0_millis+0x2>
     ab4:	90 91 ec 04 	lds	r25, 0x04EC	; 0x8004ec <timer0_millis+0x3>
     ab8:	2f bf       	out	0x3f, r18	; 63
     aba:	08 95       	ret

00000abc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     abc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     abe:	84 b5       	in	r24, 0x24	; 36
     ac0:	82 60       	ori	r24, 0x02	; 2
     ac2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     ac4:	84 b5       	in	r24, 0x24	; 36
     ac6:	81 60       	ori	r24, 0x01	; 1
     ac8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     aca:	85 b5       	in	r24, 0x25	; 37
     acc:	82 60       	ori	r24, 0x02	; 2
     ace:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     ad0:	85 b5       	in	r24, 0x25	; 37
     ad2:	81 60       	ori	r24, 0x01	; 1
     ad4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     ad6:	ee e6       	ldi	r30, 0x6E	; 110
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	80 81       	ld	r24, Z
     adc:	81 60       	ori	r24, 0x01	; 1
     ade:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     ae0:	e1 e8       	ldi	r30, 0x81	; 129
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     ae6:	80 81       	ld	r24, Z
     ae8:	82 60       	ori	r24, 0x02	; 2
     aea:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     aec:	80 81       	ld	r24, Z
     aee:	81 60       	ori	r24, 0x01	; 1
     af0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     af2:	e0 e8       	ldi	r30, 0x80	; 128
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	80 81       	ld	r24, Z
     af8:	81 60       	ori	r24, 0x01	; 1
     afa:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     afc:	e1 eb       	ldi	r30, 0xB1	; 177
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	80 81       	ld	r24, Z
     b02:	84 60       	ori	r24, 0x04	; 4
     b04:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     b06:	e0 eb       	ldi	r30, 0xB0	; 176
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	81 60       	ori	r24, 0x01	; 1
     b0e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     b10:	ea e7       	ldi	r30, 0x7A	; 122
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	84 60       	ori	r24, 0x04	; 4
     b18:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     b1a:	80 81       	ld	r24, Z
     b1c:	82 60       	ori	r24, 0x02	; 2
     b1e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     b20:	80 81       	ld	r24, Z
     b22:	81 60       	ori	r24, 0x01	; 1
     b24:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     b26:	80 81       	ld	r24, Z
     b28:	80 68       	ori	r24, 0x80	; 128
     b2a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     b2c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     b30:	08 95       	ret

00000b32 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     b32:	83 30       	cpi	r24, 0x03	; 3
     b34:	81 f0       	breq	.+32     	; 0xb56 <turnOffPWM+0x24>
     b36:	28 f4       	brcc	.+10     	; 0xb42 <turnOffPWM+0x10>
     b38:	81 30       	cpi	r24, 0x01	; 1
     b3a:	99 f0       	breq	.+38     	; 0xb62 <turnOffPWM+0x30>
     b3c:	82 30       	cpi	r24, 0x02	; 2
     b3e:	a1 f0       	breq	.+40     	; 0xb68 <turnOffPWM+0x36>
     b40:	08 95       	ret
     b42:	87 30       	cpi	r24, 0x07	; 7
     b44:	a9 f0       	breq	.+42     	; 0xb70 <turnOffPWM+0x3e>
     b46:	88 30       	cpi	r24, 0x08	; 8
     b48:	b9 f0       	breq	.+46     	; 0xb78 <turnOffPWM+0x46>
     b4a:	84 30       	cpi	r24, 0x04	; 4
     b4c:	d1 f4       	brne	.+52     	; 0xb82 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     b4e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     b52:	8f 7d       	andi	r24, 0xDF	; 223
     b54:	03 c0       	rjmp	.+6      	; 0xb5c <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     b56:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     b5a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     b5c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     b60:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     b62:	84 b5       	in	r24, 0x24	; 36
     b64:	8f 77       	andi	r24, 0x7F	; 127
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     b68:	84 b5       	in	r24, 0x24	; 36
     b6a:	8f 7d       	andi	r24, 0xDF	; 223
     b6c:	84 bd       	out	0x24, r24	; 36
     b6e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     b70:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	03 c0       	rjmp	.+6      	; 0xb7e <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     b78:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     b7c:	8f 7d       	andi	r24, 0xDF	; 223
     b7e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     b82:	08 95       	ret

00000b84 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	fc 01       	movw	r30, r24
     b8c:	e4 58       	subi	r30, 0x84	; 132
     b8e:	ff 4f       	sbci	r31, 0xFF	; 255
     b90:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     b92:	fc 01       	movw	r30, r24
     b94:	e0 57       	subi	r30, 0x70	; 112
     b96:	ff 4f       	sbci	r31, 0xFF	; 255
     b98:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     b9a:	88 23       	and	r24, r24
     b9c:	61 f1       	breq	.+88     	; 0xbf6 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	fc 01       	movw	r30, r24
     ba6:	e8 54       	subi	r30, 0x48	; 72
     ba8:	ff 4f       	sbci	r31, 0xFF	; 255
     baa:	c5 91       	lpm	r28, Z+
     bac:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     bae:	fc 01       	movw	r30, r24
     bb0:	e2 55       	subi	r30, 0x52	; 82
     bb2:	ff 4f       	sbci	r31, 0xFF	; 255
     bb4:	a5 91       	lpm	r26, Z+
     bb6:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     bb8:	61 11       	cpse	r22, r1
     bba:	09 c0       	rjmp	.+18     	; 0xbce <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     bbc:	9f b7       	in	r25, 0x3f	; 63
                cli();
     bbe:	f8 94       	cli
		*reg &= ~bit;
     bc0:	88 81       	ld	r24, Y
     bc2:	20 95       	com	r18
     bc4:	82 23       	and	r24, r18
     bc6:	88 83       	st	Y, r24
		*out &= ~bit;
     bc8:	ec 91       	ld	r30, X
     bca:	2e 23       	and	r18, r30
     bcc:	0b c0       	rjmp	.+22     	; 0xbe4 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     bce:	62 30       	cpi	r22, 0x02	; 2
     bd0:	61 f4       	brne	.+24     	; 0xbea <pinMode+0x66>
		uint8_t oldSREG = SREG;
     bd2:	9f b7       	in	r25, 0x3f	; 63
                cli();
     bd4:	f8 94       	cli
		*reg &= ~bit;
     bd6:	88 81       	ld	r24, Y
     bd8:	32 2f       	mov	r19, r18
     bda:	30 95       	com	r19
     bdc:	83 23       	and	r24, r19
     bde:	88 83       	st	Y, r24
		*out |= bit;
     be0:	ec 91       	ld	r30, X
     be2:	2e 2b       	or	r18, r30
     be4:	2c 93       	st	X, r18
		SREG = oldSREG;
     be6:	9f bf       	out	0x3f, r25	; 63
     be8:	06 c0       	rjmp	.+12     	; 0xbf6 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     bea:	8f b7       	in	r24, 0x3f	; 63
                cli();
     bec:	f8 94       	cli
		*reg |= bit;
     bee:	e8 81       	ld	r30, Y
     bf0:	2e 2b       	or	r18, r30
     bf2:	28 83       	st	Y, r18
		SREG = oldSREG;
     bf4:	8f bf       	out	0x3f, r24	; 63
	}
}
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	08 95       	ret

00000bfc <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     bfc:	1f 93       	push	r17
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     c02:	28 2f       	mov	r18, r24
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	f9 01       	movw	r30, r18
     c08:	e8 59       	subi	r30, 0x98	; 152
     c0a:	ff 4f       	sbci	r31, 0xFF	; 255
     c0c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     c0e:	f9 01       	movw	r30, r18
     c10:	e4 58       	subi	r30, 0x84	; 132
     c12:	ff 4f       	sbci	r31, 0xFF	; 255
     c14:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     c16:	f9 01       	movw	r30, r18
     c18:	e0 57       	subi	r30, 0x70	; 112
     c1a:	ff 4f       	sbci	r31, 0xFF	; 255
     c1c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     c1e:	cc 23       	and	r28, r28
     c20:	c1 f0       	breq	.+48     	; 0xc52 <digitalWrite+0x56>
     c22:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     c24:	81 11       	cpse	r24, r1
     c26:	0e 94 99 05 	call	0xb32	; 0xb32 <turnOffPWM>

	out = portOutputRegister(port);
     c2a:	ec 2f       	mov	r30, r28
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	ee 0f       	add	r30, r30
     c30:	ff 1f       	adc	r31, r31
     c32:	e2 55       	subi	r30, 0x52	; 82
     c34:	ff 4f       	sbci	r31, 0xFF	; 255
     c36:	a5 91       	lpm	r26, Z+
     c38:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     c3a:	9f b7       	in	r25, 0x3f	; 63
	cli();
     c3c:	f8 94       	cli

	if (val == LOW) {
     c3e:	11 11       	cpse	r17, r1
     c40:	04 c0       	rjmp	.+8      	; 0xc4a <digitalWrite+0x4e>
		*out &= ~bit;
     c42:	8c 91       	ld	r24, X
     c44:	d0 95       	com	r29
     c46:	d8 23       	and	r29, r24
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <digitalWrite+0x52>
	} else {
		*out |= bit;
     c4a:	ec 91       	ld	r30, X
     c4c:	de 2b       	or	r29, r30
     c4e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     c50:	9f bf       	out	0x3f, r25	; 63
}
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	1f 91       	pop	r17
     c58:	08 95       	ret

00000c5a <digitalRead>:

int digitalRead(uint8_t pin)
{
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     c5e:	28 2f       	mov	r18, r24
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	f9 01       	movw	r30, r18
     c64:	e8 59       	subi	r30, 0x98	; 152
     c66:	ff 4f       	sbci	r31, 0xFF	; 255
     c68:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     c6a:	f9 01       	movw	r30, r18
     c6c:	e4 58       	subi	r30, 0x84	; 132
     c6e:	ff 4f       	sbci	r31, 0xFF	; 255
     c70:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     c72:	f9 01       	movw	r30, r18
     c74:	e0 57       	subi	r30, 0x70	; 112
     c76:	ff 4f       	sbci	r31, 0xFF	; 255
     c78:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
     c7a:	cc 23       	and	r28, r28
     c7c:	91 f0       	breq	.+36     	; 0xca2 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     c7e:	81 11       	cpse	r24, r1
     c80:	0e 94 99 05 	call	0xb32	; 0xb32 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
     c84:	ec 2f       	mov	r30, r28
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	ee 0f       	add	r30, r30
     c8a:	ff 1f       	adc	r31, r31
     c8c:	ec 55       	subi	r30, 0x5C	; 92
     c8e:	ff 4f       	sbci	r31, 0xFF	; 255
     c90:	a5 91       	lpm	r26, Z+
     c92:	b4 91       	lpm	r27, Z
     c94:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
     c96:	ed 23       	and	r30, r29
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	21 f4       	brne	.+8      	; 0xca6 <digitalRead+0x4c>
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <digitalRead+0x4c>
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	08 95       	ret

00000cac <_ZN6StringD1Ev>:
	move(rval);
}
String::String(StringSumHelper &&rval)
{
	init();
	move(rval);
     cac:	fc 01       	movw	r30, r24
     cae:	80 81       	ld	r24, Z
     cb0:	91 81       	ldd	r25, Z+1	; 0x01
     cb2:	0c 94 83 1c 	jmp	0x3906	; 0x3906 <free>

00000cb6 <_ZN6String10invalidateEv>:
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	ec 01       	movw	r28, r24
     cbc:	88 81       	ld	r24, Y
     cbe:	99 81       	ldd	r25, Y+1	; 0x01
     cc0:	00 97       	sbiw	r24, 0x00	; 0
     cc2:	11 f0       	breq	.+4      	; 0xcc8 <_ZN6String10invalidateEv+0x12>
     cc4:	0e 94 83 1c 	call	0x3906	; 0x3906 <free>
     cc8:	19 82       	std	Y+1, r1	; 0x01
     cca:	18 82       	st	Y, r1
     ccc:	1d 82       	std	Y+5, r1	; 0x05
     cce:	1c 82       	std	Y+4, r1	; 0x04
     cd0:	1b 82       	std	Y+3, r1	; 0x03
     cd2:	1a 82       	std	Y+2, r1	; 0x02
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	08 95       	ret

00000cda <_ZN6String12changeBufferEj>:
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	ec 01       	movw	r28, r24
     ce4:	8b 01       	movw	r16, r22
     ce6:	6f 5f       	subi	r22, 0xFF	; 255
     ce8:	7f 4f       	sbci	r23, 0xFF	; 255
     cea:	88 81       	ld	r24, Y
     cec:	99 81       	ldd	r25, Y+1	; 0x01
     cee:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <realloc>
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	31 f0       	breq	.+12     	; 0xd02 <_ZN6String12changeBufferEj+0x28>
     cf6:	99 83       	std	Y+1, r25	; 0x01
     cf8:	88 83       	st	Y, r24
     cfa:	1b 83       	std	Y+3, r17	; 0x03
     cfc:	0a 83       	std	Y+2, r16	; 0x02
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	01 c0       	rjmp	.+2      	; 0xd04 <_ZN6String12changeBufferEj+0x2a>
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	0f 91       	pop	r16
     d0c:	08 95       	ret

00000d0e <_ZN6String7reserveEj>:
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	ec 01       	movw	r28, r24
     d14:	88 81       	ld	r24, Y
     d16:	99 81       	ldd	r25, Y+1	; 0x01
     d18:	89 2b       	or	r24, r25
     d1a:	29 f0       	breq	.+10     	; 0xd26 <_ZN6String7reserveEj+0x18>
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	9b 81       	ldd	r25, Y+3	; 0x03
     d20:	86 17       	cp	r24, r22
     d22:	97 07       	cpc	r25, r23
     d24:	60 f4       	brcc	.+24     	; 0xd3e <_ZN6String7reserveEj+0x30>
     d26:	ce 01       	movw	r24, r28
     d28:	0e 94 6d 06 	call	0xcda	; 0xcda <_ZN6String12changeBufferEj>
     d2c:	88 23       	and	r24, r24
     d2e:	41 f0       	breq	.+16     	; 0xd40 <_ZN6String7reserveEj+0x32>
     d30:	8c 81       	ldd	r24, Y+4	; 0x04
     d32:	9d 81       	ldd	r25, Y+5	; 0x05
     d34:	89 2b       	or	r24, r25
     d36:	19 f4       	brne	.+6      	; 0xd3e <_ZN6String7reserveEj+0x30>
     d38:	e8 81       	ld	r30, Y
     d3a:	f9 81       	ldd	r31, Y+1	; 0x01
     d3c:	10 82       	st	Z, r1
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret

00000d46 <_ZN6String4copyEPKcj>:
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	ec 01       	movw	r28, r24
     d54:	7b 01       	movw	r14, r22
     d56:	8a 01       	movw	r16, r20
     d58:	ba 01       	movw	r22, r20
     d5a:	0e 94 87 06 	call	0xd0e	; 0xd0e <_ZN6String7reserveEj>
     d5e:	81 11       	cpse	r24, r1
     d60:	04 c0       	rjmp	.+8      	; 0xd6a <_ZN6String4copyEPKcj+0x24>
     d62:	ce 01       	movw	r24, r28
     d64:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <_ZN6String10invalidateEv>
     d68:	07 c0       	rjmp	.+14     	; 0xd78 <_ZN6String4copyEPKcj+0x32>
     d6a:	1d 83       	std	Y+5, r17	; 0x05
     d6c:	0c 83       	std	Y+4, r16	; 0x04
     d6e:	b7 01       	movw	r22, r14
     d70:	88 81       	ld	r24, Y
     d72:	99 81       	ldd	r25, Y+1	; 0x01
     d74:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <strcpy>
     d78:	ce 01       	movw	r24, r28
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	ff 90       	pop	r15
     d84:	ef 90       	pop	r14
     d86:	08 95       	ret

00000d88 <_ZN6StringC1EPKc>:
     d88:	fc 01       	movw	r30, r24
     d8a:	11 82       	std	Z+1, r1	; 0x01
     d8c:	10 82       	st	Z, r1
     d8e:	13 82       	std	Z+3, r1	; 0x03
     d90:	12 82       	std	Z+2, r1	; 0x02
     d92:	15 82       	std	Z+5, r1	; 0x05
     d94:	14 82       	std	Z+4, r1	; 0x04
     d96:	61 15       	cp	r22, r1
     d98:	71 05       	cpc	r23, r1
     d9a:	51 f0       	breq	.+20     	; 0xdb0 <_ZN6StringC1EPKc+0x28>
     d9c:	fb 01       	movw	r30, r22
     d9e:	01 90       	ld	r0, Z+
     da0:	00 20       	and	r0, r0
     da2:	e9 f7       	brne	.-6      	; 0xd9e <_ZN6StringC1EPKc+0x16>
     da4:	31 97       	sbiw	r30, 0x01	; 1
     da6:	af 01       	movw	r20, r30
     da8:	46 1b       	sub	r20, r22
     daa:	57 0b       	sbc	r21, r23
     dac:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <_ZN6String4copyEPKcj>
     db0:	08 95       	ret

00000db2 <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	ec 01       	movw	r28, r24
     db8:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
     dba:	86 17       	cp	r24, r22
     dbc:	97 07       	cpc	r25, r23
     dbe:	61 f0       	breq	.+24     	; 0xdd8 <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
     dc0:	60 81       	ld	r22, Z
     dc2:	71 81       	ldd	r23, Z+1	; 0x01
     dc4:	61 15       	cp	r22, r1
     dc6:	71 05       	cpc	r23, r1
     dc8:	29 f0       	breq	.+10     	; 0xdd4 <_ZN6StringaSERKS_+0x22>
     dca:	44 81       	ldd	r20, Z+4	; 0x04
     dcc:	55 81       	ldd	r21, Z+5	; 0x05
     dce:	0e 94 a3 06 	call	0xd46	; 0xd46 <_ZN6String4copyEPKcj>
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <_ZN6StringaSERKS_+0x26>
	else invalidate();
     dd4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <_ZN6String10invalidateEv>
	
	return *this;
}
     dd8:	ce 01       	movw	r24, r28
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	08 95       	ret

00000de0 <_ZN6StringC1ERKS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
     de0:	fc 01       	movw	r30, r24
     de2:	11 82       	std	Z+1, r1	; 0x01
     de4:	10 82       	st	Z, r1
	capacity = 0;
     de6:	13 82       	std	Z+3, r1	; 0x03
     de8:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
     dea:	15 82       	std	Z+5, r1	; 0x05
     dec:	14 82       	std	Z+4, r1	; 0x04
}

String::String(const String &value)
{
	init();
	*this = value;
     dee:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <_ZN6StringaSERKS_>

00000df2 <_ZN5SDLib4File5writeEh>:
// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	1f 92       	push	r1
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	69 83       	std	Y+1, r22	; 0x01
     dfe:	dc 01       	movw	r26, r24
     e00:	ed 91       	ld	r30, X+
     e02:	fc 91       	ld	r31, X
     e04:	02 80       	ldd	r0, Z+2	; 0x02
     e06:	f3 81       	ldd	r31, Z+3	; 0x03
     e08:	e0 2d       	mov	r30, r0
     e0a:	41 e0       	ldi	r20, 0x01	; 1
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	be 01       	movw	r22, r28
     e10:	6f 5f       	subi	r22, 0xFF	; 255
     e12:	7f 4f       	sbci	r23, 0xFF	; 255
     e14:	09 95       	icall
     e16:	0f 90       	pop	r0
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	08 95       	ret

00000e1e <_ZN5SDLib4File5writeEPKhj>:
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	ec 01       	movw	r28, r24
     e24:	89 8d       	ldd	r24, Y+25	; 0x19
     e26:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	39 f4       	brne	.+14     	; 0xe3a <_ZN5SDLib4File5writeEPKhj+0x1c>
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	9b 83       	std	Y+3, r25	; 0x03
     e32:	8a 83       	std	Y+2, r24	; 0x02
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	0b c0       	rjmp	.+22     	; 0xe50 <_ZN5SDLib4File5writeEPKhj+0x32>
     e3a:	fc 01       	movw	r30, r24
     e3c:	13 82       	std	Z+3, r1	; 0x03
     e3e:	12 82       	std	Z+2, r1	; 0x02
     e40:	0e 94 1d 14 	call	0x283a	; 0x283a <_ZN6SdFile5writeEPKvj>
     e44:	e9 8d       	ldd	r30, Y+25	; 0x19
     e46:	fa 8d       	ldd	r31, Y+26	; 0x1a
     e48:	22 81       	ldd	r18, Z+2	; 0x02
     e4a:	33 81       	ldd	r19, Z+3	; 0x03
     e4c:	23 2b       	or	r18, r19
     e4e:	71 f7       	brne	.-36     	; 0xe2c <_ZN5SDLib4File5writeEPKhj+0xe>
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	08 95       	ret

00000e56 <_ZN5SDLib4File5flushEv>:
     e56:	fc 01       	movw	r30, r24
     e58:	81 8d       	ldd	r24, Z+25	; 0x19
     e5a:	92 8d       	ldd	r25, Z+26	; 0x1a
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	11 f0       	breq	.+4      	; 0xe64 <_ZN5SDLib4File5flushEv+0xe>
     e60:	0c 94 7f 11 	jmp	0x22fe	; 0x22fe <_ZN6SdFile4syncEv>
     e64:	08 95       	ret

00000e66 <_ZN6SdFile4readEv>:
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	1f 92       	push	r1
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	41 e0       	ldi	r20, 0x01	; 1
     e72:	50 e0       	ldi	r21, 0x00	; 0
     e74:	be 01       	movw	r22, r28
     e76:	6f 5f       	subi	r22, 0xFF	; 255
     e78:	7f 4f       	sbci	r23, 0xFF	; 255
     e7a:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <_ZN6SdFile4readEPvj>
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	19 f4       	brne	.+6      	; 0xe88 <_ZN6SdFile4readEv+0x22>
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <_ZN6SdFile4readEv+0x26>
     e88:	8f ef       	ldi	r24, 0xFF	; 255
     e8a:	9f ef       	ldi	r25, 0xFF	; 255
     e8c:	0f 90       	pop	r0
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	08 95       	ret

00000e94 <_ZN5SDLib4File4readEv>:
     e94:	fc 01       	movw	r30, r24
     e96:	81 8d       	ldd	r24, Z+25	; 0x19
     e98:	92 8d       	ldd	r25, Z+26	; 0x1a
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	11 f0       	breq	.+4      	; 0xea2 <_ZN5SDLib4File4readEv+0xe>
     e9e:	0c 94 33 07 	jmp	0xe66	; 0xe66 <_ZN6SdFile4readEv>
     ea2:	8f ef       	ldi	r24, 0xFF	; 255
     ea4:	9f ef       	ldi	r25, 0xFF	; 255
     ea6:	08 95       	ret

00000ea8 <_ZN5SDLib4File4peekEv>:
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	fc 01       	movw	r30, r24
     eb2:	81 8d       	ldd	r24, Z+25	; 0x19
     eb4:	92 8d       	ldd	r25, Z+26	; 0x1a
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	b9 f0       	breq	.+46     	; 0xee8 <_ZN5SDLib4File4peekEv+0x40>
     eba:	ef 01       	movw	r28, r30
     ebc:	0e 94 33 07 	call	0xe66	; 0xe66 <_ZN6SdFile4readEv>
     ec0:	8c 01       	movw	r16, r24
     ec2:	0f 3f       	cpi	r16, 0xFF	; 255
     ec4:	8f ef       	ldi	r24, 0xFF	; 255
     ec6:	18 07       	cpc	r17, r24
     ec8:	91 f0       	breq	.+36     	; 0xeee <_ZN5SDLib4File4peekEv+0x46>
     eca:	89 8d       	ldd	r24, Y+25	; 0x19
     ecc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ece:	fc 01       	movw	r30, r24
     ed0:	42 85       	ldd	r20, Z+10	; 0x0a
     ed2:	53 85       	ldd	r21, Z+11	; 0x0b
     ed4:	64 85       	ldd	r22, Z+12	; 0x0c
     ed6:	75 85       	ldd	r23, Z+13	; 0x0d
     ed8:	41 50       	subi	r20, 0x01	; 1
     eda:	51 09       	sbc	r21, r1
     edc:	61 09       	sbc	r22, r1
     ede:	71 09       	sbc	r23, r1
     ee0:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <_ZN6SdFile7seekSetEm>
     ee4:	c8 01       	movw	r24, r16
     ee6:	05 c0       	rjmp	.+10     	; 0xef2 <_ZN5SDLib4File4peekEv+0x4a>
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <_ZN5SDLib4File4peekEv+0x4a>
     eee:	8f ef       	ldi	r24, 0xFF	; 255
     ef0:	9f ef       	ldi	r25, 0xFF	; 255
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	1f 91       	pop	r17
     ef8:	0f 91       	pop	r16
     efa:	08 95       	ret

00000efc <_ZN5SDLib4FileC1E6SdFilePKc>:
     efc:	ef 92       	push	r14
     efe:	ff 92       	push	r15
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	ec 01       	movw	r28, r24
     f0a:	7b 01       	movw	r14, r22
     f0c:	8a 01       	movw	r16, r20
     f0e:	1b 82       	std	Y+3, r1	; 0x03
     f10:	1a 82       	std	Y+2, r1	; 0x02
     f12:	88 ee       	ldi	r24, 0xE8	; 232
     f14:	93 e0       	ldi	r25, 0x03	; 3
     f16:	a0 e0       	ldi	r26, 0x00	; 0
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	8c 83       	std	Y+4, r24	; 0x04
     f1c:	9d 83       	std	Y+5, r25	; 0x05
     f1e:	ae 83       	std	Y+6, r26	; 0x06
     f20:	bf 83       	std	Y+7, r27	; 0x07
     f22:	86 e0       	ldi	r24, 0x06	; 6
     f24:	92 e0       	ldi	r25, 0x02	; 2
     f26:	99 83       	std	Y+1, r25	; 0x01
     f28:	88 83       	st	Y, r24
     f2a:	8d e1       	ldi	r24, 0x1D	; 29
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <malloc>
     f32:	9a 8f       	std	Y+26, r25	; 0x1a
     f34:	89 8f       	std	Y+25, r24	; 0x19
     f36:	00 97       	sbiw	r24, 0x00	; 0
     f38:	79 f0       	breq	.+30     	; 0xf58 <_ZN5SDLib4FileC1E6SdFilePKc+0x5c>
     f3a:	2d e1       	ldi	r18, 0x1D	; 29
     f3c:	f7 01       	movw	r30, r14
     f3e:	dc 01       	movw	r26, r24
     f40:	01 90       	ld	r0, Z+
     f42:	0d 92       	st	X+, r0
     f44:	2a 95       	dec	r18
     f46:	e1 f7       	brne	.-8      	; 0xf40 <_ZN5SDLib4FileC1E6SdFilePKc+0x44>
     f48:	4c e0       	ldi	r20, 0x0C	; 12
     f4a:	50 e0       	ldi	r21, 0x00	; 0
     f4c:	b8 01       	movw	r22, r16
     f4e:	ce 01       	movw	r24, r28
     f50:	0c 96       	adiw	r24, 0x0c	; 12
     f52:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <strncpy>
     f56:	18 8e       	std	Y+24, r1	; 0x18
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	ff 90       	pop	r15
     f62:	ef 90       	pop	r14
     f64:	08 95       	ret

00000f66 <_ZN5SDLib4FileC1Ev>:
     f66:	fc 01       	movw	r30, r24
     f68:	13 82       	std	Z+3, r1	; 0x03
     f6a:	12 82       	std	Z+2, r1	; 0x02
     f6c:	88 ee       	ldi	r24, 0xE8	; 232
     f6e:	93 e0       	ldi	r25, 0x03	; 3
     f70:	a0 e0       	ldi	r26, 0x00	; 0
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	84 83       	std	Z+4, r24	; 0x04
     f76:	95 83       	std	Z+5, r25	; 0x05
     f78:	a6 83       	std	Z+6, r26	; 0x06
     f7a:	b7 83       	std	Z+7, r27	; 0x07
     f7c:	86 e0       	ldi	r24, 0x06	; 6
     f7e:	92 e0       	ldi	r25, 0x02	; 2
     f80:	91 83       	std	Z+1, r25	; 0x01
     f82:	80 83       	st	Z, r24
     f84:	12 8e       	std	Z+26, r1	; 0x1a
     f86:	11 8e       	std	Z+25, r1	; 0x19
     f88:	14 86       	std	Z+12, r1	; 0x0c
     f8a:	08 95       	ret

00000f8c <_ZN5SDLib4File4seekEm>:
  if (_file)
    _file->sync();
}

boolean File::seek(uint32_t pos) {
  if (! _file) return false;
     f8c:	fc 01       	movw	r30, r24
     f8e:	81 8d       	ldd	r24, Z+25	; 0x19
     f90:	92 8d       	ldd	r25, Z+26	; 0x1a
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	29 f0       	breq	.+10     	; 0xfa0 <_ZN5SDLib4File4seekEm+0x14>

  return _file->seekSet(pos);
     f96:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <_ZN6SdFile7seekSetEm>
     f9a:	91 e0       	ldi	r25, 0x01	; 1
     f9c:	81 11       	cpse	r24, r1
     f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <_ZN5SDLib4File4seekEm+0x16>
  if (_file)
    _file->sync();
}

boolean File::seek(uint32_t pos) {
  if (! _file) return false;
     fa0:	90 e0       	ldi	r25, 0x00	; 0

  return _file->seekSet(pos);
}
     fa2:	89 2f       	mov	r24, r25
     fa4:	08 95       	ret

00000fa6 <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) return -1;
     fa6:	dc 01       	movw	r26, r24
     fa8:	59 96       	adiw	r26, 0x19	; 25
     faa:	ed 91       	ld	r30, X+
     fac:	fc 91       	ld	r31, X
     fae:	5a 97       	sbiw	r26, 0x1a	; 26
     fb0:	30 97       	sbiw	r30, 0x00	; 0
     fb2:	29 f0       	breq	.+10     	; 0xfbe <_ZN5SDLib4File8positionEv+0x18>
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
     fb4:	62 85       	ldd	r22, Z+10	; 0x0a
     fb6:	73 85       	ldd	r23, Z+11	; 0x0b
     fb8:	84 85       	ldd	r24, Z+12	; 0x0c
     fba:	95 85       	ldd	r25, Z+13	; 0x0d
  return _file->curPosition();
     fbc:	08 95       	ret

  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) return -1;
     fbe:	6f ef       	ldi	r22, 0xFF	; 255
     fc0:	7f ef       	ldi	r23, 0xFF	; 255
     fc2:	cb 01       	movw	r24, r22
  return _file->curPosition();
}
     fc4:	08 95       	ret

00000fc6 <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) return 0;
     fc6:	dc 01       	movw	r26, r24
     fc8:	59 96       	adiw	r26, 0x19	; 25
     fca:	ed 91       	ld	r30, X+
     fcc:	fc 91       	ld	r31, X
     fce:	5a 97       	sbiw	r26, 0x1a	; 26
     fd0:	30 97       	sbiw	r30, 0x00	; 0
     fd2:	29 f0       	breq	.+10     	; 0xfde <_ZN5SDLib4File4sizeEv+0x18>
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
     fd4:	63 89       	ldd	r22, Z+19	; 0x13
     fd6:	74 89       	ldd	r23, Z+20	; 0x14
     fd8:	85 89       	ldd	r24, Z+21	; 0x15
     fda:	96 89       	ldd	r25, Z+22	; 0x16
  return _file->fileSize();
     fdc:	08 95       	ret
  if (! _file) return -1;
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) return 0;
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	cb 01       	movw	r24, r22
  return _file->fileSize();
}
     fe4:	08 95       	ret

00000fe6 <_ZN5SDLib4File9availableEv>:
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
     fe6:	cf 92       	push	r12
     fe8:	df 92       	push	r13
     fea:	ef 92       	push	r14
     fec:	ff 92       	push	r15
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
  if (! _file) return 0;
     ff2:	fc 01       	movw	r30, r24
     ff4:	21 8d       	ldd	r18, Z+25	; 0x19
     ff6:	32 8d       	ldd	r19, Z+26	; 0x1a
     ff8:	23 2b       	or	r18, r19
     ffa:	d9 f0       	breq	.+54     	; 0x1032 <_ZN5SDLib4File9availableEv+0x4c>
     ffc:	ec 01       	movw	r28, r24

  uint32_t n = size() - position();
     ffe:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <_ZN5SDLib4File4sizeEv>
    1002:	6b 01       	movw	r12, r22
    1004:	7c 01       	movw	r14, r24
    1006:	ce 01       	movw	r24, r28
    1008:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <_ZN5SDLib4File8positionEv>

  return n > 0X7FFF ? 0X7FFF : n;
    100c:	a7 01       	movw	r20, r14
    100e:	96 01       	movw	r18, r12
    1010:	26 1b       	sub	r18, r22
    1012:	37 0b       	sbc	r19, r23
    1014:	48 0b       	sbc	r20, r24
    1016:	59 0b       	sbc	r21, r25
    1018:	da 01       	movw	r26, r20
    101a:	c9 01       	movw	r24, r18
    101c:	81 15       	cp	r24, r1
    101e:	30 e8       	ldi	r19, 0x80	; 128
    1020:	93 07       	cpc	r25, r19
    1022:	a1 05       	cpc	r26, r1
    1024:	b1 05       	cpc	r27, r1
    1026:	38 f0       	brcs	.+14     	; 0x1036 <_ZN5SDLib4File9availableEv+0x50>
    1028:	8f ef       	ldi	r24, 0xFF	; 255
    102a:	9f e7       	ldi	r25, 0x7F	; 127
    102c:	a0 e0       	ldi	r26, 0x00	; 0
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <_ZN5SDLib4File9availableEv+0x50>
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	90 e0       	ldi	r25, 0x00	; 0

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	ff 90       	pop	r15
    103c:	ef 90       	pop	r14
    103e:	df 90       	pop	r13
    1040:	cf 90       	pop	r12
    1042:	08 95       	ret

00001044 <_ZN5SDLib4File5closeEv>:
uint32_t File::size() {
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	ec 01       	movw	r28, r24
  if (_file) {
    104a:	89 8d       	ldd	r24, Y+25	; 0x19
    104c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    104e:	00 97       	sbiw	r24, 0x00	; 0
    1050:	41 f0       	breq	.+16     	; 0x1062 <_ZN5SDLib4File5closeEv+0x1e>
    _file->close();
    1052:	0e 94 c6 11 	call	0x238c	; 0x238c <_ZN6SdFile5closeEv>
    free(_file); 
    1056:	89 8d       	ldd	r24, Y+25	; 0x19
    1058:	9a 8d       	ldd	r25, Y+26	; 0x1a
    105a:	0e 94 83 1c 	call	0x3906	; 0x3906 <free>
    _file = 0;
    105e:	1a 8e       	std	Y+26, r1	; 0x1a
    1060:	19 8e       	std	Y+25, r1	; 0x19
    nfilecount--;
    Serial.print("Deleted ");
    Serial.println(nfilecount, DEC);
    */
  }
}
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	08 95       	ret

00001068 <_ZN5SDLib4FilecvbEv>:

File::operator bool() {
  if (_file) 
    1068:	dc 01       	movw	r26, r24
    106a:	59 96       	adiw	r26, 0x19	; 25
    106c:	ed 91       	ld	r30, X+
    106e:	fc 91       	ld	r31, X
    1070:	5a 97       	sbiw	r26, 0x1a	; 26
    1072:	30 97       	sbiw	r30, 0x00	; 0
    1074:	21 f0       	breq	.+8      	; 0x107e <_ZN5SDLib4FilecvbEv+0x16>
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	95 81       	ldd	r25, Z+5	; 0x05
    107a:	91 11       	cpse	r25, r1
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <_ZN5SDLib4FilecvbEv+0x18>
    return  _file->isOpen();
  return false;
    107e:	80 e0       	ldi	r24, 0x00	; 0
}
    1080:	08 95       	ret

00001082 <_ZN5SDLib15callback_removeER6SdFilePKcbPv>:
}

void File::rewindDirectory(void) {  
  if (isDirectory())
    _file->rewind();
}
    1082:	44 23       	and	r20, r20
    1084:	39 f0       	breq	.+14     	; 0x1094 <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x12>
    1086:	0e 94 f6 13 	call	0x27ec	; 0x27ec <_ZN6SdFile6removeEPS_PKc>
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	81 11       	cpse	r24, r1
    108e:	03 c0       	rjmp	.+6      	; 0x1096 <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x14>
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	01 c0       	rjmp	.+2      	; 0x1096 <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x14>
    1094:	91 e0       	ldi	r25, 0x01	; 1
    1096:	89 2f       	mov	r24, r25
    1098:	08 95       	ret

0000109a <_ZN8SdVolume4initEP7Sd2Card>:
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	ec 01       	movw	r28, r24
    10a4:	8b 01       	movw	r16, r22
    10a6:	41 e0       	ldi	r20, 0x01	; 1
    10a8:	0e 94 61 19 	call	0x32c2	; 0x32c2 <_ZN8SdVolume4initEP7Sd2Cardh>
    10ac:	81 11       	cpse	r24, r1
    10ae:	09 c0       	rjmp	.+18     	; 0x10c2 <_ZN8SdVolume4initEP7Sd2Card+0x28>
    10b0:	40 e0       	ldi	r20, 0x00	; 0
    10b2:	b8 01       	movw	r22, r16
    10b4:	ce 01       	movw	r24, r28
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	1f 91       	pop	r17
    10bc:	0f 91       	pop	r16
    10be:	0c 94 61 19 	jmp	0x32c2	; 0x32c2 <_ZN8SdVolume4initEP7Sd2Cardh>
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	0f 91       	pop	r16
    10cc:	08 95       	ret

000010ce <_ZN5SDLib20getNextPathComponentEPKcPjPc>:
    10ce:	ef 92       	push	r14
    10d0:	ff 92       	push	r15
    10d2:	0f 93       	push	r16
    10d4:	1f 93       	push	r17
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	da 01       	movw	r26, r20
    10dc:	eb 01       	movw	r28, r22
    10de:	28 81       	ld	r18, Y
    10e0:	39 81       	ldd	r19, Y+1	; 0x01
    10e2:	fc 01       	movw	r30, r24
    10e4:	e2 0f       	add	r30, r18
    10e6:	f3 1f       	adc	r31, r19
    10e8:	40 81       	ld	r20, Z
    10ea:	4f 32       	cpi	r20, 0x2F	; 47
    10ec:	11 f4       	brne	.+4      	; 0x10f2 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x24>
    10ee:	2f 5f       	subi	r18, 0xFF	; 255
    10f0:	3f 4f       	sbci	r19, 0xFF	; 255
    10f2:	8c 01       	movw	r16, r24
    10f4:	02 0f       	add	r16, r18
    10f6:	13 1f       	adc	r17, r19
    10f8:	7d 01       	movw	r14, r26
    10fa:	e0 e0       	ldi	r30, 0x00	; 0
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	e8 01       	movw	r28, r16
    1100:	59 91       	ld	r21, Y+
    1102:	8e 01       	movw	r16, r28
    1104:	5f 32       	cpi	r21, 0x2F	; 47
    1106:	59 f0       	breq	.+22     	; 0x111e <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x50>
    1108:	55 23       	and	r21, r21
    110a:	49 f0       	breq	.+18     	; 0x111e <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x50>
    110c:	31 96       	adiw	r30, 0x01	; 1
    110e:	2f 5f       	subi	r18, 0xFF	; 255
    1110:	3f 4f       	sbci	r19, 0xFF	; 255
    1112:	e7 01       	movw	r28, r14
    1114:	59 93       	st	Y+, r21
    1116:	7e 01       	movw	r14, r28
    1118:	ec 30       	cpi	r30, 0x0C	; 12
    111a:	f1 05       	cpc	r31, r1
    111c:	81 f7       	brne	.-32     	; 0x10fe <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x30>
    111e:	ea 0f       	add	r30, r26
    1120:	fb 1f       	adc	r31, r27
    1122:	10 82       	st	Z, r1
    1124:	fc 01       	movw	r30, r24
    1126:	e2 0f       	add	r30, r18
    1128:	f3 1f       	adc	r31, r19
    112a:	40 81       	ld	r20, Z
    112c:	4f 32       	cpi	r20, 0x2F	; 47
    112e:	11 f4       	brne	.+4      	; 0x1134 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x66>
    1130:	2f 5f       	subi	r18, 0xFF	; 255
    1132:	3f 4f       	sbci	r19, 0xFF	; 255
    1134:	fb 01       	movw	r30, r22
    1136:	31 83       	std	Z+1, r19	; 0x01
    1138:	20 83       	st	Z, r18
    113a:	fc 01       	movw	r30, r24
    113c:	e2 0f       	add	r30, r18
    113e:	f3 1f       	adc	r31, r19
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 81       	ld	r25, Z
    1144:	91 11       	cpse	r25, r1
    1146:	01 c0       	rjmp	.+2      	; 0x114a <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x7c>
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	ff 90       	pop	r15
    1154:	ef 90       	pop	r14
    1156:	08 95       	ret

00001158 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>:
    1158:	4f 92       	push	r4
    115a:	5f 92       	push	r5
    115c:	6f 92       	push	r6
    115e:	7f 92       	push	r7
    1160:	8f 92       	push	r8
    1162:	9f 92       	push	r9
    1164:	af 92       	push	r10
    1166:	bf 92       	push	r11
    1168:	cf 92       	push	r12
    116a:	df 92       	push	r13
    116c:	ef 92       	push	r14
    116e:	ff 92       	push	r15
    1170:	0f 93       	push	r16
    1172:	1f 93       	push	r17
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	c9 54       	subi	r28, 0x49	; 73
    117e:	d1 09       	sbc	r29, r1
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	5c 01       	movw	r10, r24
    118c:	6b 01       	movw	r12, r22
    118e:	3a 01       	movw	r6, r20
    1190:	49 01       	movw	r8, r18
    1192:	19 a2       	std	Y+33, r1	; 0x21
    1194:	18 a2       	std	Y+32, r1	; 0x20
    1196:	8a e1       	ldi	r24, 0x1A	; 26
    1198:	92 e0       	ldi	r25, 0x02	; 2
    119a:	9f 8f       	std	Y+31, r25	; 0x1f
    119c:	8e 8f       	std	Y+30, r24	; 0x1e
    119e:	1b a2       	std	Y+35, r1	; 0x23
    11a0:	1c 82       	std	Y+4, r1	; 0x04
    11a2:	1b 82       	std	Y+3, r1	; 0x03
    11a4:	9a 83       	std	Y+2, r25	; 0x02
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	1e 82       	std	Y+6, r1	; 0x06
    11aa:	2a 96       	adiw	r28, 0x0a	; 10
    11ac:	1f ae       	std	Y+63, r1	; 0x3f
    11ae:	1e ae       	std	Y+62, r1	; 0x3e
    11b0:	2a 97       	sbiw	r28, 0x0a	; 10
    11b2:	8b 01       	movw	r16, r22
    11b4:	7e 01       	movw	r14, r28
    11b6:	8e e1       	ldi	r24, 0x1E	; 30
    11b8:	e8 0e       	add	r14, r24
    11ba:	f1 1c       	adc	r15, r1
    11bc:	44 24       	eor	r4, r4
    11be:	43 94       	inc	r4
    11c0:	ae 01       	movw	r20, r28
    11c2:	45 5c       	subi	r20, 0xC5	; 197
    11c4:	5f 4f       	sbci	r21, 0xFF	; 255
    11c6:	be 01       	movw	r22, r28
    11c8:	68 5b       	subi	r22, 0xB8	; 184
    11ca:	7f 4f       	sbci	r23, 0xFF	; 255
    11cc:	c5 01       	movw	r24, r10
    11ce:	0e 94 67 08 	call	0x10ce	; 0x10ce <_ZN5SDLib20getNextPathComponentEPKcPjPc>
    11d2:	58 2e       	mov	r5, r24
    11d4:	48 2f       	mov	r20, r24
    11d6:	44 25       	eor	r20, r4
    11d8:	94 01       	movw	r18, r8
    11da:	be 01       	movw	r22, r28
    11dc:	65 5c       	subi	r22, 0xC5	; 197
    11de:	7f 4f       	sbci	r23, 0xFF	; 255
    11e0:	c8 01       	movw	r24, r16
    11e2:	f3 01       	movw	r30, r6
    11e4:	09 95       	icall
    11e6:	81 11       	cpse	r24, r1
    11e8:	08 c0       	rjmp	.+16     	; 0x11fa <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xa2>
    11ea:	0c 15       	cp	r16, r12
    11ec:	1d 05       	cpc	r17, r13
    11ee:	19 f0       	breq	.+6      	; 0x11f6 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x9e>
    11f0:	c8 01       	movw	r24, r16
    11f2:	0e 94 c6 11 	call	0x238c	; 0x238c <_ZN6SdFile5closeEv>
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	27 c0       	rjmp	.+78     	; 0x1248 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xf0>
    11fa:	55 20       	and	r5, r5
    11fc:	b9 f0       	breq	.+46     	; 0x122c <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xd4>
    11fe:	21 e0       	ldi	r18, 0x01	; 1
    1200:	ae 01       	movw	r20, r28
    1202:	45 5c       	subi	r20, 0xC5	; 197
    1204:	5f 4f       	sbci	r21, 0xFF	; 255
    1206:	b8 01       	movw	r22, r16
    1208:	c7 01       	movw	r24, r14
    120a:	0e 94 ee 12 	call	0x25dc	; 0x25dc <_ZN6SdFile4openEPS_PKch>
    120e:	58 2e       	mov	r5, r24
    1210:	0c 15       	cp	r16, r12
    1212:	1d 05       	cpc	r17, r13
    1214:	99 f0       	breq	.+38     	; 0x123c <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xe4>
    1216:	c8 01       	movw	r24, r16
    1218:	0e 94 c6 11 	call	0x238c	; 0x238c <_ZN6SdFile5closeEv>
    121c:	55 20       	and	r5, r5
    121e:	59 f3       	breq	.-42     	; 0x11f6 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x9e>
    1220:	90 2f       	mov	r25, r16
    1222:	81 2f       	mov	r24, r17
    1224:	87 01       	movw	r16, r14
    1226:	e9 2e       	mov	r14, r25
    1228:	f8 2e       	mov	r15, r24
    122a:	ca cf       	rjmp	.-108    	; 0x11c0 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x68>
    122c:	0c 15       	cp	r16, r12
    122e:	1d 05       	cpc	r17, r13
    1230:	19 f0       	breq	.+6      	; 0x1238 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xe0>
    1232:	c8 01       	movw	r24, r16
    1234:	0e 94 c6 11 	call	0x238c	; 0x238c <_ZN6SdFile5closeEv>
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	06 c0       	rjmp	.+12     	; 0x1248 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xf0>
    123c:	88 23       	and	r24, r24
    123e:	d9 f2       	breq	.-74     	; 0x11f6 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x9e>
    1240:	8e 01       	movw	r16, r28
    1242:	0f 5f       	subi	r16, 0xFF	; 255
    1244:	1f 4f       	sbci	r17, 0xFF	; 255
    1246:	ec cf       	rjmp	.-40     	; 0x1220 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xc8>
    1248:	c7 5b       	subi	r28, 0xB7	; 183
    124a:	df 4f       	sbci	r29, 0xFF	; 255
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	ff 90       	pop	r15
    1260:	ef 90       	pop	r14
    1262:	df 90       	pop	r13
    1264:	cf 90       	pop	r12
    1266:	bf 90       	pop	r11
    1268:	af 90       	pop	r10
    126a:	9f 90       	pop	r9
    126c:	8f 90       	pop	r8
    126e:	7f 90       	pop	r7
    1270:	6f 90       	pop	r6
    1272:	5f 90       	pop	r5
    1274:	4f 90       	pop	r4
    1276:	08 95       	ret

00001278 <_ZN5SDLib7SDClass5beginEh>:
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	ec 01       	movw	r28, r24
    1282:	16 2f       	mov	r17, r22
    1284:	8f a5       	ldd	r24, Y+47	; 0x2f
    1286:	88 23       	and	r24, r24
    1288:	21 f0       	breq	.+8      	; 0x1292 <_ZN5SDLib7SDClass5beginEh+0x1a>
    128a:	ce 01       	movw	r24, r28
    128c:	8a 96       	adiw	r24, 0x2a	; 42
    128e:	0e 94 c6 11 	call	0x238c	; 0x238c <_ZN6SdFile5closeEv>
    1292:	41 2f       	mov	r20, r17
    1294:	61 e0       	ldi	r22, 0x01	; 1
    1296:	ce 01       	movw	r24, r28
    1298:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <_ZN7Sd2Card4initEhh>
    129c:	88 23       	and	r24, r24
    129e:	89 f0       	breq	.+34     	; 0x12c2 <_ZN5SDLib7SDClass5beginEh+0x4a>
    12a0:	8e 01       	movw	r16, r28
    12a2:	04 5f       	subi	r16, 0xF4	; 244
    12a4:	1f 4f       	sbci	r17, 0xFF	; 255
    12a6:	be 01       	movw	r22, r28
    12a8:	c8 01       	movw	r24, r16
    12aa:	0e 94 4d 08 	call	0x109a	; 0x109a <_ZN8SdVolume4initEP7Sd2Card>
    12ae:	88 23       	and	r24, r24
    12b0:	41 f0       	breq	.+16     	; 0x12c2 <_ZN5SDLib7SDClass5beginEh+0x4a>
    12b2:	b8 01       	movw	r22, r16
    12b4:	ce 01       	movw	r24, r28
    12b6:	8a 96       	adiw	r24, 0x2a	; 42
    12b8:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN6SdFile8openRootEP8SdVolume>
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	81 11       	cpse	r24, r1
    12c0:	01 c0       	rjmp	.+2      	; 0x12c4 <_ZN5SDLib7SDClass5beginEh+0x4c>
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	89 2f       	mov	r24, r25
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	08 95       	ret

000012d0 <_ZN6SdFileC1ERKS_>:
    12d0:	fc 01       	movw	r30, r24
    12d2:	db 01       	movw	r26, r22
    12d4:	12 96       	adiw	r26, 0x02	; 2
    12d6:	8d 91       	ld	r24, X+
    12d8:	9c 91       	ld	r25, X
    12da:	13 97       	sbiw	r26, 0x03	; 3
    12dc:	93 83       	std	Z+3, r25	; 0x03
    12de:	82 83       	std	Z+2, r24	; 0x02
    12e0:	8a e1       	ldi	r24, 0x1A	; 26
    12e2:	92 e0       	ldi	r25, 0x02	; 2
    12e4:	91 83       	std	Z+1, r25	; 0x01
    12e6:	80 83       	st	Z, r24
    12e8:	14 96       	adiw	r26, 0x04	; 4
    12ea:	8c 91       	ld	r24, X
    12ec:	14 97       	sbiw	r26, 0x04	; 4
    12ee:	84 83       	std	Z+4, r24	; 0x04
    12f0:	15 96       	adiw	r26, 0x05	; 5
    12f2:	8c 91       	ld	r24, X
    12f4:	15 97       	sbiw	r26, 0x05	; 5
    12f6:	85 83       	std	Z+5, r24	; 0x05
    12f8:	16 96       	adiw	r26, 0x06	; 6
    12fa:	4d 91       	ld	r20, X+
    12fc:	5d 91       	ld	r21, X+
    12fe:	6d 91       	ld	r22, X+
    1300:	7c 91       	ld	r23, X
    1302:	19 97       	sbiw	r26, 0x09	; 9
    1304:	46 83       	std	Z+6, r20	; 0x06
    1306:	57 83       	std	Z+7, r21	; 0x07
    1308:	60 87       	std	Z+8, r22	; 0x08
    130a:	71 87       	std	Z+9, r23	; 0x09
    130c:	1a 96       	adiw	r26, 0x0a	; 10
    130e:	4d 91       	ld	r20, X+
    1310:	5d 91       	ld	r21, X+
    1312:	6d 91       	ld	r22, X+
    1314:	7c 91       	ld	r23, X
    1316:	1d 97       	sbiw	r26, 0x0d	; 13
    1318:	42 87       	std	Z+10, r20	; 0x0a
    131a:	53 87       	std	Z+11, r21	; 0x0b
    131c:	64 87       	std	Z+12, r22	; 0x0c
    131e:	75 87       	std	Z+13, r23	; 0x0d
    1320:	1e 96       	adiw	r26, 0x0e	; 14
    1322:	4d 91       	ld	r20, X+
    1324:	5d 91       	ld	r21, X+
    1326:	6d 91       	ld	r22, X+
    1328:	7c 91       	ld	r23, X
    132a:	51 97       	sbiw	r26, 0x11	; 17
    132c:	46 87       	std	Z+14, r20	; 0x0e
    132e:	57 87       	std	Z+15, r21	; 0x0f
    1330:	60 8b       	std	Z+16, r22	; 0x10
    1332:	71 8b       	std	Z+17, r23	; 0x11
    1334:	52 96       	adiw	r26, 0x12	; 18
    1336:	8c 91       	ld	r24, X
    1338:	52 97       	sbiw	r26, 0x12	; 18
    133a:	82 8b       	std	Z+18, r24	; 0x12
    133c:	53 96       	adiw	r26, 0x13	; 19
    133e:	4d 91       	ld	r20, X+
    1340:	5d 91       	ld	r21, X+
    1342:	6d 91       	ld	r22, X+
    1344:	7c 91       	ld	r23, X
    1346:	56 97       	sbiw	r26, 0x16	; 22
    1348:	43 8b       	std	Z+19, r20	; 0x13
    134a:	54 8b       	std	Z+20, r21	; 0x14
    134c:	65 8b       	std	Z+21, r22	; 0x15
    134e:	76 8b       	std	Z+22, r23	; 0x16
    1350:	57 96       	adiw	r26, 0x17	; 23
    1352:	4d 91       	ld	r20, X+
    1354:	5d 91       	ld	r21, X+
    1356:	6d 91       	ld	r22, X+
    1358:	7c 91       	ld	r23, X
    135a:	5a 97       	sbiw	r26, 0x1a	; 26
    135c:	47 8b       	std	Z+23, r20	; 0x17
    135e:	50 8f       	std	Z+24, r21	; 0x18
    1360:	61 8f       	std	Z+25, r22	; 0x19
    1362:	72 8f       	std	Z+26, r23	; 0x1a
    1364:	5b 96       	adiw	r26, 0x1b	; 27
    1366:	8d 91       	ld	r24, X+
    1368:	9c 91       	ld	r25, X
    136a:	5c 97       	sbiw	r26, 0x1c	; 28
    136c:	94 8f       	std	Z+28, r25	; 0x1c
    136e:	83 8f       	std	Z+27, r24	; 0x1b
    1370:	08 95       	ret

00001372 <_ZN5SDLib7SDClass12getParentDirEPKcPi>:
    1372:	4f 92       	push	r4
    1374:	5f 92       	push	r5
    1376:	6f 92       	push	r6
    1378:	7f 92       	push	r7
    137a:	8f 92       	push	r8
    137c:	9f 92       	push	r9
    137e:	af 92       	push	r10
    1380:	bf 92       	push	r11
    1382:	cf 92       	push	r12
    1384:	df 92       	push	r13
    1386:	ef 92       	push	r14
    1388:	ff 92       	push	r15
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	c7 54       	subi	r28, 0x47	; 71
    1398:	d1 09       	sbc	r29, r1
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	5c 01       	movw	r10, r24
    13a6:	4a 01       	movw	r8, r20
    13a8:	39 01       	movw	r6, r18
    13aa:	19 a2       	std	Y+33, r1	; 0x21
    13ac:	18 a2       	std	Y+32, r1	; 0x20
    13ae:	8a e1       	ldi	r24, 0x1A	; 26
    13b0:	92 e0       	ldi	r25, 0x02	; 2
    13b2:	9f 8f       	std	Y+31, r25	; 0x1f
    13b4:	8e 8f       	std	Y+30, r24	; 0x1e
    13b6:	1b a2       	std	Y+35, r1	; 0x23
    13b8:	1c 82       	std	Y+4, r1	; 0x04
    13ba:	1b 82       	std	Y+3, r1	; 0x03
    13bc:	9a 83       	std	Y+2, r25	; 0x02
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	1e 82       	std	Y+6, r1	; 0x06
    13c2:	64 5f       	subi	r22, 0xF4	; 244
    13c4:	7f 4f       	sbci	r23, 0xFF	; 255
    13c6:	6e 01       	movw	r12, r28
    13c8:	8e e1       	ldi	r24, 0x1E	; 30
    13ca:	c8 0e       	add	r12, r24
    13cc:	d1 1c       	adc	r13, r1
    13ce:	c6 01       	movw	r24, r12
    13d0:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN6SdFile8openRootEP8SdVolume>
    13d4:	74 01       	movw	r14, r8
    13d6:	8e 01       	movw	r16, r28
    13d8:	0f 5f       	subi	r16, 0xFF	; 255
    13da:	1f 4f       	sbci	r17, 0xFF	; 255
    13dc:	5c 2c       	mov	r5, r12
    13de:	4d 2c       	mov	r4, r13
    13e0:	6f e2       	ldi	r22, 0x2F	; 47
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	c7 01       	movw	r24, r14
    13e6:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <strchr>
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x7e>
    13ee:	43 c0       	rjmp	.+134    	; 0x1476 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x104>
    13f0:	f7 01       	movw	r30, r14
    13f2:	20 81       	ld	r18, Z
    13f4:	2f 32       	cpi	r18, 0x2F	; 47
    13f6:	71 f4       	brne	.+28     	; 0x1414 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xa2>
    13f8:	ff ef       	ldi	r31, 0xFF	; 255
    13fa:	ef 1a       	sub	r14, r31
    13fc:	ff 0a       	sbc	r15, r31
    13fe:	90 2f       	mov	r25, r16
    1400:	81 2f       	mov	r24, r17
    1402:	05 2d       	mov	r16, r5
    1404:	14 2d       	mov	r17, r4
    1406:	2c 01       	movw	r4, r24
    1408:	c2 01       	movw	r24, r4
    140a:	50 2e       	mov	r5, r16
    140c:	41 2e       	mov	r4, r17
    140e:	09 2f       	mov	r16, r25
    1410:	18 2f       	mov	r17, r24
    1412:	e6 cf       	rjmp	.-52     	; 0x13e0 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x6e>
    1414:	8e 19       	sub	r24, r14
    1416:	8d 30       	cpi	r24, 0x0D	; 13
    1418:	08 f0       	brcs	.+2      	; 0x141c <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xaa>
    141a:	8c e0       	ldi	r24, 0x0C	; 12
    141c:	c8 2e       	mov	r12, r24
    141e:	d1 2c       	mov	r13, r1
    1420:	a6 01       	movw	r20, r12
    1422:	b7 01       	movw	r22, r14
    1424:	ce 01       	movw	r24, r28
    1426:	cb 96       	adiw	r24, 0x3b	; 59
    1428:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <strncpy>
    142c:	eb e3       	ldi	r30, 0x3B	; 59
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	ec 0f       	add	r30, r28
    1432:	fd 1f       	adc	r31, r29
    1434:	ec 0d       	add	r30, r12
    1436:	fd 1d       	adc	r31, r13
    1438:	10 82       	st	Z, r1
    143a:	c8 01       	movw	r24, r16
    143c:	0e 94 c6 11 	call	0x238c	; 0x238c <_ZN6SdFile5closeEv>
    1440:	21 e0       	ldi	r18, 0x01	; 1
    1442:	ae 01       	movw	r20, r28
    1444:	45 5c       	subi	r20, 0xC5	; 197
    1446:	5f 4f       	sbci	r21, 0xFF	; 255
    1448:	65 2d       	mov	r22, r5
    144a:	74 2d       	mov	r23, r4
    144c:	c8 01       	movw	r24, r16
    144e:	0e 94 ee 12 	call	0x25dc	; 0x25dc <_ZN6SdFile4openEPS_PKch>
    1452:	81 11       	cpse	r24, r1
    1454:	09 c0       	rjmp	.+18     	; 0x1468 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xf6>
    1456:	f5 01       	movw	r30, r10
    1458:	13 82       	std	Z+3, r1	; 0x03
    145a:	12 82       	std	Z+2, r1	; 0x02
    145c:	8a e1       	ldi	r24, 0x1A	; 26
    145e:	92 e0       	ldi	r25, 0x02	; 2
    1460:	91 83       	std	Z+1, r25	; 0x01
    1462:	80 83       	st	Z, r24
    1464:	15 82       	std	Z+5, r1	; 0x05
    1466:	11 c0       	rjmp	.+34     	; 0x148a <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x118>
    1468:	ec 0c       	add	r14, r12
    146a:	fd 1c       	adc	r15, r13
    146c:	85 2d       	mov	r24, r5
    146e:	94 2d       	mov	r25, r4
    1470:	0e 94 c6 11 	call	0x238c	; 0x238c <_ZN6SdFile5closeEv>
    1474:	c9 cf       	rjmp	.-110    	; 0x1408 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x96>
    1476:	e8 18       	sub	r14, r8
    1478:	f9 08       	sbc	r15, r9
    147a:	f3 01       	movw	r30, r6
    147c:	f1 82       	std	Z+1, r15	; 0x01
    147e:	e0 82       	st	Z, r14
    1480:	65 2d       	mov	r22, r5
    1482:	74 2d       	mov	r23, r4
    1484:	c5 01       	movw	r24, r10
    1486:	0e 94 68 09 	call	0x12d0	; 0x12d0 <_ZN6SdFileC1ERKS_>
    148a:	c5 01       	movw	r24, r10
    148c:	c9 5b       	subi	r28, 0xB9	; 185
    148e:	df 4f       	sbci	r29, 0xFF	; 255
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	1f 91       	pop	r17
    14a0:	0f 91       	pop	r16
    14a2:	ff 90       	pop	r15
    14a4:	ef 90       	pop	r14
    14a6:	df 90       	pop	r13
    14a8:	cf 90       	pop	r12
    14aa:	bf 90       	pop	r11
    14ac:	af 90       	pop	r10
    14ae:	9f 90       	pop	r9
    14b0:	8f 90       	pop	r8
    14b2:	7f 90       	pop	r7
    14b4:	6f 90       	pop	r6
    14b6:	5f 90       	pop	r5
    14b8:	4f 90       	pop	r4
    14ba:	08 95       	ret

000014bc <_ZN5SDLib7SDClass4openEPKch>:
    14bc:	df 92       	push	r13
    14be:	ef 92       	push	r14
    14c0:	ff 92       	push	r15
    14c2:	0f 93       	push	r16
    14c4:	1f 93       	push	r17
    14c6:	cf 93       	push	r28
    14c8:	df 93       	push	r29
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	c9 55       	subi	r28, 0x59	; 89
    14d0:	d1 09       	sbc	r29, r1
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	de bf       	out	0x3e, r29	; 62
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	cd bf       	out	0x3d, r28	; 61
    14dc:	7c 01       	movw	r14, r24
    14de:	8a 01       	movw	r16, r20
    14e0:	d2 2e       	mov	r13, r18
    14e2:	9e 01       	movw	r18, r28
    14e4:	28 5a       	subi	r18, 0xA8	; 168
    14e6:	3f 4f       	sbci	r19, 0xFF	; 255
    14e8:	ce 01       	movw	r24, r28
    14ea:	cb 96       	adiw	r24, 0x3b	; 59
    14ec:	0e 94 b9 09 	call	0x1372	; 0x1372 <_ZN5SDLib7SDClass12getParentDirEPKcPi>
    14f0:	6a 96       	adiw	r28, 0x1a	; 26
    14f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    14f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    14f6:	6a 97       	sbiw	r28, 0x1a	; 26
    14f8:	08 0f       	add	r16, r24
    14fa:	19 1f       	adc	r17, r25
    14fc:	f8 01       	movw	r30, r16
    14fe:	80 81       	ld	r24, Z
    1500:	81 11       	cpse	r24, r1
    1502:	0a c0       	rjmp	.+20     	; 0x1518 <_ZN5SDLib7SDClass4openEPKch+0x5c>
    1504:	be 01       	movw	r22, r28
    1506:	65 5c       	subi	r22, 0xC5	; 197
    1508:	7f 4f       	sbci	r23, 0xFF	; 255
    150a:	ce 01       	movw	r24, r28
    150c:	01 96       	adiw	r24, 0x01	; 1
    150e:	0e 94 68 09 	call	0x12d0	; 0x12d0 <_ZN6SdFileC1ERKS_>
    1512:	44 e1       	ldi	r20, 0x14	; 20
    1514:	52 e0       	ldi	r21, 0x02	; 2
    1516:	33 c0       	rjmp	.+102    	; 0x157e <_ZN5SDLib7SDClass4openEPKch+0xc2>
    1518:	19 a2       	std	Y+33, r1	; 0x21
    151a:	18 a2       	std	Y+32, r1	; 0x20
    151c:	8a e1       	ldi	r24, 0x1A	; 26
    151e:	92 e0       	ldi	r25, 0x02	; 2
    1520:	9f 8f       	std	Y+31, r25	; 0x1f
    1522:	8e 8f       	std	Y+30, r24	; 0x1e
    1524:	1b a2       	std	Y+35, r1	; 0x23
    1526:	21 96       	adiw	r28, 0x01	; 1
    1528:	8f ad       	ldd	r24, Y+63	; 0x3f
    152a:	21 97       	sbiw	r28, 0x01	; 1
    152c:	81 11       	cpse	r24, r1
    152e:	04 c0       	rjmp	.+8      	; 0x1538 <_ZN5SDLib7SDClass4openEPKch+0x7c>
    1530:	c7 01       	movw	r24, r14
    1532:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5SDLib4FileC1Ev>
    1536:	29 c0       	rjmp	.+82     	; 0x158a <_ZN5SDLib7SDClass4openEPKch+0xce>
    1538:	2d 2d       	mov	r18, r13
    153a:	a8 01       	movw	r20, r16
    153c:	be 01       	movw	r22, r28
    153e:	65 5c       	subi	r22, 0xC5	; 197
    1540:	7f 4f       	sbci	r23, 0xFF	; 255
    1542:	ce 01       	movw	r24, r28
    1544:	4e 96       	adiw	r24, 0x1e	; 30
    1546:	0e 94 ee 12 	call	0x25dc	; 0x25dc <_ZN6SdFile4openEPS_PKch>
    154a:	88 23       	and	r24, r24
    154c:	89 f3       	breq	.-30     	; 0x1530 <_ZN5SDLib7SDClass4openEPKch+0x74>
    154e:	ce 01       	movw	r24, r28
    1550:	cb 96       	adiw	r24, 0x3b	; 59
    1552:	0e 94 c6 11 	call	0x238c	; 0x238c <_ZN6SdFile5closeEv>
    1556:	8d 2d       	mov	r24, r13
    1558:	86 70       	andi	r24, 0x06	; 6
    155a:	86 30       	cpi	r24, 0x06	; 6
    155c:	41 f4       	brne	.+16     	; 0x156e <_ZN5SDLib7SDClass4openEPKch+0xb2>
    155e:	49 a9       	ldd	r20, Y+49	; 0x31
    1560:	5a a9       	ldd	r21, Y+50	; 0x32
    1562:	6b a9       	ldd	r22, Y+51	; 0x33
    1564:	7c a9       	ldd	r23, Y+52	; 0x34
    1566:	ce 01       	movw	r24, r28
    1568:	4e 96       	adiw	r24, 0x1e	; 30
    156a:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <_ZN6SdFile7seekSetEm>
    156e:	be 01       	movw	r22, r28
    1570:	62 5e       	subi	r22, 0xE2	; 226
    1572:	7f 4f       	sbci	r23, 0xFF	; 255
    1574:	ce 01       	movw	r24, r28
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	0e 94 68 09 	call	0x12d0	; 0x12d0 <_ZN6SdFileC1ERKS_>
    157c:	a8 01       	movw	r20, r16
    157e:	be 01       	movw	r22, r28
    1580:	6f 5f       	subi	r22, 0xFF	; 255
    1582:	7f 4f       	sbci	r23, 0xFF	; 255
    1584:	c7 01       	movw	r24, r14
    1586:	0e 94 7e 07 	call	0xefc	; 0xefc <_ZN5SDLib4FileC1E6SdFilePKc>
    158a:	c7 01       	movw	r24, r14
    158c:	c7 5a       	subi	r28, 0xA7	; 167
    158e:	df 4f       	sbci	r29, 0xFF	; 255
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	1f 91       	pop	r17
    15a0:	0f 91       	pop	r16
    15a2:	ff 90       	pop	r15
    15a4:	ef 90       	pop	r14
    15a6:	df 90       	pop	r13
    15a8:	08 95       	ret

000015aa <_ZN5SDLib7SDClass6removeEPKc>:
    15aa:	fb 01       	movw	r30, r22
    15ac:	bc 01       	movw	r22, r24
    15ae:	66 5d       	subi	r22, 0xD6	; 214
    15b0:	7f 4f       	sbci	r23, 0xFF	; 255
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	41 e4       	ldi	r20, 0x41	; 65
    15b8:	58 e0       	ldi	r21, 0x08	; 8
    15ba:	cf 01       	movw	r24, r30
    15bc:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>

000015c0 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    15c0:	e1 ef       	ldi	r30, 0xF1	; 241
    15c2:	f4 e0       	ldi	r31, 0x04	; 4
    15c4:	15 82       	std	Z+5, r1	; 0x05
    15c6:	16 82       	std	Z+6, r1	; 0x06
    15c8:	11 86       	std	Z+9, r1	; 0x09
    15ca:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    15cc:	82 e0       	ldi	r24, 0x02	; 2
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	a0 e0       	ldi	r26, 0x00	; 0
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	84 87       	std	Z+12, r24	; 0x0c
    15d6:	95 87       	std	Z+13, r25	; 0x0d
    15d8:	a6 87       	std	Z+14, r26	; 0x0e
    15da:	b7 87       	std	Z+15, r27	; 0x0f
    15dc:	13 a2       	std	Z+35, r1	; 0x23
    15de:	15 a6       	std	Z+45, r1	; 0x2d
    15e0:	14 a6       	std	Z+44, r1	; 0x2c
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    15e2:	8a e1       	ldi	r24, 0x1A	; 26
    15e4:	92 e0       	ldi	r25, 0x02	; 2
    15e6:	93 a7       	std	Z+43, r25	; 0x2b
    15e8:	82 a7       	std	Z+42, r24	; 0x2a
    15ea:	17 a6       	std	Z+47, r1	; 0x2f
    15ec:	08 95       	ret

000015ee <_ZN8SPIClass14endTransactionEv.part.3>:

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    15ee:	9f b7       	in	r25, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	20 91 48 07 	lds	r18, 0x0748	; 0x800748 <_ZN8SPIClass13interruptModeE>
    15f6:	80 91 46 07 	lds	r24, 0x0746	; 0x800746 <_ZN8SPIClass13interruptSaveE>
    15fa:	21 30       	cpi	r18, 0x01	; 1
    15fc:	19 f4       	brne	.+6      	; 0x1604 <_ZN8SPIClass14endTransactionEv.part.3+0x16>
    15fe:	8d bb       	out	0x1d, r24	; 29
    1600:	9f bf       	out	0x3f, r25	; 63
    1602:	08 95       	ret
    1604:	8f bf       	out	0x3f, r24	; 63
    1606:	08 95       	ret

00001608 <_ZN11SPISettingsC1Emhh>:
    1608:	0f 93       	push	r16
    160a:	fc 01       	movw	r30, r24
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	92 e1       	ldi	r25, 0x12	; 18
    1610:	aa e7       	ldi	r26, 0x7A	; 122
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	48 17       	cp	r20, r24
    1618:	59 07       	cpc	r21, r25
    161a:	6a 07       	cpc	r22, r26
    161c:	7b 07       	cpc	r23, r27
    161e:	40 f4       	brcc	.+16     	; 0x1630 <_ZN11SPISettingsC1Emhh+0x28>
    1620:	b6 95       	lsr	r27
    1622:	a7 95       	ror	r26
    1624:	97 95       	ror	r25
    1626:	87 95       	ror	r24
    1628:	3f 5f       	subi	r19, 0xFF	; 255
    162a:	36 30       	cpi	r19, 0x06	; 6
    162c:	a1 f7       	brne	.-24     	; 0x1616 <_ZN11SPISettingsC1Emhh+0xe>
    162e:	37 e0       	ldi	r19, 0x07	; 7
    1630:	91 e0       	ldi	r25, 0x01	; 1
    1632:	93 27       	eor	r25, r19
    1634:	22 23       	and	r18, r18
    1636:	11 f0       	breq	.+4      	; 0x163c <_ZN11SPISettingsC1Emhh+0x34>
    1638:	20 e5       	ldi	r18, 0x50	; 80
    163a:	01 c0       	rjmp	.+2      	; 0x163e <_ZN11SPISettingsC1Emhh+0x36>
    163c:	20 e7       	ldi	r18, 0x70	; 112
    163e:	0c 70       	andi	r16, 0x0C	; 12
    1640:	89 2f       	mov	r24, r25
    1642:	86 95       	lsr	r24
    1644:	08 2b       	or	r16, r24
    1646:	02 2b       	or	r16, r18
    1648:	00 83       	st	Z, r16
    164a:	91 70       	andi	r25, 0x01	; 1
    164c:	91 83       	std	Z+1, r25	; 0x01
    164e:	0f 91       	pop	r16
    1650:	08 95       	ret

00001652 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    1652:	20 91 48 07 	lds	r18, 0x0748	; 0x800748 <_ZN8SPIClass13interruptModeE>
    1656:	22 23       	and	r18, r18
    1658:	99 f0       	breq	.+38     	; 0x1680 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    165a:	4f b7       	in	r20, 0x3f	; 63
    165c:	f8 94       	cli
    165e:	20 91 48 07 	lds	r18, 0x0748	; 0x800748 <_ZN8SPIClass13interruptModeE>
    1662:	21 30       	cpi	r18, 0x01	; 1
    1664:	59 f4       	brne	.+22     	; 0x167c <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    1666:	2d b3       	in	r18, 0x1d	; 29
    1668:	20 93 46 07 	sts	0x0746, r18	; 0x800746 <_ZN8SPIClass13interruptSaveE>
    166c:	3d b3       	in	r19, 0x1d	; 29
    166e:	20 91 47 07 	lds	r18, 0x0747	; 0x800747 <_ZN8SPIClass13interruptMaskE>
    1672:	20 95       	com	r18
    1674:	23 23       	and	r18, r19
    1676:	2d bb       	out	0x1d, r18	; 29
    1678:	4f bf       	out	0x3f, r20	; 63
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    167c:	40 93 46 07 	sts	0x0746, r20	; 0x800746 <_ZN8SPIClass13interruptSaveE>
    1680:	8c bd       	out	0x2c, r24	; 44
    1682:	9d bd       	out	0x2d, r25	; 45
    1684:	08 95       	ret

00001686 <_ZN8SPIClass8transferEh>:
    1686:	8e bd       	out	0x2e, r24	; 46
    1688:	00 00       	nop
    168a:	0d b4       	in	r0, 0x2d	; 45
    168c:	07 fe       	sbrs	r0, 7
    168e:	fd cf       	rjmp	.-6      	; 0x168a <_ZN8SPIClass8transferEh+0x4>
    1690:	8e b5       	in	r24, 0x2e	; 46
    1692:	08 95       	ret

00001694 <_ZL6spiRecv>:
    1694:	8f ef       	ldi	r24, 0xFF	; 255
    1696:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <_ZN8SPIClass8transferEh>

0000169a <_ZN7Sd2Card14chipSelectHighEv>:
    169a:	61 e0       	ldi	r22, 0x01	; 1
    169c:	fc 01       	movw	r30, r24
    169e:	84 81       	ldd	r24, Z+4	; 0x04
    16a0:	0e 94 fe 05 	call	0xbfc	; 0xbfc <digitalWrite>
    16a4:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <_ZL20chip_select_asserted>
    16a8:	88 23       	and	r24, r24
    16aa:	39 f0       	breq	.+14     	; 0x16ba <_ZN7Sd2Card14chipSelectHighEv+0x20>
    16ac:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <_ZL20chip_select_asserted>
    16b0:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <_ZN8SPIClass13interruptModeE>
    16b4:	81 11       	cpse	r24, r1
    16b6:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <_ZN8SPIClass14endTransactionEv.part.3>
    16ba:	08 95       	ret

000016bc <_ZN7Sd2Card13chipSelectLowEv>:
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
    16c0:	ec 01       	movw	r28, r24
    16c2:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <_ZL20chip_select_asserted>
    16c6:	81 11       	cpse	r24, r1
    16c8:	09 c0       	rjmp	.+18     	; 0x16dc <_ZN7Sd2Card13chipSelectLowEv+0x20>
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <_ZL20chip_select_asserted>
    16d0:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <_ZL8settings>
    16d4:	90 91 3c 05 	lds	r25, 0x053C	; 0x80053c <_ZL8settings+0x1>
    16d8:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN8SPIClass16beginTransactionE11SPISettings>
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	8c 81       	ldd	r24, Y+4	; 0x04
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <digitalWrite>

000016e8 <_ZN7Sd2Card7readEndEv>:
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	ec 01       	movw	r28, r24
    16ee:	8e 81       	ldd	r24, Y+6	; 0x06
    16f0:	88 23       	and	r24, r24
    16f2:	89 f0       	breq	.+34     	; 0x1716 <_ZN7Sd2Card7readEndEv+0x2e>
    16f4:	8f 81       	ldd	r24, Y+7	; 0x07
    16f6:	98 85       	ldd	r25, Y+8	; 0x08
    16f8:	9c 01       	movw	r18, r24
    16fa:	2f 5f       	subi	r18, 0xFF	; 255
    16fc:	3f 4f       	sbci	r19, 0xFF	; 255
    16fe:	38 87       	std	Y+8, r19	; 0x08
    1700:	2f 83       	std	Y+7, r18	; 0x07
    1702:	82 30       	cpi	r24, 0x02	; 2
    1704:	92 40       	sbci	r25, 0x02	; 2
    1706:	18 f4       	brcc	.+6      	; 0x170e <_ZN7Sd2Card7readEndEv+0x26>
    1708:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZL6spiRecv>
    170c:	f3 cf       	rjmp	.-26     	; 0x16f4 <_ZN7Sd2Card7readEndEv+0xc>
    170e:	ce 01       	movw	r24, r28
    1710:	0e 94 4d 0b 	call	0x169a	; 0x169a <_ZN7Sd2Card14chipSelectHighEv>
    1714:	1e 82       	std	Y+6, r1	; 0x06
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	08 95       	ret

0000171c <_ZN7Sd2Card10setSckRateEh>:
    171c:	0f 93       	push	r16
    171e:	cf 93       	push	r28
    1720:	df 93       	push	r29
    1722:	00 d0       	rcall	.+0      	; 0x1724 <_ZN7Sd2Card10setSckRateEh+0x8>
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	67 30       	cpi	r22, 0x07	; 7
    172a:	28 f0       	brcs	.+10     	; 0x1736 <_ZN7Sd2Card10setSckRateEh+0x1a>
    172c:	26 e1       	ldi	r18, 0x16	; 22
    172e:	fc 01       	movw	r30, r24
    1730:	25 83       	std	Z+5, r18	; 0x05
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	47 c0       	rjmp	.+142    	; 0x17c4 <_ZN7Sd2Card10setSckRateEh+0xa8>
    1736:	62 30       	cpi	r22, 0x02	; 2
    1738:	f9 f0       	breq	.+62     	; 0x1778 <_ZN7Sd2Card10setSckRateEh+0x5c>
    173a:	58 f4       	brcc	.+22     	; 0x1752 <_ZN7Sd2Card10setSckRateEh+0x36>
    173c:	66 23       	and	r22, r22
    173e:	a9 f0       	breq	.+42     	; 0x176a <_ZN7Sd2Card10setSckRateEh+0x4e>
    1740:	61 30       	cpi	r22, 0x01	; 1
    1742:	79 f5       	brne	.+94     	; 0x17a2 <_ZN7Sd2Card10setSckRateEh+0x86>
    1744:	00 e0       	ldi	r16, 0x00	; 0
    1746:	21 e0       	ldi	r18, 0x01	; 1
    1748:	40 e0       	ldi	r20, 0x00	; 0
    174a:	59 e0       	ldi	r21, 0x09	; 9
    174c:	6d e3       	ldi	r22, 0x3D	; 61
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	2e c0       	rjmp	.+92     	; 0x17ae <_ZN7Sd2Card10setSckRateEh+0x92>
    1752:	64 30       	cpi	r22, 0x04	; 4
    1754:	f9 f0       	breq	.+62     	; 0x1794 <_ZN7Sd2Card10setSckRateEh+0x78>
    1756:	b8 f0       	brcs	.+46     	; 0x1786 <_ZN7Sd2Card10setSckRateEh+0x6a>
    1758:	65 30       	cpi	r22, 0x05	; 5
    175a:	19 f5       	brne	.+70     	; 0x17a2 <_ZN7Sd2Card10setSckRateEh+0x86>
    175c:	00 e0       	ldi	r16, 0x00	; 0
    175e:	21 e0       	ldi	r18, 0x01	; 1
    1760:	40 e9       	ldi	r20, 0x90	; 144
    1762:	50 ed       	ldi	r21, 0xD0	; 208
    1764:	63 e0       	ldi	r22, 0x03	; 3
    1766:	70 e0       	ldi	r23, 0x00	; 0
    1768:	22 c0       	rjmp	.+68     	; 0x17ae <_ZN7Sd2Card10setSckRateEh+0x92>
    176a:	00 e0       	ldi	r16, 0x00	; 0
    176c:	21 e0       	ldi	r18, 0x01	; 1
    176e:	40 e4       	ldi	r20, 0x40	; 64
    1770:	58 e7       	ldi	r21, 0x78	; 120
    1772:	6d e7       	ldi	r22, 0x7D	; 125
    1774:	71 e0       	ldi	r23, 0x01	; 1
    1776:	1b c0       	rjmp	.+54     	; 0x17ae <_ZN7Sd2Card10setSckRateEh+0x92>
    1778:	00 e0       	ldi	r16, 0x00	; 0
    177a:	21 e0       	ldi	r18, 0x01	; 1
    177c:	40 e8       	ldi	r20, 0x80	; 128
    177e:	54 e8       	ldi	r21, 0x84	; 132
    1780:	6e e1       	ldi	r22, 0x1E	; 30
    1782:	70 e0       	ldi	r23, 0x00	; 0
    1784:	14 c0       	rjmp	.+40     	; 0x17ae <_ZN7Sd2Card10setSckRateEh+0x92>
    1786:	00 e0       	ldi	r16, 0x00	; 0
    1788:	21 e0       	ldi	r18, 0x01	; 1
    178a:	40 e4       	ldi	r20, 0x40	; 64
    178c:	52 e4       	ldi	r21, 0x42	; 66
    178e:	6f e0       	ldi	r22, 0x0F	; 15
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	0d c0       	rjmp	.+26     	; 0x17ae <_ZN7Sd2Card10setSckRateEh+0x92>
    1794:	00 e0       	ldi	r16, 0x00	; 0
    1796:	21 e0       	ldi	r18, 0x01	; 1
    1798:	40 e2       	ldi	r20, 0x20	; 32
    179a:	51 ea       	ldi	r21, 0xA1	; 161
    179c:	67 e0       	ldi	r22, 0x07	; 7
    179e:	70 e0       	ldi	r23, 0x00	; 0
    17a0:	06 c0       	rjmp	.+12     	; 0x17ae <_ZN7Sd2Card10setSckRateEh+0x92>
    17a2:	00 e0       	ldi	r16, 0x00	; 0
    17a4:	21 e0       	ldi	r18, 0x01	; 1
    17a6:	48 e4       	ldi	r20, 0x48	; 72
    17a8:	58 ee       	ldi	r21, 0xE8	; 232
    17aa:	61 e0       	ldi	r22, 0x01	; 1
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	ce 01       	movw	r24, r28
    17b0:	01 96       	adiw	r24, 0x01	; 1
    17b2:	0e 94 04 0b 	call	0x1608	; 0x1608 <_ZN11SPISettingsC1Emhh>
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ba:	90 93 3c 05 	sts	0x053C, r25	; 0x80053c <_ZL8settings+0x1>
    17be:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <_ZL8settings>
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	0f 91       	pop	r16
    17ce:	08 95       	ret

000017d0 <_ZN7Sd2Card11waitNotBusyEj>:
    17d0:	0f 93       	push	r16
    17d2:	1f 93       	push	r17
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	eb 01       	movw	r28, r22
    17da:	0e 94 52 05 	call	0xaa4	; 0xaa4 <millis>
    17de:	8b 01       	movw	r16, r22
    17e0:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZL6spiRecv>
    17e4:	8f 3f       	cpi	r24, 0xFF	; 255
    17e6:	49 f0       	breq	.+18     	; 0x17fa <_ZN7Sd2Card11waitNotBusyEj+0x2a>
    17e8:	0e 94 52 05 	call	0xaa4	; 0xaa4 <millis>
    17ec:	60 1b       	sub	r22, r16
    17ee:	71 0b       	sbc	r23, r17
    17f0:	6c 17       	cp	r22, r28
    17f2:	7d 07       	cpc	r23, r29
    17f4:	a8 f3       	brcs	.-22     	; 0x17e0 <_ZN7Sd2Card11waitNotBusyEj+0x10>
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	01 c0       	rjmp	.+2      	; 0x17fc <_ZN7Sd2Card11waitNotBusyEj+0x2c>
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	1f 91       	pop	r17
    1802:	0f 91       	pop	r16
    1804:	08 95       	ret

00001806 <_ZN7Sd2Card11cardCommandEhm>:
    1806:	8f 92       	push	r8
    1808:	9f 92       	push	r9
    180a:	af 92       	push	r10
    180c:	bf 92       	push	r11
    180e:	ff 92       	push	r15
    1810:	0f 93       	push	r16
    1812:	1f 93       	push	r17
    1814:	cf 93       	push	r28
    1816:	df 93       	push	r29
    1818:	ec 01       	movw	r28, r24
    181a:	f6 2e       	mov	r15, r22
    181c:	49 01       	movw	r8, r18
    181e:	5a 01       	movw	r10, r20
    1820:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <_ZN7Sd2Card7readEndEv>
    1824:	ce 01       	movw	r24, r28
    1826:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZN7Sd2Card13chipSelectLowEv>
    182a:	6c e2       	ldi	r22, 0x2C	; 44
    182c:	71 e0       	ldi	r23, 0x01	; 1
    182e:	ce 01       	movw	r24, r28
    1830:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <_ZN7Sd2Card11waitNotBusyEj>
    1834:	8f 2d       	mov	r24, r15
    1836:	80 64       	ori	r24, 0x40	; 64
    1838:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN8SPIClass8transferEh>
    183c:	08 e1       	ldi	r16, 0x18	; 24
    183e:	10 e0       	ldi	r17, 0x00	; 0
    1840:	d5 01       	movw	r26, r10
    1842:	c4 01       	movw	r24, r8
    1844:	00 2e       	mov	r0, r16
    1846:	04 c0       	rjmp	.+8      	; 0x1850 <_ZN7Sd2Card11cardCommandEhm+0x4a>
    1848:	b6 95       	lsr	r27
    184a:	a7 95       	ror	r26
    184c:	97 95       	ror	r25
    184e:	87 95       	ror	r24
    1850:	0a 94       	dec	r0
    1852:	d2 f7       	brpl	.-12     	; 0x1848 <_ZN7Sd2Card11cardCommandEhm+0x42>
    1854:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN8SPIClass8transferEh>
    1858:	08 50       	subi	r16, 0x08	; 8
    185a:	11 09       	sbc	r17, r1
    185c:	08 3f       	cpi	r16, 0xF8	; 248
    185e:	8f ef       	ldi	r24, 0xFF	; 255
    1860:	18 07       	cpc	r17, r24
    1862:	71 f7       	brne	.-36     	; 0x1840 <_ZN7Sd2Card11cardCommandEhm+0x3a>
    1864:	ff 20       	and	r15, r15
    1866:	29 f0       	breq	.+10     	; 0x1872 <_ZN7Sd2Card11cardCommandEhm+0x6c>
    1868:	88 e0       	ldi	r24, 0x08	; 8
    186a:	f8 12       	cpse	r15, r24
    186c:	04 c0       	rjmp	.+8      	; 0x1876 <_ZN7Sd2Card11cardCommandEhm+0x70>
    186e:	87 e8       	ldi	r24, 0x87	; 135
    1870:	03 c0       	rjmp	.+6      	; 0x1878 <_ZN7Sd2Card11cardCommandEhm+0x72>
    1872:	85 e9       	ldi	r24, 0x95	; 149
    1874:	01 c0       	rjmp	.+2      	; 0x1878 <_ZN7Sd2Card11cardCommandEhm+0x72>
    1876:	8f ef       	ldi	r24, 0xFF	; 255
    1878:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN8SPIClass8transferEh>
    187c:	10 e0       	ldi	r17, 0x00	; 0
    187e:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZL6spiRecv>
    1882:	8a 87       	std	Y+10, r24	; 0x0a
    1884:	87 ff       	sbrs	r24, 7
    1886:	04 c0       	rjmp	.+8      	; 0x1890 <_ZN7Sd2Card11cardCommandEhm+0x8a>
    1888:	1f 3f       	cpi	r17, 0xFF	; 255
    188a:	11 f0       	breq	.+4      	; 0x1890 <_ZN7Sd2Card11cardCommandEhm+0x8a>
    188c:	1f 5f       	subi	r17, 0xFF	; 255
    188e:	f7 cf       	rjmp	.-18     	; 0x187e <_ZN7Sd2Card11cardCommandEhm+0x78>
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	1f 91       	pop	r17
    1896:	0f 91       	pop	r16
    1898:	ff 90       	pop	r15
    189a:	bf 90       	pop	r11
    189c:	af 90       	pop	r10
    189e:	9f 90       	pop	r9
    18a0:	8f 90       	pop	r8
    18a2:	08 95       	ret

000018a4 <_ZN7Sd2Card4initEhh>:
    18a4:	7f 92       	push	r7
    18a6:	8f 92       	push	r8
    18a8:	9f 92       	push	r9
    18aa:	af 92       	push	r10
    18ac:	bf 92       	push	r11
    18ae:	cf 92       	push	r12
    18b0:	df 92       	push	r13
    18b2:	ef 92       	push	r14
    18b4:	ff 92       	push	r15
    18b6:	0f 93       	push	r16
    18b8:	1f 93       	push	r17
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	00 d0       	rcall	.+0      	; 0x18c0 <_ZN7Sd2Card4initEhh+0x1c>
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	7c 01       	movw	r14, r24
    18c6:	76 2e       	mov	r7, r22
    18c8:	fc 01       	movw	r30, r24
    18ca:	13 86       	std	Z+11, r1	; 0x0b
    18cc:	11 86       	std	Z+9, r1	; 0x09
    18ce:	16 82       	std	Z+6, r1	; 0x06
    18d0:	15 82       	std	Z+5, r1	; 0x05
    18d2:	44 83       	std	Z+4, r20	; 0x04
    18d4:	0e 94 52 05 	call	0xaa4	; 0xaa4 <millis>
    18d8:	6b 01       	movw	r12, r22
    18da:	61 e0       	ldi	r22, 0x01	; 1
    18dc:	f7 01       	movw	r30, r14
    18de:	84 81       	ldd	r24, Z+4	; 0x04
    18e0:	0e 94 c2 05 	call	0xb84	; 0xb84 <pinMode>
    18e4:	61 e0       	ldi	r22, 0x01	; 1
    18e6:	f7 01       	movw	r30, r14
    18e8:	84 81       	ldd	r24, Z+4	; 0x04
    18ea:	0e 94 fe 05 	call	0xbfc	; 0xbfc <digitalWrite>
    18ee:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <_ZN8SPIClass5beginEv>
    18f2:	00 e0       	ldi	r16, 0x00	; 0
    18f4:	21 e0       	ldi	r18, 0x01	; 1
    18f6:	40 e9       	ldi	r20, 0x90	; 144
    18f8:	50 ed       	ldi	r21, 0xD0	; 208
    18fa:	63 e0       	ldi	r22, 0x03	; 3
    18fc:	70 e0       	ldi	r23, 0x00	; 0
    18fe:	ce 01       	movw	r24, r28
    1900:	01 96       	adiw	r24, 0x01	; 1
    1902:	0e 94 04 0b 	call	0x1608	; 0x1608 <_ZN11SPISettingsC1Emhh>
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	9a 81       	ldd	r25, Y+2	; 0x02
    190a:	90 93 3c 05 	sts	0x053C, r25	; 0x80053c <_ZL8settings+0x1>
    190e:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <_ZL8settings>
    1912:	0e 94 29 0b 	call	0x1652	; 0x1652 <_ZN8SPIClass16beginTransactionE11SPISettings>
    1916:	1a e0       	ldi	r17, 0x0A	; 10
    1918:	8f ef       	ldi	r24, 0xFF	; 255
    191a:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN8SPIClass8transferEh>
    191e:	11 50       	subi	r17, 0x01	; 1
    1920:	d9 f7       	brne	.-10     	; 0x1918 <_ZN7Sd2Card4initEhh+0x74>
    1922:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <_ZN8SPIClass13interruptModeE>
    1926:	81 11       	cpse	r24, r1
    1928:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <_ZN8SPIClass14endTransactionEv.part.3>
    192c:	c7 01       	movw	r24, r14
    192e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <_ZN7Sd2Card13chipSelectLowEv>
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	a9 01       	movw	r20, r18
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	c7 01       	movw	r24, r14
    193c:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZN7Sd2Card11cardCommandEhm>
    1940:	08 2f       	mov	r16, r24
    1942:	f7 01       	movw	r30, r14
    1944:	82 87       	std	Z+10, r24	; 0x0a
    1946:	81 30       	cpi	r24, 0x01	; 1
    1948:	49 f0       	breq	.+18     	; 0x195c <_ZN7Sd2Card4initEhh+0xb8>
    194a:	0e 94 52 05 	call	0xaa4	; 0xaa4 <millis>
    194e:	6c 19       	sub	r22, r12
    1950:	7d 09       	sbc	r23, r13
    1952:	61 3d       	cpi	r22, 0xD1	; 209
    1954:	77 40       	sbci	r23, 0x07	; 7
    1956:	68 f3       	brcs	.-38     	; 0x1932 <_ZN7Sd2Card4initEhh+0x8e>
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	50 c0       	rjmp	.+160    	; 0x19fc <_ZN7Sd2Card4initEhh+0x158>
    195c:	2a ea       	ldi	r18, 0xAA	; 170
    195e:	31 e0       	ldi	r19, 0x01	; 1
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	50 e0       	ldi	r21, 0x00	; 0
    1964:	68 e0       	ldi	r22, 0x08	; 8
    1966:	c7 01       	movw	r24, r14
    1968:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZN7Sd2Card11cardCommandEhm>
    196c:	82 ff       	sbrs	r24, 2
    196e:	03 c0       	rjmp	.+6      	; 0x1976 <_ZN7Sd2Card4initEhh+0xd2>
    1970:	f7 01       	movw	r30, r14
    1972:	03 87       	std	Z+11, r16	; 0x0b
    1974:	0e c0       	rjmp	.+28     	; 0x1992 <_ZN7Sd2Card4initEhh+0xee>
    1976:	04 e0       	ldi	r16, 0x04	; 4
    1978:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZL6spiRecv>
    197c:	f7 01       	movw	r30, r14
    197e:	82 87       	std	Z+10, r24	; 0x0a
    1980:	01 50       	subi	r16, 0x01	; 1
    1982:	d1 f7       	brne	.-12     	; 0x1978 <_ZN7Sd2Card4initEhh+0xd4>
    1984:	8a 3a       	cpi	r24, 0xAA	; 170
    1986:	11 f0       	breq	.+4      	; 0x198c <_ZN7Sd2Card4initEhh+0xe8>
    1988:	82 e0       	ldi	r24, 0x02	; 2
    198a:	39 c0       	rjmp	.+114    	; 0x19fe <_ZN7Sd2Card4initEhh+0x15a>
    198c:	82 e0       	ldi	r24, 0x02	; 2
    198e:	f7 01       	movw	r30, r14
    1990:	83 87       	std	Z+11, r24	; 0x0b
    1992:	f7 01       	movw	r30, r14
    1994:	83 85       	ldd	r24, Z+11	; 0x0b
    1996:	82 30       	cpi	r24, 0x02	; 2
    1998:	21 f0       	breq	.+8      	; 0x19a2 <_ZN7Sd2Card4initEhh+0xfe>
    199a:	81 2c       	mov	r8, r1
    199c:	91 2c       	mov	r9, r1
    199e:	54 01       	movw	r10, r8
    19a0:	05 c0       	rjmp	.+10     	; 0x19ac <_ZN7Sd2Card4initEhh+0x108>
    19a2:	81 2c       	mov	r8, r1
    19a4:	91 2c       	mov	r9, r1
    19a6:	a1 2c       	mov	r10, r1
    19a8:	80 e4       	ldi	r24, 0x40	; 64
    19aa:	b8 2e       	mov	r11, r24
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	a9 01       	movw	r20, r18
    19b2:	67 e3       	ldi	r22, 0x37	; 55
    19b4:	c7 01       	movw	r24, r14
    19b6:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZN7Sd2Card11cardCommandEhm>
    19ba:	a5 01       	movw	r20, r10
    19bc:	94 01       	movw	r18, r8
    19be:	69 e2       	ldi	r22, 0x29	; 41
    19c0:	c7 01       	movw	r24, r14
    19c2:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZN7Sd2Card11cardCommandEhm>
    19c6:	f7 01       	movw	r30, r14
    19c8:	82 87       	std	Z+10, r24	; 0x0a
    19ca:	88 23       	and	r24, r24
    19cc:	49 f0       	breq	.+18     	; 0x19e0 <_ZN7Sd2Card4initEhh+0x13c>
    19ce:	0e 94 52 05 	call	0xaa4	; 0xaa4 <millis>
    19d2:	6c 19       	sub	r22, r12
    19d4:	7d 09       	sbc	r23, r13
    19d6:	61 3d       	cpi	r22, 0xD1	; 209
    19d8:	77 40       	sbci	r23, 0x07	; 7
    19da:	40 f3       	brcs	.-48     	; 0x19ac <_ZN7Sd2Card4initEhh+0x108>
    19dc:	88 e0       	ldi	r24, 0x08	; 8
    19de:	0e c0       	rjmp	.+28     	; 0x19fc <_ZN7Sd2Card4initEhh+0x158>
    19e0:	f7 01       	movw	r30, r14
    19e2:	83 85       	ldd	r24, Z+11	; 0x0b
    19e4:	82 30       	cpi	r24, 0x02	; 2
    19e6:	f1 f4       	brne	.+60     	; 0x1a24 <_ZN7Sd2Card4initEhh+0x180>
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	a9 01       	movw	r20, r18
    19ee:	6a e3       	ldi	r22, 0x3A	; 58
    19f0:	c7 01       	movw	r24, r14
    19f2:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZN7Sd2Card11cardCommandEhm>
    19f6:	88 23       	and	r24, r24
    19f8:	39 f0       	breq	.+14     	; 0x1a08 <_ZN7Sd2Card4initEhh+0x164>
    19fa:	86 e0       	ldi	r24, 0x06	; 6
    19fc:	f7 01       	movw	r30, r14
    19fe:	85 83       	std	Z+5, r24	; 0x05
    1a00:	c7 01       	movw	r24, r14
    1a02:	0e 94 4d 0b 	call	0x169a	; 0x169a <_ZN7Sd2Card14chipSelectHighEv>
    1a06:	16 c0       	rjmp	.+44     	; 0x1a34 <_ZN7Sd2Card4initEhh+0x190>
    1a08:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZL6spiRecv>
    1a0c:	80 7c       	andi	r24, 0xC0	; 192
    1a0e:	80 3c       	cpi	r24, 0xC0	; 192
    1a10:	19 f4       	brne	.+6      	; 0x1a18 <_ZN7Sd2Card4initEhh+0x174>
    1a12:	83 e0       	ldi	r24, 0x03	; 3
    1a14:	f7 01       	movw	r30, r14
    1a16:	83 87       	std	Z+11, r24	; 0x0b
    1a18:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZL6spiRecv>
    1a1c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZL6spiRecv>
    1a20:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZL6spiRecv>
    1a24:	c7 01       	movw	r24, r14
    1a26:	0e 94 4d 0b 	call	0x169a	; 0x169a <_ZN7Sd2Card14chipSelectHighEv>
    1a2a:	67 2d       	mov	r22, r7
    1a2c:	c7 01       	movw	r24, r14
    1a2e:	0e 94 8e 0b 	call	0x171c	; 0x171c <_ZN7Sd2Card10setSckRateEh>
    1a32:	18 2f       	mov	r17, r24
    1a34:	81 2f       	mov	r24, r17
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	df 91       	pop	r29
    1a3c:	cf 91       	pop	r28
    1a3e:	1f 91       	pop	r17
    1a40:	0f 91       	pop	r16
    1a42:	ff 90       	pop	r15
    1a44:	ef 90       	pop	r14
    1a46:	df 90       	pop	r13
    1a48:	cf 90       	pop	r12
    1a4a:	bf 90       	pop	r11
    1a4c:	af 90       	pop	r10
    1a4e:	9f 90       	pop	r9
    1a50:	8f 90       	pop	r8
    1a52:	7f 90       	pop	r7
    1a54:	08 95       	ret

00001a56 <_ZN7Sd2Card14waitStartBlockEv>:
    1a56:	0f 93       	push	r16
    1a58:	1f 93       	push	r17
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	ec 01       	movw	r28, r24
    1a60:	0e 94 52 05 	call	0xaa4	; 0xaa4 <millis>
    1a64:	8b 01       	movw	r16, r22
    1a66:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZL6spiRecv>
    1a6a:	8a 87       	std	Y+10, r24	; 0x0a
    1a6c:	8f 3f       	cpi	r24, 0xFF	; 255
    1a6e:	49 f4       	brne	.+18     	; 0x1a82 <_ZN7Sd2Card14waitStartBlockEv+0x2c>
    1a70:	0e 94 52 05 	call	0xaa4	; 0xaa4 <millis>
    1a74:	60 1b       	sub	r22, r16
    1a76:	71 0b       	sbc	r23, r17
    1a78:	6d 32       	cpi	r22, 0x2D	; 45
    1a7a:	71 40       	sbci	r23, 0x01	; 1
    1a7c:	a0 f3       	brcs	.-24     	; 0x1a66 <_ZN7Sd2Card14waitStartBlockEv+0x10>
    1a7e:	8f e0       	ldi	r24, 0x0F	; 15
    1a80:	03 c0       	rjmp	.+6      	; 0x1a88 <_ZN7Sd2Card14waitStartBlockEv+0x32>
    1a82:	8e 3f       	cpi	r24, 0xFE	; 254
    1a84:	39 f0       	breq	.+14     	; 0x1a94 <_ZN7Sd2Card14waitStartBlockEv+0x3e>
    1a86:	8d e0       	ldi	r24, 0x0D	; 13
    1a88:	8d 83       	std	Y+5, r24	; 0x05
    1a8a:	ce 01       	movw	r24, r28
    1a8c:	0e 94 4d 0b 	call	0x169a	; 0x169a <_ZN7Sd2Card14chipSelectHighEv>
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	01 c0       	rjmp	.+2      	; 0x1a96 <_ZN7Sd2Card14waitStartBlockEv+0x40>
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	df 91       	pop	r29
    1a98:	cf 91       	pop	r28
    1a9a:	1f 91       	pop	r17
    1a9c:	0f 91       	pop	r16
    1a9e:	08 95       	ret

00001aa0 <_ZN7Sd2Card8readDataEmjjPh.part.6>:
    1aa0:	cf 92       	push	r12
    1aa2:	df 92       	push	r13
    1aa4:	ef 92       	push	r14
    1aa6:	ff 92       	push	r15
    1aa8:	0f 93       	push	r16
    1aaa:	1f 93       	push	r17
    1aac:	cf 93       	push	r28
    1aae:	df 93       	push	r29
    1ab0:	ec 01       	movw	r28, r24
    1ab2:	69 01       	movw	r12, r18
    1ab4:	c8 01       	movw	r24, r16
    1ab6:	82 0f       	add	r24, r18
    1ab8:	93 1f       	adc	r25, r19
    1aba:	81 30       	cpi	r24, 0x01	; 1
    1abc:	92 40       	sbci	r25, 0x02	; 2
    1abe:	08 f0       	brcs	.+2      	; 0x1ac2 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x22>
    1ac0:	5c c0       	rjmp	.+184    	; 0x1b7a <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    1ac2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac4:	88 23       	and	r24, r24
    1ac6:	71 f0       	breq	.+28     	; 0x1ae4 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    1ac8:	88 81       	ld	r24, Y
    1aca:	99 81       	ldd	r25, Y+1	; 0x01
    1acc:	aa 81       	ldd	r26, Y+2	; 0x02
    1ace:	bb 81       	ldd	r27, Y+3	; 0x03
    1ad0:	84 17       	cp	r24, r20
    1ad2:	95 07       	cpc	r25, r21
    1ad4:	a6 07       	cpc	r26, r22
    1ad6:	b7 07       	cpc	r27, r23
    1ad8:	29 f4       	brne	.+10     	; 0x1ae4 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    1ada:	8f 81       	ldd	r24, Y+7	; 0x07
    1adc:	98 85       	ldd	r25, Y+8	; 0x08
    1ade:	c8 16       	cp	r12, r24
    1ae0:	d9 06       	cpc	r13, r25
    1ae2:	10 f5       	brcc	.+68     	; 0x1b28 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x88>
    1ae4:	48 83       	st	Y, r20
    1ae6:	59 83       	std	Y+1, r21	; 0x01
    1ae8:	6a 83       	std	Y+2, r22	; 0x02
    1aea:	7b 83       	std	Y+3, r23	; 0x03
    1aec:	8b 85       	ldd	r24, Y+11	; 0x0b
    1aee:	83 30       	cpi	r24, 0x03	; 3
    1af0:	39 f0       	breq	.+14     	; 0x1b00 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x60>
    1af2:	89 e0       	ldi	r24, 0x09	; 9
    1af4:	44 0f       	add	r20, r20
    1af6:	55 1f       	adc	r21, r21
    1af8:	66 1f       	adc	r22, r22
    1afa:	77 1f       	adc	r23, r23
    1afc:	8a 95       	dec	r24
    1afe:	d1 f7       	brne	.-12     	; 0x1af4 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x54>
    1b00:	9a 01       	movw	r18, r20
    1b02:	ab 01       	movw	r20, r22
    1b04:	61 e1       	ldi	r22, 0x11	; 17
    1b06:	ce 01       	movw	r24, r28
    1b08:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZN7Sd2Card11cardCommandEhm>
    1b0c:	88 23       	and	r24, r24
    1b0e:	19 f0       	breq	.+6      	; 0x1b16 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x76>
    1b10:	83 e0       	ldi	r24, 0x03	; 3
    1b12:	8d 83       	std	Y+5, r24	; 0x05
    1b14:	32 c0       	rjmp	.+100    	; 0x1b7a <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    1b16:	ce 01       	movw	r24, r28
    1b18:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <_ZN7Sd2Card14waitStartBlockEv>
    1b1c:	88 23       	and	r24, r24
    1b1e:	69 f1       	breq	.+90     	; 0x1b7a <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    1b20:	18 86       	std	Y+8, r1	; 0x08
    1b22:	1f 82       	std	Y+7, r1	; 0x07
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	8e 83       	std	Y+6, r24	; 0x06
    1b28:	8f 81       	ldd	r24, Y+7	; 0x07
    1b2a:	98 85       	ldd	r25, Y+8	; 0x08
    1b2c:	8c 15       	cp	r24, r12
    1b2e:	9d 05       	cpc	r25, r13
    1b30:	40 f4       	brcc	.+16     	; 0x1b42 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa2>
    1b32:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZL6spiRecv>
    1b36:	8f 81       	ldd	r24, Y+7	; 0x07
    1b38:	98 85       	ldd	r25, Y+8	; 0x08
    1b3a:	01 96       	adiw	r24, 0x01	; 1
    1b3c:	98 87       	std	Y+8, r25	; 0x08
    1b3e:	8f 83       	std	Y+7, r24	; 0x07
    1b40:	f3 cf       	rjmp	.-26     	; 0x1b28 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x88>
    1b42:	67 01       	movw	r12, r14
    1b44:	e0 0e       	add	r14, r16
    1b46:	f1 1e       	adc	r15, r17
    1b48:	ce 14       	cp	r12, r14
    1b4a:	df 04       	cpc	r13, r15
    1b4c:	31 f0       	breq	.+12     	; 0x1b5a <_ZN7Sd2Card8readDataEmjjPh.part.6+0xba>
    1b4e:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZL6spiRecv>
    1b52:	f6 01       	movw	r30, r12
    1b54:	81 93       	st	Z+, r24
    1b56:	6f 01       	movw	r12, r30
    1b58:	f7 cf       	rjmp	.-18     	; 0x1b48 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa8>
    1b5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b5c:	98 85       	ldd	r25, Y+8	; 0x08
    1b5e:	08 0f       	add	r16, r24
    1b60:	19 1f       	adc	r17, r25
    1b62:	18 87       	std	Y+8, r17	; 0x08
    1b64:	0f 83       	std	Y+7, r16	; 0x07
    1b66:	89 85       	ldd	r24, Y+9	; 0x09
    1b68:	88 23       	and	r24, r24
    1b6a:	19 f0       	breq	.+6      	; 0x1b72 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd2>
    1b6c:	01 15       	cp	r16, r1
    1b6e:	12 40       	sbci	r17, 0x02	; 2
    1b70:	48 f0       	brcs	.+18     	; 0x1b84 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xe4>
    1b72:	ce 01       	movw	r24, r28
    1b74:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <_ZN7Sd2Card7readEndEv>
    1b78:	05 c0       	rjmp	.+10     	; 0x1b84 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xe4>
    1b7a:	ce 01       	movw	r24, r28
    1b7c:	0e 94 4d 0b 	call	0x169a	; 0x169a <_ZN7Sd2Card14chipSelectHighEv>
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	01 c0       	rjmp	.+2      	; 0x1b86 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xe6>
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	df 91       	pop	r29
    1b88:	cf 91       	pop	r28
    1b8a:	1f 91       	pop	r17
    1b8c:	0f 91       	pop	r16
    1b8e:	ff 90       	pop	r15
    1b90:	ef 90       	pop	r14
    1b92:	df 90       	pop	r13
    1b94:	cf 90       	pop	r12
    1b96:	08 95       	ret

00001b98 <_ZN7Sd2Card8readDataEmjjPh>:
    1b98:	ef 92       	push	r14
    1b9a:	ff 92       	push	r15
    1b9c:	0f 93       	push	r16
    1b9e:	1f 93       	push	r17
    1ba0:	01 15       	cp	r16, r1
    1ba2:	11 05       	cpc	r17, r1
    1ba4:	19 f0       	breq	.+6      	; 0x1bac <_ZN7Sd2Card8readDataEmjjPh+0x14>
    1ba6:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <_ZN7Sd2Card8readDataEmjjPh.part.6>
    1baa:	01 c0       	rjmp	.+2      	; 0x1bae <_ZN7Sd2Card8readDataEmjjPh+0x16>
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	1f 91       	pop	r17
    1bb0:	0f 91       	pop	r16
    1bb2:	ff 90       	pop	r15
    1bb4:	ef 90       	pop	r14
    1bb6:	08 95       	ret

00001bb8 <_ZN7Sd2Card9readBlockEmPh>:
    1bb8:	ef 92       	push	r14
    1bba:	ff 92       	push	r15
    1bbc:	0f 93       	push	r16
    1bbe:	1f 93       	push	r17
    1bc0:	79 01       	movw	r14, r18
    1bc2:	00 e0       	ldi	r16, 0x00	; 0
    1bc4:	12 e0       	ldi	r17, 0x02	; 2
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <_ZN7Sd2Card8readDataEmjjPh.part.6>
    1bce:	1f 91       	pop	r17
    1bd0:	0f 91       	pop	r16
    1bd2:	ff 90       	pop	r15
    1bd4:	ef 90       	pop	r14
    1bd6:	08 95       	ret

00001bd8 <_ZN7Sd2Card9writeDataEhPKh>:
    1bd8:	ef 92       	push	r14
    1bda:	ff 92       	push	r15
    1bdc:	0f 93       	push	r16
    1bde:	1f 93       	push	r17
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	8c 01       	movw	r16, r24
    1be6:	86 2f       	mov	r24, r22
    1be8:	7a 01       	movw	r14, r20
    1bea:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN8SPIClass8transferEh>
    1bee:	e7 01       	movw	r28, r14
    1bf0:	8e ef       	ldi	r24, 0xFE	; 254
    1bf2:	f8 1a       	sub	r15, r24
    1bf4:	89 91       	ld	r24, Y+
    1bf6:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN8SPIClass8transferEh>
    1bfa:	ce 15       	cp	r28, r14
    1bfc:	df 05       	cpc	r29, r15
    1bfe:	d1 f7       	brne	.-12     	; 0x1bf4 <_ZN7Sd2Card9writeDataEhPKh+0x1c>
    1c00:	8f ef       	ldi	r24, 0xFF	; 255
    1c02:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN8SPIClass8transferEh>
    1c06:	8f ef       	ldi	r24, 0xFF	; 255
    1c08:	0e 94 43 0b 	call	0x1686	; 0x1686 <_ZN8SPIClass8transferEh>
    1c0c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZL6spiRecv>
    1c10:	f8 01       	movw	r30, r16
    1c12:	82 87       	std	Z+10, r24	; 0x0a
    1c14:	8f 71       	andi	r24, 0x1F	; 31
    1c16:	85 30       	cpi	r24, 0x05	; 5
    1c18:	39 f0       	breq	.+14     	; 0x1c28 <_ZN7Sd2Card9writeDataEhPKh+0x50>
    1c1a:	81 e1       	ldi	r24, 0x11	; 17
    1c1c:	85 83       	std	Z+5, r24	; 0x05
    1c1e:	c8 01       	movw	r24, r16
    1c20:	0e 94 4d 0b 	call	0x169a	; 0x169a <_ZN7Sd2Card14chipSelectHighEv>
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	01 c0       	rjmp	.+2      	; 0x1c2a <_ZN7Sd2Card9writeDataEhPKh+0x52>
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	df 91       	pop	r29
    1c2c:	cf 91       	pop	r28
    1c2e:	1f 91       	pop	r17
    1c30:	0f 91       	pop	r16
    1c32:	ff 90       	pop	r15
    1c34:	ef 90       	pop	r14
    1c36:	08 95       	ret

00001c38 <_ZN7Sd2Card10writeBlockEmPKh>:
    1c38:	0f 93       	push	r16
    1c3a:	1f 93       	push	r17
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
    1c40:	ec 01       	movw	r28, r24
    1c42:	89 01       	movw	r16, r18
    1c44:	41 15       	cp	r20, r1
    1c46:	51 05       	cpc	r21, r1
    1c48:	61 05       	cpc	r22, r1
    1c4a:	71 05       	cpc	r23, r1
    1c4c:	11 f4       	brne	.+4      	; 0x1c52 <_ZN7Sd2Card10writeBlockEmPKh+0x1a>
    1c4e:	82 e1       	ldi	r24, 0x12	; 18
    1c50:	32 c0       	rjmp	.+100    	; 0x1cb6 <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    1c52:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c54:	83 30       	cpi	r24, 0x03	; 3
    1c56:	39 f0       	breq	.+14     	; 0x1c66 <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
    1c58:	89 e0       	ldi	r24, 0x09	; 9
    1c5a:	44 0f       	add	r20, r20
    1c5c:	55 1f       	adc	r21, r21
    1c5e:	66 1f       	adc	r22, r22
    1c60:	77 1f       	adc	r23, r23
    1c62:	8a 95       	dec	r24
    1c64:	d1 f7       	brne	.-12     	; 0x1c5a <_ZN7Sd2Card10writeBlockEmPKh+0x22>
    1c66:	9a 01       	movw	r18, r20
    1c68:	ab 01       	movw	r20, r22
    1c6a:	68 e1       	ldi	r22, 0x18	; 24
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZN7Sd2Card11cardCommandEhm>
    1c72:	88 23       	and	r24, r24
    1c74:	11 f0       	breq	.+4      	; 0x1c7a <_ZN7Sd2Card10writeBlockEmPKh+0x42>
    1c76:	84 e0       	ldi	r24, 0x04	; 4
    1c78:	1e c0       	rjmp	.+60     	; 0x1cb6 <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    1c7a:	a8 01       	movw	r20, r16
    1c7c:	6e ef       	ldi	r22, 0xFE	; 254
    1c7e:	ce 01       	movw	r24, r28
    1c80:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_ZN7Sd2Card9writeDataEhPKh>
    1c84:	88 23       	and	r24, r24
    1c86:	c1 f0       	breq	.+48     	; 0x1cb8 <_ZN7Sd2Card10writeBlockEmPKh+0x80>
    1c88:	68 e5       	ldi	r22, 0x58	; 88
    1c8a:	72 e0       	ldi	r23, 0x02	; 2
    1c8c:	ce 01       	movw	r24, r28
    1c8e:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <_ZN7Sd2Card11waitNotBusyEj>
    1c92:	81 11       	cpse	r24, r1
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <_ZN7Sd2Card10writeBlockEmPKh+0x62>
    1c96:	85 e1       	ldi	r24, 0x15	; 21
    1c98:	0e c0       	rjmp	.+28     	; 0x1cb6 <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	a9 01       	movw	r20, r18
    1ca0:	6d e0       	ldi	r22, 0x0D	; 13
    1ca2:	ce 01       	movw	r24, r28
    1ca4:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZN7Sd2Card11cardCommandEhm>
    1ca8:	81 11       	cpse	r24, r1
    1caa:	04 c0       	rjmp	.+8      	; 0x1cb4 <_ZN7Sd2Card10writeBlockEmPKh+0x7c>
    1cac:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZL6spiRecv>
    1cb0:	88 23       	and	r24, r24
    1cb2:	39 f0       	breq	.+14     	; 0x1cc2 <_ZN7Sd2Card10writeBlockEmPKh+0x8a>
    1cb4:	84 e1       	ldi	r24, 0x14	; 20
    1cb6:	8d 83       	std	Y+5, r24	; 0x05
    1cb8:	ce 01       	movw	r24, r28
    1cba:	0e 94 4d 0b 	call	0x169a	; 0x169a <_ZN7Sd2Card14chipSelectHighEv>
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	04 c0       	rjmp	.+8      	; 0x1cca <_ZN7Sd2Card10writeBlockEmPKh+0x92>
    1cc2:	ce 01       	movw	r24, r28
    1cc4:	0e 94 4d 0b 	call	0x169a	; 0x169a <_ZN7Sd2Card14chipSelectHighEv>
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
    1cce:	1f 91       	pop	r17
    1cd0:	0f 91       	pop	r16
    1cd2:	08 95       	ret

00001cd4 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    1cd4:	eb e3       	ldi	r30, 0x3B	; 59
    1cd6:	f5 e0       	ldi	r31, 0x05	; 5
    1cd8:	80 e5       	ldi	r24, 0x50	; 80
    1cda:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    1cdc:	11 82       	std	Z+1, r1	; 0x01
    1cde:	08 95       	ret

00001ce0 <_ZN6SdFile10addClusterEv>:
    }
  }
  // don't try to delete root
  if (isRoot()) return true;
  return rmDir();
}
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	ec 01       	movw	r28, r24
    1ce6:	9c 01       	movw	r18, r24
    1ce8:	2a 5f       	subi	r18, 0xFA	; 250
    1cea:	3f 4f       	sbci	r19, 0xFF	; 255
    1cec:	41 e0       	ldi	r20, 0x01	; 1
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	60 e0       	ldi	r22, 0x00	; 0
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
    1cf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf8:	0e 94 f6 17 	call	0x2fec	; 0x2fec <_ZN8SdVolume15allocContiguousEmPm>
    1cfc:	88 23       	and	r24, r24
    1cfe:	a1 f0       	breq	.+40     	; 0x1d28 <_ZN6SdFile10addClusterEv+0x48>
    1d00:	8f 89       	ldd	r24, Y+23	; 0x17
    1d02:	98 8d       	ldd	r25, Y+24	; 0x18
    1d04:	a9 8d       	ldd	r26, Y+25	; 0x19
    1d06:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1d08:	89 2b       	or	r24, r25
    1d0a:	8a 2b       	or	r24, r26
    1d0c:	8b 2b       	or	r24, r27
    1d0e:	59 f4       	brne	.+22     	; 0x1d26 <_ZN6SdFile10addClusterEv+0x46>
    1d10:	8e 81       	ldd	r24, Y+6	; 0x06
    1d12:	9f 81       	ldd	r25, Y+7	; 0x07
    1d14:	a8 85       	ldd	r26, Y+8	; 0x08
    1d16:	b9 85       	ldd	r27, Y+9	; 0x09
    1d18:	8f 8b       	std	Y+23, r24	; 0x17
    1d1a:	98 8f       	std	Y+24, r25	; 0x18
    1d1c:	a9 8f       	std	Y+25, r26	; 0x19
    1d1e:	ba 8f       	std	Y+26, r27	; 0x1a
    1d20:	8c 81       	ldd	r24, Y+4	; 0x04
    1d22:	80 68       	ori	r24, 0x80	; 128
    1d24:	8c 83       	std	Y+4, r24	; 0x04
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	08 95       	ret

00001d2e <_ZN6SdFile13addDirClusterEv>:
    1d2e:	cf 92       	push	r12
    1d30:	df 92       	push	r13
    1d32:	ef 92       	push	r14
    1d34:	ff 92       	push	r15
    1d36:	1f 93       	push	r17
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	ec 01       	movw	r28, r24
    1d3e:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <_ZN6SdFile10addClusterEv>
    1d42:	81 11       	cpse	r24, r1
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <_ZN6SdFile13addDirClusterEv+0x1c>
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	4a c0       	rjmp	.+148    	; 0x1dde <_ZN6SdFile13addDirClusterEv+0xb0>
    1d4a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1d4c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1d4e:	ce 80       	ldd	r12, Y+6	; 0x06
    1d50:	df 80       	ldd	r13, Y+7	; 0x07
    1d52:	e8 84       	ldd	r14, Y+8	; 0x08
    1d54:	f9 84       	ldd	r15, Y+9	; 0x09
    1d56:	82 e0       	ldi	r24, 0x02	; 2
    1d58:	c8 1a       	sub	r12, r24
    1d5a:	d1 08       	sbc	r13, r1
    1d5c:	e1 08       	sbc	r14, r1
    1d5e:	f1 08       	sbc	r15, r1
    1d60:	05 84       	ldd	r0, Z+13	; 0x0d
    1d62:	04 c0       	rjmp	.+8      	; 0x1d6c <_ZN6SdFile13addDirClusterEv+0x3e>
    1d64:	cc 0c       	add	r12, r12
    1d66:	dd 1c       	adc	r13, r13
    1d68:	ee 1c       	adc	r14, r14
    1d6a:	ff 1c       	adc	r15, r15
    1d6c:	0a 94       	dec	r0
    1d6e:	d2 f7       	brpl	.-12     	; 0x1d64 <_ZN6SdFile13addDirClusterEv+0x36>
    1d70:	86 85       	ldd	r24, Z+14	; 0x0e
    1d72:	97 85       	ldd	r25, Z+15	; 0x0f
    1d74:	a0 89       	ldd	r26, Z+16	; 0x10
    1d76:	b1 89       	ldd	r27, Z+17	; 0x11
    1d78:	c8 0e       	add	r12, r24
    1d7a:	d9 1e       	adc	r13, r25
    1d7c:	ea 1e       	adc	r14, r26
    1d7e:	fb 1e       	adc	r15, r27
    1d80:	14 81       	ldd	r17, Z+4	; 0x04
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	c8 1a       	sub	r12, r24
    1d86:	d1 08       	sbc	r13, r1
    1d88:	e1 08       	sbc	r14, r1
    1d8a:	f1 08       	sbc	r15, r1
    1d8c:	11 23       	and	r17, r17
    1d8e:	61 f0       	breq	.+24     	; 0x1da8 <_ZN6SdFile13addDirClusterEv+0x7a>
    1d90:	c7 01       	movw	r24, r14
    1d92:	b6 01       	movw	r22, r12
    1d94:	61 0f       	add	r22, r17
    1d96:	71 1d       	adc	r23, r1
    1d98:	81 1d       	adc	r24, r1
    1d9a:	91 1d       	adc	r25, r1
    1d9c:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <_ZN8SdVolume14cacheZeroBlockEm>
    1da0:	88 23       	and	r24, r24
    1da2:	89 f2       	breq	.-94     	; 0x1d46 <_ZN6SdFile13addDirClusterEv+0x18>
    1da4:	11 50       	subi	r17, 0x01	; 1
    1da6:	f2 cf       	rjmp	.-28     	; 0x1d8c <_ZN6SdFile13addDirClusterEv+0x5e>
    1da8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1daa:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	92 e0       	ldi	r25, 0x02	; 2
    1db0:	a0 e0       	ldi	r26, 0x00	; 0
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	05 84       	ldd	r0, Z+13	; 0x0d
    1db6:	04 c0       	rjmp	.+8      	; 0x1dc0 <_ZN6SdFile13addDirClusterEv+0x92>
    1db8:	88 0f       	add	r24, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	aa 1f       	adc	r26, r26
    1dbe:	bb 1f       	adc	r27, r27
    1dc0:	0a 94       	dec	r0
    1dc2:	d2 f7       	brpl	.-12     	; 0x1db8 <_ZN6SdFile13addDirClusterEv+0x8a>
    1dc4:	4b 89       	ldd	r20, Y+19	; 0x13
    1dc6:	5c 89       	ldd	r21, Y+20	; 0x14
    1dc8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dca:	7e 89       	ldd	r23, Y+22	; 0x16
    1dcc:	84 0f       	add	r24, r20
    1dce:	95 1f       	adc	r25, r21
    1dd0:	a6 1f       	adc	r26, r22
    1dd2:	b7 1f       	adc	r27, r23
    1dd4:	8b 8b       	std	Y+19, r24	; 0x13
    1dd6:	9c 8b       	std	Y+20, r25	; 0x14
    1dd8:	ad 8b       	std	Y+21, r26	; 0x15
    1dda:	be 8b       	std	Y+22, r27	; 0x16
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	df 91       	pop	r29
    1de0:	cf 91       	pop	r28
    1de2:	1f 91       	pop	r17
    1de4:	ff 90       	pop	r15
    1de6:	ef 90       	pop	r14
    1de8:	df 90       	pop	r13
    1dea:	cf 90       	pop	r12
    1dec:	08 95       	ret

00001dee <_ZN6SdFile13cacheDirEntryEh>:
    1dee:	cf 93       	push	r28
    1df0:	df 93       	push	r29
    1df2:	ec 01       	movw	r28, r24
    1df4:	46 2f       	mov	r20, r22
    1df6:	6e 85       	ldd	r22, Y+14	; 0x0e
    1df8:	7f 85       	ldd	r23, Y+15	; 0x0f
    1dfa:	88 89       	ldd	r24, Y+16	; 0x10
    1dfc:	99 89       	ldd	r25, Y+17	; 0x11
    1dfe:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <_ZN8SdVolume13cacheRawBlockEmh>
    1e02:	88 23       	and	r24, r24
    1e04:	41 f0       	breq	.+16     	; 0x1e16 <_ZN6SdFile13cacheDirEntryEh+0x28>
    1e06:	8a 89       	ldd	r24, Y+18	; 0x12
    1e08:	20 e2       	ldi	r18, 0x20	; 32
    1e0a:	82 9f       	mul	r24, r18
    1e0c:	c0 01       	movw	r24, r0
    1e0e:	11 24       	eor	r1, r1
    1e10:	8a 5b       	subi	r24, 0xBA	; 186
    1e12:	9a 4f       	sbci	r25, 0xFA	; 250
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <_ZN6SdFile13cacheDirEntryEh+0x2c>
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	df 91       	pop	r29
    1e1c:	cf 91       	pop	r28
    1e1e:	08 95       	ret

00001e20 <_ZN6SdFile10make83NameEPKcPh>:
    1e20:	fb 01       	movw	r30, r22
    1e22:	9b 01       	movw	r18, r22
    1e24:	25 5f       	subi	r18, 0xF5	; 245
    1e26:	3f 4f       	sbci	r19, 0xFF	; 255
    1e28:	40 e2       	ldi	r20, 0x20	; 32
    1e2a:	41 93       	st	Z+, r20
    1e2c:	e2 17       	cp	r30, r18
    1e2e:	f3 07       	cpc	r31, r19
    1e30:	e1 f7       	brne	.-8      	; 0x1e2a <_ZN6SdFile10make83NameEPKcPh+0xa>
    1e32:	dc 01       	movw	r26, r24
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	27 e0       	ldi	r18, 0x07	; 7
    1e38:	8d 91       	ld	r24, X+
    1e3a:	88 23       	and	r24, r24
    1e3c:	19 f1       	breq	.+70     	; 0x1e84 <_ZN6SdFile10make83NameEPKcPh+0x64>
    1e3e:	8e 32       	cpi	r24, 0x2E	; 46
    1e40:	29 f4       	brne	.+10     	; 0x1e4c <_ZN6SdFile10make83NameEPKcPh+0x2c>
    1e42:	2a 30       	cpi	r18, 0x0A	; 10
    1e44:	21 f1       	breq	.+72     	; 0x1e8e <_ZN6SdFile10make83NameEPKcPh+0x6e>
    1e46:	98 e0       	ldi	r25, 0x08	; 8
    1e48:	2a e0       	ldi	r18, 0x0A	; 10
    1e4a:	f6 cf       	rjmp	.-20     	; 0x1e38 <_ZN6SdFile10make83NameEPKcPh+0x18>
    1e4c:	e2 ec       	ldi	r30, 0xC2	; 194
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	34 91       	lpm	r19, Z
    1e52:	33 23       	and	r19, r19
    1e54:	21 f0       	breq	.+8      	; 0x1e5e <_ZN6SdFile10make83NameEPKcPh+0x3e>
    1e56:	31 96       	adiw	r30, 0x01	; 1
    1e58:	83 13       	cpse	r24, r19
    1e5a:	fa cf       	rjmp	.-12     	; 0x1e50 <_ZN6SdFile10make83NameEPKcPh+0x30>
    1e5c:	18 c0       	rjmp	.+48     	; 0x1e8e <_ZN6SdFile10make83NameEPKcPh+0x6e>
    1e5e:	29 17       	cp	r18, r25
    1e60:	b0 f0       	brcs	.+44     	; 0x1e8e <_ZN6SdFile10make83NameEPKcPh+0x6e>
    1e62:	3f ed       	ldi	r19, 0xDF	; 223
    1e64:	38 0f       	add	r19, r24
    1e66:	3e 35       	cpi	r19, 0x5E	; 94
    1e68:	90 f4       	brcc	.+36     	; 0x1e8e <_ZN6SdFile10make83NameEPKcPh+0x6e>
    1e6a:	31 e0       	ldi	r19, 0x01	; 1
    1e6c:	39 0f       	add	r19, r25
    1e6e:	fb 01       	movw	r30, r22
    1e70:	e9 0f       	add	r30, r25
    1e72:	f1 1d       	adc	r31, r1
    1e74:	9f e9       	ldi	r25, 0x9F	; 159
    1e76:	98 0f       	add	r25, r24
    1e78:	9a 31       	cpi	r25, 0x1A	; 26
    1e7a:	08 f4       	brcc	.+2      	; 0x1e7e <_ZN6SdFile10make83NameEPKcPh+0x5e>
    1e7c:	80 52       	subi	r24, 0x20	; 32
    1e7e:	80 83       	st	Z, r24
    1e80:	93 2f       	mov	r25, r19
    1e82:	da cf       	rjmp	.-76     	; 0x1e38 <_ZN6SdFile10make83NameEPKcPh+0x18>
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	fb 01       	movw	r30, r22
    1e88:	90 81       	ld	r25, Z
    1e8a:	90 32       	cpi	r25, 0x20	; 32
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <_ZN6SdFile10make83NameEPKcPh+0x70>
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	08 95       	ret

00001e92 <_ZN6SdFile8openRootEP8SdVolume>:
    1e92:	0f 93       	push	r16
    1e94:	1f 93       	push	r17
    1e96:	cf 93       	push	r28
    1e98:	df 93       	push	r29
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	25 81       	ldd	r18, Z+5	; 0x05
    1e9e:	22 23       	and	r18, r18
    1ea0:	11 f0       	breq	.+4      	; 0x1ea6 <_ZN6SdFile8openRootEP8SdVolume+0x14>
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	42 c0       	rjmp	.+132    	; 0x1f2a <_ZN6SdFile8openRootEP8SdVolume+0x98>
    1ea6:	8b 01       	movw	r16, r22
    1ea8:	ec 01       	movw	r28, r24
    1eaa:	fb 01       	movw	r30, r22
    1eac:	87 89       	ldd	r24, Z+23	; 0x17
    1eae:	80 31       	cpi	r24, 0x10	; 16
    1eb0:	b1 f4       	brne	.+44     	; 0x1ede <_ZN6SdFile8openRootEP8SdVolume+0x4c>
    1eb2:	82 e0       	ldi	r24, 0x02	; 2
    1eb4:	8d 83       	std	Y+5, r24	; 0x05
    1eb6:	1f 8a       	std	Y+23, r1	; 0x17
    1eb8:	18 8e       	std	Y+24, r1	; 0x18
    1eba:	19 8e       	std	Y+25, r1	; 0x19
    1ebc:	1a 8e       	std	Y+26, r1	; 0x1a
    1ebe:	80 8d       	ldd	r24, Z+24	; 0x18
    1ec0:	91 8d       	ldd	r25, Z+25	; 0x19
    1ec2:	a0 e0       	ldi	r26, 0x00	; 0
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	25 e0       	ldi	r18, 0x05	; 5
    1ec8:	88 0f       	add	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	aa 1f       	adc	r26, r26
    1ece:	bb 1f       	adc	r27, r27
    1ed0:	2a 95       	dec	r18
    1ed2:	d1 f7       	brne	.-12     	; 0x1ec8 <_ZN6SdFile8openRootEP8SdVolume+0x36>
    1ed4:	8b 8b       	std	Y+19, r24	; 0x13
    1ed6:	9c 8b       	std	Y+20, r25	; 0x14
    1ed8:	ad 8b       	std	Y+21, r26	; 0x15
    1eda:	be 8b       	std	Y+22, r27	; 0x16
    1edc:	15 c0       	rjmp	.+42     	; 0x1f08 <_ZN6SdFile8openRootEP8SdVolume+0x76>
    1ede:	80 32       	cpi	r24, 0x20	; 32
    1ee0:	01 f7       	brne	.-64     	; 0x1ea2 <_ZN6SdFile8openRootEP8SdVolume+0x10>
    1ee2:	83 e0       	ldi	r24, 0x03	; 3
    1ee4:	8d 83       	std	Y+5, r24	; 0x05
    1ee6:	fb 01       	movw	r30, r22
    1ee8:	42 8d       	ldd	r20, Z+26	; 0x1a
    1eea:	53 8d       	ldd	r21, Z+27	; 0x1b
    1eec:	64 8d       	ldd	r22, Z+28	; 0x1c
    1eee:	75 8d       	ldd	r23, Z+29	; 0x1d
    1ef0:	4f 8b       	std	Y+23, r20	; 0x17
    1ef2:	58 8f       	std	Y+24, r21	; 0x18
    1ef4:	69 8f       	std	Y+25, r22	; 0x19
    1ef6:	7a 8f       	std	Y+26, r23	; 0x1a
    1ef8:	9e 01       	movw	r18, r28
    1efa:	2d 5e       	subi	r18, 0xED	; 237
    1efc:	3f 4f       	sbci	r19, 0xFF	; 255
    1efe:	c8 01       	movw	r24, r16
    1f00:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <_ZNK8SdVolume9chainSizeEmPm>
    1f04:	88 23       	and	r24, r24
    1f06:	69 f2       	breq	.-102    	; 0x1ea2 <_ZN6SdFile8openRootEP8SdVolume+0x10>
    1f08:	1c 8f       	std	Y+28, r17	; 0x1c
    1f0a:	0b 8f       	std	Y+27, r16	; 0x1b
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	8c 83       	std	Y+4, r24	; 0x04
    1f10:	1e 82       	std	Y+6, r1	; 0x06
    1f12:	1f 82       	std	Y+7, r1	; 0x07
    1f14:	18 86       	std	Y+8, r1	; 0x08
    1f16:	19 86       	std	Y+9, r1	; 0x09
    1f18:	1a 86       	std	Y+10, r1	; 0x0a
    1f1a:	1b 86       	std	Y+11, r1	; 0x0b
    1f1c:	1c 86       	std	Y+12, r1	; 0x0c
    1f1e:	1d 86       	std	Y+13, r1	; 0x0d
    1f20:	1e 86       	std	Y+14, r1	; 0x0e
    1f22:	1f 86       	std	Y+15, r1	; 0x0f
    1f24:	18 8a       	std	Y+16, r1	; 0x10
    1f26:	19 8a       	std	Y+17, r1	; 0x11
    1f28:	1a 8a       	std	Y+18, r1	; 0x12
    1f2a:	df 91       	pop	r29
    1f2c:	cf 91       	pop	r28
    1f2e:	1f 91       	pop	r17
    1f30:	0f 91       	pop	r16
    1f32:	08 95       	ret

00001f34 <_ZN6SdFile4readEPvj>:
    1f34:	2f 92       	push	r2
    1f36:	3f 92       	push	r3
    1f38:	4f 92       	push	r4
    1f3a:	5f 92       	push	r5
    1f3c:	6f 92       	push	r6
    1f3e:	7f 92       	push	r7
    1f40:	8f 92       	push	r8
    1f42:	9f 92       	push	r9
    1f44:	af 92       	push	r10
    1f46:	bf 92       	push	r11
    1f48:	cf 92       	push	r12
    1f4a:	df 92       	push	r13
    1f4c:	ef 92       	push	r14
    1f4e:	ff 92       	push	r15
    1f50:	0f 93       	push	r16
    1f52:	1f 93       	push	r17
    1f54:	cf 93       	push	r28
    1f56:	df 93       	push	r29
    1f58:	ec 01       	movw	r28, r24
    1f5a:	5b 01       	movw	r10, r22
    1f5c:	4a 01       	movw	r8, r20
    1f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f60:	81 11       	cpse	r24, r1
    1f62:	03 c0       	rjmp	.+6      	; 0x1f6a <_ZN6SdFile4readEPvj+0x36>
    1f64:	8f ef       	ldi	r24, 0xFF	; 255
    1f66:	9f ef       	ldi	r25, 0xFF	; 255
    1f68:	d7 c0       	rjmp	.+430    	; 0x2118 <_ZN6SdFile4readEPvj+0x1e4>
    1f6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6c:	80 ff       	sbrs	r24, 0
    1f6e:	fa cf       	rjmp	.-12     	; 0x1f64 <_ZN6SdFile4readEPvj+0x30>
    1f70:	4b 88       	ldd	r4, Y+19	; 0x13
    1f72:	5c 88       	ldd	r5, Y+20	; 0x14
    1f74:	6d 88       	ldd	r6, Y+21	; 0x15
    1f76:	7e 88       	ldd	r7, Y+22	; 0x16
    1f78:	4a 85       	ldd	r20, Y+10	; 0x0a
    1f7a:	5b 85       	ldd	r21, Y+11	; 0x0b
    1f7c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f7e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f80:	c4 01       	movw	r24, r8
    1f82:	a0 e0       	ldi	r26, 0x00	; 0
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	93 01       	movw	r18, r6
    1f88:	82 01       	movw	r16, r4
    1f8a:	04 1b       	sub	r16, r20
    1f8c:	15 0b       	sbc	r17, r21
    1f8e:	26 0b       	sbc	r18, r22
    1f90:	37 0b       	sbc	r19, r23
    1f92:	08 17       	cp	r16, r24
    1f94:	19 07       	cpc	r17, r25
    1f96:	2a 07       	cpc	r18, r26
    1f98:	3b 07       	cpc	r19, r27
    1f9a:	18 f4       	brcc	.+6      	; 0x1fa2 <_ZN6SdFile4readEPvj+0x6e>
    1f9c:	42 01       	movw	r8, r4
    1f9e:	84 1a       	sub	r8, r20
    1fa0:	95 0a       	sbc	r9, r21
    1fa2:	24 01       	movw	r4, r8
    1fa4:	1e 01       	movw	r2, r28
    1fa6:	26 e0       	ldi	r18, 0x06	; 6
    1fa8:	22 0e       	add	r2, r18
    1faa:	31 1c       	adc	r3, r1
    1fac:	41 14       	cp	r4, r1
    1fae:	51 04       	cpc	r5, r1
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <_ZN6SdFile4readEPvj+0x80>
    1fb2:	7e c0       	rjmp	.+252    	; 0x20b0 <_ZN6SdFile4readEPvj+0x17c>
    1fb4:	4a 85       	ldd	r20, Y+10	; 0x0a
    1fb6:	5b 85       	ldd	r21, Y+11	; 0x0b
    1fb8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fba:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fbc:	6a 01       	movw	r12, r20
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	d8 22       	and	r13, r24
    1fc2:	ed 81       	ldd	r30, Y+5	; 0x05
    1fc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc8:	8a 01       	movw	r16, r20
    1fca:	9b 01       	movw	r18, r22
    1fcc:	f9 e0       	ldi	r31, 0x09	; 9
    1fce:	36 95       	lsr	r19
    1fd0:	27 95       	ror	r18
    1fd2:	17 95       	ror	r17
    1fd4:	07 95       	ror	r16
    1fd6:	fa 95       	dec	r31
    1fd8:	d1 f7       	brne	.-12     	; 0x1fce <_ZN6SdFile4readEPvj+0x9a>
    1fda:	e2 30       	cpi	r30, 0x02	; 2
    1fdc:	61 f4       	brne	.+24     	; 0x1ff6 <_ZN6SdFile4readEPvj+0xc2>
    1fde:	fc 01       	movw	r30, r24
    1fe0:	82 8d       	ldd	r24, Z+26	; 0x1a
    1fe2:	93 8d       	ldd	r25, Z+27	; 0x1b
    1fe4:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1fe6:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1fe8:	bc 01       	movw	r22, r24
    1fea:	cd 01       	movw	r24, r26
    1fec:	60 0f       	add	r22, r16
    1fee:	71 1f       	adc	r23, r17
    1ff0:	82 1f       	adc	r24, r18
    1ff2:	93 1f       	adc	r25, r19
    1ff4:	3f c0       	rjmp	.+126    	; 0x2074 <_ZN6SdFile4readEPvj+0x140>
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	74 80       	ldd	r7, Z+4	; 0x04
    1ffa:	7a 94       	dec	r7
    1ffc:	70 22       	and	r7, r16
    1ffe:	c1 14       	cp	r12, r1
    2000:	d1 04       	cpc	r13, r1
    2002:	c9 f4       	brne	.+50     	; 0x2036 <_ZN6SdFile4readEPvj+0x102>
    2004:	71 10       	cpse	r7, r1
    2006:	17 c0       	rjmp	.+46     	; 0x2036 <_ZN6SdFile4readEPvj+0x102>
    2008:	45 2b       	or	r20, r21
    200a:	46 2b       	or	r20, r22
    200c:	47 2b       	or	r20, r23
    200e:	49 f4       	brne	.+18     	; 0x2022 <_ZN6SdFile4readEPvj+0xee>
    2010:	8f 89       	ldd	r24, Y+23	; 0x17
    2012:	98 8d       	ldd	r25, Y+24	; 0x18
    2014:	a9 8d       	ldd	r26, Y+25	; 0x19
    2016:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2018:	8e 83       	std	Y+6, r24	; 0x06
    201a:	9f 83       	std	Y+7, r25	; 0x07
    201c:	a8 87       	std	Y+8, r26	; 0x08
    201e:	b9 87       	std	Y+9, r27	; 0x09
    2020:	0a c0       	rjmp	.+20     	; 0x2036 <_ZN6SdFile4readEPvj+0x102>
    2022:	4e 81       	ldd	r20, Y+6	; 0x06
    2024:	5f 81       	ldd	r21, Y+7	; 0x07
    2026:	68 85       	ldd	r22, Y+8	; 0x08
    2028:	79 85       	ldd	r23, Y+9	; 0x09
    202a:	91 01       	movw	r18, r2
    202c:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZNK8SdVolume6fatGetEmPm>
    2030:	88 23       	and	r24, r24
    2032:	09 f4       	brne	.+2      	; 0x2036 <_ZN6SdFile4readEPvj+0x102>
    2034:	97 cf       	rjmp	.-210    	; 0x1f64 <_ZN6SdFile4readEPvj+0x30>
    2036:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2038:	fc 8d       	ldd	r31, Y+28	; 0x1c
    203a:	8e 81       	ldd	r24, Y+6	; 0x06
    203c:	9f 81       	ldd	r25, Y+7	; 0x07
    203e:	a8 85       	ldd	r26, Y+8	; 0x08
    2040:	b9 85       	ldd	r27, Y+9	; 0x09
    2042:	02 97       	sbiw	r24, 0x02	; 2
    2044:	a1 09       	sbc	r26, r1
    2046:	b1 09       	sbc	r27, r1
    2048:	05 84       	ldd	r0, Z+13	; 0x0d
    204a:	04 c0       	rjmp	.+8      	; 0x2054 <_ZN6SdFile4readEPvj+0x120>
    204c:	88 0f       	add	r24, r24
    204e:	99 1f       	adc	r25, r25
    2050:	aa 1f       	adc	r26, r26
    2052:	bb 1f       	adc	r27, r27
    2054:	0a 94       	dec	r0
    2056:	d2 f7       	brpl	.-12     	; 0x204c <_ZN6SdFile4readEPvj+0x118>
    2058:	46 85       	ldd	r20, Z+14	; 0x0e
    205a:	57 85       	ldd	r21, Z+15	; 0x0f
    205c:	60 89       	ldd	r22, Z+16	; 0x10
    205e:	71 89       	ldd	r23, Z+17	; 0x11
    2060:	84 0f       	add	r24, r20
    2062:	95 1f       	adc	r25, r21
    2064:	a6 1f       	adc	r26, r22
    2066:	b7 1f       	adc	r27, r23
    2068:	bc 01       	movw	r22, r24
    206a:	cd 01       	movw	r24, r26
    206c:	67 0d       	add	r22, r7
    206e:	71 1d       	adc	r23, r1
    2070:	81 1d       	adc	r24, r1
    2072:	91 1d       	adc	r25, r1
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	32 e0       	ldi	r19, 0x02	; 2
    2078:	2c 19       	sub	r18, r12
    207a:	3d 09       	sbc	r19, r13
    207c:	32 01       	movw	r6, r4
    207e:	24 15       	cp	r18, r4
    2080:	35 05       	cpc	r19, r5
    2082:	08 f4       	brcc	.+2      	; 0x2086 <_ZN6SdFile4readEPvj+0x152>
    2084:	39 01       	movw	r6, r18
    2086:	2c 81       	ldd	r18, Y+4	; 0x04
    2088:	26 fd       	sbrc	r18, 6
    208a:	04 c0       	rjmp	.+8      	; 0x2094 <_ZN6SdFile4readEPvj+0x160>
    208c:	61 14       	cp	r6, r1
    208e:	f2 e0       	ldi	r31, 0x02	; 2
    2090:	7f 06       	cpc	r7, r31
    2092:	79 f5       	brne	.+94     	; 0x20f2 <_ZN6SdFile4readEPvj+0x1be>
    2094:	00 91 51 01 	lds	r16, 0x0151	; 0x800151 <_ZN8SdVolume17cacheBlockNumber_E>
    2098:	10 91 52 01 	lds	r17, 0x0152	; 0x800152 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    209c:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    20a0:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    20a4:	60 17       	cp	r22, r16
    20a6:	71 07       	cpc	r23, r17
    20a8:	82 07       	cpc	r24, r18
    20aa:	93 07       	cpc	r25, r19
    20ac:	19 f4       	brne	.+6      	; 0x20b4 <_ZN6SdFile4readEPvj+0x180>
    20ae:	21 c0       	rjmp	.+66     	; 0x20f2 <_ZN6SdFile4readEPvj+0x1be>
    20b0:	c4 01       	movw	r24, r8
    20b2:	32 c0       	rjmp	.+100    	; 0x2118 <_ZN6SdFile4readEPvj+0x1e4>
    20b4:	75 01       	movw	r14, r10
    20b6:	83 01       	movw	r16, r6
    20b8:	96 01       	movw	r18, r12
    20ba:	ab 01       	movw	r20, r22
    20bc:	bc 01       	movw	r22, r24
    20be:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <_ZN8SdVolume7sdCard_E>
    20c2:	90 91 45 05 	lds	r25, 0x0545	; 0x800545 <_ZN8SdVolume7sdCard_E+0x1>
    20c6:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_ZN7Sd2Card8readDataEmjjPh>
    20ca:	88 23       	and	r24, r24
    20cc:	09 f4       	brne	.+2      	; 0x20d0 <_ZN6SdFile4readEPvj+0x19c>
    20ce:	4a cf       	rjmp	.-364    	; 0x1f64 <_ZN6SdFile4readEPvj+0x30>
    20d0:	a6 0c       	add	r10, r6
    20d2:	b7 1c       	adc	r11, r7
    20d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    20d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    20d8:	ac 85       	ldd	r26, Y+12	; 0x0c
    20da:	bd 85       	ldd	r27, Y+13	; 0x0d
    20dc:	86 0d       	add	r24, r6
    20de:	97 1d       	adc	r25, r7
    20e0:	a1 1d       	adc	r26, r1
    20e2:	b1 1d       	adc	r27, r1
    20e4:	8a 87       	std	Y+10, r24	; 0x0a
    20e6:	9b 87       	std	Y+11, r25	; 0x0b
    20e8:	ac 87       	std	Y+12, r26	; 0x0c
    20ea:	bd 87       	std	Y+13, r27	; 0x0d
    20ec:	46 18       	sub	r4, r6
    20ee:	57 08       	sbc	r5, r7
    20f0:	5d cf       	rjmp	.-326    	; 0x1fac <_ZN6SdFile4readEPvj+0x78>
    20f2:	40 e0       	ldi	r20, 0x00	; 0
    20f4:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <_ZN8SdVolume13cacheRawBlockEmh>
    20f8:	88 23       	and	r24, r24
    20fa:	09 f4       	brne	.+2      	; 0x20fe <_ZN6SdFile4readEPvj+0x1ca>
    20fc:	33 cf       	rjmp	.-410    	; 0x1f64 <_ZN6SdFile4readEPvj+0x30>
    20fe:	f6 01       	movw	r30, r12
    2100:	ea 5b       	subi	r30, 0xBA	; 186
    2102:	fa 4f       	sbci	r31, 0xFA	; 250
    2104:	d5 01       	movw	r26, r10
    2106:	cf 01       	movw	r24, r30
    2108:	86 0d       	add	r24, r6
    210a:	97 1d       	adc	r25, r7
    210c:	8e 17       	cp	r24, r30
    210e:	9f 07       	cpc	r25, r31
    2110:	f9 f2       	breq	.-66     	; 0x20d0 <_ZN6SdFile4readEPvj+0x19c>
    2112:	21 91       	ld	r18, Z+
    2114:	2d 93       	st	X+, r18
    2116:	fa cf       	rjmp	.-12     	; 0x210c <_ZN6SdFile4readEPvj+0x1d8>
    2118:	df 91       	pop	r29
    211a:	cf 91       	pop	r28
    211c:	1f 91       	pop	r17
    211e:	0f 91       	pop	r16
    2120:	ff 90       	pop	r15
    2122:	ef 90       	pop	r14
    2124:	df 90       	pop	r13
    2126:	cf 90       	pop	r12
    2128:	bf 90       	pop	r11
    212a:	af 90       	pop	r10
    212c:	9f 90       	pop	r9
    212e:	8f 90       	pop	r8
    2130:	7f 90       	pop	r7
    2132:	6f 90       	pop	r6
    2134:	5f 90       	pop	r5
    2136:	4f 90       	pop	r4
    2138:	3f 90       	pop	r3
    213a:	2f 90       	pop	r2
    213c:	08 95       	ret

0000213e <_ZN6SdFile12readDirCacheEv>:
    213e:	ff 92       	push	r15
    2140:	0f 93       	push	r16
    2142:	1f 93       	push	r17
    2144:	cf 93       	push	r28
    2146:	df 93       	push	r29
    2148:	1f 92       	push	r1
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
    214e:	fc 01       	movw	r30, r24
    2150:	25 81       	ldd	r18, Z+5	; 0x05
    2152:	22 30       	cpi	r18, 0x02	; 2
    2154:	18 f4       	brcc	.+6      	; 0x215c <_ZN6SdFile12readDirCacheEv+0x1e>
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	33 c0       	rjmp	.+102    	; 0x21c2 <_ZN6SdFile12readDirCacheEv+0x84>
    215c:	8c 01       	movw	r16, r24
    215e:	fc 01       	movw	r30, r24
    2160:	42 85       	ldd	r20, Z+10	; 0x0a
    2162:	53 85       	ldd	r21, Z+11	; 0x0b
    2164:	64 85       	ldd	r22, Z+12	; 0x0c
    2166:	75 85       	ldd	r23, Z+13	; 0x0d
    2168:	85 e0       	ldi	r24, 0x05	; 5
    216a:	76 95       	lsr	r23
    216c:	67 95       	ror	r22
    216e:	57 95       	ror	r21
    2170:	47 95       	ror	r20
    2172:	8a 95       	dec	r24
    2174:	d1 f7       	brne	.-12     	; 0x216a <_ZN6SdFile12readDirCacheEv+0x2c>
    2176:	f4 2f       	mov	r31, r20
    2178:	ff 70       	andi	r31, 0x0F	; 15
    217a:	ff 2e       	mov	r15, r31
    217c:	41 e0       	ldi	r20, 0x01	; 1
    217e:	50 e0       	ldi	r21, 0x00	; 0
    2180:	be 01       	movw	r22, r28
    2182:	6f 5f       	subi	r22, 0xFF	; 255
    2184:	7f 4f       	sbci	r23, 0xFF	; 255
    2186:	c8 01       	movw	r24, r16
    2188:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <_ZN6SdFile4readEPvj>
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	19 f4       	brne	.+6      	; 0x2196 <_ZN6SdFile12readDirCacheEv+0x58>
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	02 c0       	rjmp	.+4      	; 0x219a <_ZN6SdFile12readDirCacheEv+0x5c>
    2196:	8f ef       	ldi	r24, 0xFF	; 255
    2198:	9f ef       	ldi	r25, 0xFF	; 255
    219a:	01 96       	adiw	r24, 0x01	; 1
    219c:	e1 f2       	breq	.-72     	; 0x2156 <_ZN6SdFile12readDirCacheEv+0x18>
    219e:	f8 01       	movw	r30, r16
    21a0:	82 85       	ldd	r24, Z+10	; 0x0a
    21a2:	93 85       	ldd	r25, Z+11	; 0x0b
    21a4:	a4 85       	ldd	r26, Z+12	; 0x0c
    21a6:	b5 85       	ldd	r27, Z+13	; 0x0d
    21a8:	4f 96       	adiw	r24, 0x1f	; 31
    21aa:	a1 1d       	adc	r26, r1
    21ac:	b1 1d       	adc	r27, r1
    21ae:	82 87       	std	Z+10, r24	; 0x0a
    21b0:	93 87       	std	Z+11, r25	; 0x0b
    21b2:	a4 87       	std	Z+12, r26	; 0x0c
    21b4:	b5 87       	std	Z+13, r27	; 0x0d
    21b6:	f0 e2       	ldi	r31, 0x20	; 32
    21b8:	ff 9e       	mul	r15, r31
    21ba:	c0 01       	movw	r24, r0
    21bc:	11 24       	eor	r1, r1
    21be:	8a 5b       	subi	r24, 0xBA	; 186
    21c0:	9a 4f       	sbci	r25, 0xFA	; 250
    21c2:	0f 90       	pop	r0
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	1f 91       	pop	r17
    21ca:	0f 91       	pop	r16
    21cc:	ff 90       	pop	r15
    21ce:	08 95       	ret

000021d0 <_ZN6SdFile7seekSetEm>:
    21d0:	8f 92       	push	r8
    21d2:	9f 92       	push	r9
    21d4:	af 92       	push	r10
    21d6:	bf 92       	push	r11
    21d8:	cf 92       	push	r12
    21da:	df 92       	push	r13
    21dc:	ef 92       	push	r14
    21de:	ff 92       	push	r15
    21e0:	0f 93       	push	r16
    21e2:	1f 93       	push	r17
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	ec 01       	movw	r28, r24
    21ea:	8d 81       	ldd	r24, Y+5	; 0x05
    21ec:	81 11       	cpse	r24, r1
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <_ZN6SdFile7seekSetEm+0x24>
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	78 c0       	rjmp	.+240    	; 0x22e4 <_ZN6SdFile7seekSetEm+0x114>
    21f4:	0b 89       	ldd	r16, Y+19	; 0x13
    21f6:	1c 89       	ldd	r17, Y+20	; 0x14
    21f8:	2d 89       	ldd	r18, Y+21	; 0x15
    21fa:	3e 89       	ldd	r19, Y+22	; 0x16
    21fc:	04 17       	cp	r16, r20
    21fe:	15 07       	cpc	r17, r21
    2200:	26 07       	cpc	r18, r22
    2202:	37 07       	cpc	r19, r23
    2204:	a8 f3       	brcs	.-22     	; 0x21f0 <_ZN6SdFile7seekSetEm+0x20>
    2206:	6a 01       	movw	r12, r20
    2208:	7b 01       	movw	r14, r22
    220a:	82 30       	cpi	r24, 0x02	; 2
    220c:	29 f4       	brne	.+10     	; 0x2218 <_ZN6SdFile7seekSetEm+0x48>
    220e:	ca 86       	std	Y+10, r12	; 0x0a
    2210:	db 86       	std	Y+11, r13	; 0x0b
    2212:	ec 86       	std	Y+12, r14	; 0x0c
    2214:	fd 86       	std	Y+13, r15	; 0x0d
    2216:	0d c0       	rjmp	.+26     	; 0x2232 <_ZN6SdFile7seekSetEm+0x62>
    2218:	c1 14       	cp	r12, r1
    221a:	d1 04       	cpc	r13, r1
    221c:	e1 04       	cpc	r14, r1
    221e:	f1 04       	cpc	r15, r1
    2220:	51 f4       	brne	.+20     	; 0x2236 <_ZN6SdFile7seekSetEm+0x66>
    2222:	1e 82       	std	Y+6, r1	; 0x06
    2224:	1f 82       	std	Y+7, r1	; 0x07
    2226:	18 86       	std	Y+8, r1	; 0x08
    2228:	19 86       	std	Y+9, r1	; 0x09
    222a:	1a 86       	std	Y+10, r1	; 0x0a
    222c:	1b 86       	std	Y+11, r1	; 0x0b
    222e:	1c 86       	std	Y+12, r1	; 0x0c
    2230:	1d 86       	std	Y+13, r1	; 0x0d
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	57 c0       	rjmp	.+174    	; 0x22e4 <_ZN6SdFile7seekSetEm+0x114>
    2236:	8a 84       	ldd	r8, Y+10	; 0x0a
    2238:	9b 84       	ldd	r9, Y+11	; 0x0b
    223a:	ac 84       	ldd	r10, Y+12	; 0x0c
    223c:	bd 84       	ldd	r11, Y+13	; 0x0d
    223e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2240:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2242:	25 85       	ldd	r18, Z+13	; 0x0d
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	27 5f       	subi	r18, 0xF7	; 247
    2248:	3f 4f       	sbci	r19, 0xFF	; 255
    224a:	b5 01       	movw	r22, r10
    224c:	a4 01       	movw	r20, r8
    224e:	41 50       	subi	r20, 0x01	; 1
    2250:	51 09       	sbc	r21, r1
    2252:	61 09       	sbc	r22, r1
    2254:	71 09       	sbc	r23, r1
    2256:	02 2e       	mov	r0, r18
    2258:	04 c0       	rjmp	.+8      	; 0x2262 <_ZN6SdFile7seekSetEm+0x92>
    225a:	76 95       	lsr	r23
    225c:	67 95       	ror	r22
    225e:	57 95       	ror	r21
    2260:	47 95       	ror	r20
    2262:	0a 94       	dec	r0
    2264:	d2 f7       	brpl	.-12     	; 0x225a <_ZN6SdFile7seekSetEm+0x8a>
    2266:	d7 01       	movw	r26, r14
    2268:	c6 01       	movw	r24, r12
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	a1 09       	sbc	r26, r1
    226e:	b1 09       	sbc	r27, r1
    2270:	04 c0       	rjmp	.+8      	; 0x227a <_ZN6SdFile7seekSetEm+0xaa>
    2272:	b6 95       	lsr	r27
    2274:	a7 95       	ror	r26
    2276:	97 95       	ror	r25
    2278:	87 95       	ror	r24
    227a:	2a 95       	dec	r18
    227c:	d2 f7       	brpl	.-12     	; 0x2272 <_ZN6SdFile7seekSetEm+0xa2>
    227e:	84 17       	cp	r24, r20
    2280:	95 07       	cpc	r25, r21
    2282:	a6 07       	cpc	r26, r22
    2284:	b7 07       	cpc	r27, r23
    2286:	20 f0       	brcs	.+8      	; 0x2290 <_ZN6SdFile7seekSetEm+0xc0>
    2288:	89 28       	or	r8, r9
    228a:	8a 28       	or	r8, r10
    228c:	8b 28       	or	r8, r11
    228e:	71 f4       	brne	.+28     	; 0x22ac <_ZN6SdFile7seekSetEm+0xdc>
    2290:	4f 89       	ldd	r20, Y+23	; 0x17
    2292:	58 8d       	ldd	r21, Y+24	; 0x18
    2294:	69 8d       	ldd	r22, Y+25	; 0x19
    2296:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2298:	4e 83       	std	Y+6, r20	; 0x06
    229a:	5f 83       	std	Y+7, r21	; 0x07
    229c:	68 87       	std	Y+8, r22	; 0x08
    229e:	79 87       	std	Y+9, r23	; 0x09
    22a0:	4c 01       	movw	r8, r24
    22a2:	5d 01       	movw	r10, r26
    22a4:	8e 01       	movw	r16, r28
    22a6:	0a 5f       	subi	r16, 0xFA	; 250
    22a8:	1f 4f       	sbci	r17, 0xFF	; 255
    22aa:	16 c0       	rjmp	.+44     	; 0x22d8 <_ZN6SdFile7seekSetEm+0x108>
    22ac:	84 1b       	sub	r24, r20
    22ae:	95 0b       	sbc	r25, r21
    22b0:	a6 0b       	sbc	r26, r22
    22b2:	b7 0b       	sbc	r27, r23
    22b4:	f5 cf       	rjmp	.-22     	; 0x22a0 <_ZN6SdFile7seekSetEm+0xd0>
    22b6:	4e 81       	ldd	r20, Y+6	; 0x06
    22b8:	5f 81       	ldd	r21, Y+7	; 0x07
    22ba:	68 85       	ldd	r22, Y+8	; 0x08
    22bc:	79 85       	ldd	r23, Y+9	; 0x09
    22be:	98 01       	movw	r18, r16
    22c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22c4:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZNK8SdVolume6fatGetEmPm>
    22c8:	91 e0       	ldi	r25, 0x01	; 1
    22ca:	89 1a       	sub	r8, r25
    22cc:	91 08       	sbc	r9, r1
    22ce:	a1 08       	sbc	r10, r1
    22d0:	b1 08       	sbc	r11, r1
    22d2:	88 23       	and	r24, r24
    22d4:	09 f4       	brne	.+2      	; 0x22d8 <_ZN6SdFile7seekSetEm+0x108>
    22d6:	8c cf       	rjmp	.-232    	; 0x21f0 <_ZN6SdFile7seekSetEm+0x20>
    22d8:	81 14       	cp	r8, r1
    22da:	91 04       	cpc	r9, r1
    22dc:	a1 04       	cpc	r10, r1
    22de:	b1 04       	cpc	r11, r1
    22e0:	51 f7       	brne	.-44     	; 0x22b6 <_ZN6SdFile7seekSetEm+0xe6>
    22e2:	95 cf       	rjmp	.-214    	; 0x220e <_ZN6SdFile7seekSetEm+0x3e>
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	1f 91       	pop	r17
    22ea:	0f 91       	pop	r16
    22ec:	ff 90       	pop	r15
    22ee:	ef 90       	pop	r14
    22f0:	df 90       	pop	r13
    22f2:	cf 90       	pop	r12
    22f4:	bf 90       	pop	r11
    22f6:	af 90       	pop	r10
    22f8:	9f 90       	pop	r9
    22fa:	8f 90       	pop	r8
    22fc:	08 95       	ret

000022fe <_ZN6SdFile4syncEv>:
    22fe:	0f 93       	push	r16
    2300:	1f 93       	push	r17
    2302:	cf 93       	push	r28
    2304:	df 93       	push	r29
    2306:	ec 01       	movw	r28, r24
    2308:	8d 81       	ldd	r24, Y+5	; 0x05
    230a:	88 23       	and	r24, r24
    230c:	c9 f1       	breq	.+114    	; 0x2380 <_ZN6SdFile4syncEv+0x82>
    230e:	8c 81       	ldd	r24, Y+4	; 0x04
    2310:	87 ff       	sbrs	r24, 7
    2312:	30 c0       	rjmp	.+96     	; 0x2374 <_ZN6SdFile4syncEv+0x76>
    2314:	61 e0       	ldi	r22, 0x01	; 1
    2316:	ce 01       	movw	r24, r28
    2318:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <_ZN6SdFile13cacheDirEntryEh>
    231c:	8c 01       	movw	r16, r24
    231e:	89 2b       	or	r24, r25
    2320:	79 f1       	breq	.+94     	; 0x2380 <_ZN6SdFile4syncEv+0x82>
    2322:	8d 81       	ldd	r24, Y+5	; 0x05
    2324:	82 30       	cpi	r24, 0x02	; 2
    2326:	48 f4       	brcc	.+18     	; 0x233a <_ZN6SdFile4syncEv+0x3c>
    2328:	8b 89       	ldd	r24, Y+19	; 0x13
    232a:	9c 89       	ldd	r25, Y+20	; 0x14
    232c:	ad 89       	ldd	r26, Y+21	; 0x15
    232e:	be 89       	ldd	r27, Y+22	; 0x16
    2330:	f8 01       	movw	r30, r16
    2332:	84 8f       	std	Z+28, r24	; 0x1c
    2334:	95 8f       	std	Z+29, r25	; 0x1d
    2336:	a6 8f       	std	Z+30, r26	; 0x1e
    2338:	b7 8f       	std	Z+31, r27	; 0x1f
    233a:	8f 89       	ldd	r24, Y+23	; 0x17
    233c:	98 8d       	ldd	r25, Y+24	; 0x18
    233e:	a9 8d       	ldd	r26, Y+25	; 0x19
    2340:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2342:	f8 01       	movw	r30, r16
    2344:	93 8f       	std	Z+27, r25	; 0x1b
    2346:	82 8f       	std	Z+26, r24	; 0x1a
    2348:	b5 8b       	std	Z+21, r27	; 0x15
    234a:	a4 8b       	std	Z+20, r26	; 0x14
    234c:	e0 91 3d 05 	lds	r30, 0x053D	; 0x80053d <_ZN6SdFile9dateTime_E>
    2350:	f0 91 3e 05 	lds	r31, 0x053E	; 0x80053e <_ZN6SdFile9dateTime_E+0x1>
    2354:	30 97       	sbiw	r30, 0x00	; 0
    2356:	59 f0       	breq	.+22     	; 0x236e <_ZN6SdFile4syncEv+0x70>
    2358:	b8 01       	movw	r22, r16
    235a:	6a 5e       	subi	r22, 0xEA	; 234
    235c:	7f 4f       	sbci	r23, 0xFF	; 255
    235e:	c8 01       	movw	r24, r16
    2360:	48 96       	adiw	r24, 0x18	; 24
    2362:	09 95       	icall
    2364:	f8 01       	movw	r30, r16
    2366:	80 8d       	ldd	r24, Z+24	; 0x18
    2368:	91 8d       	ldd	r25, Z+25	; 0x19
    236a:	93 8b       	std	Z+19, r25	; 0x13
    236c:	82 8b       	std	Z+18, r24	; 0x12
    236e:	8c 81       	ldd	r24, Y+4	; 0x04
    2370:	8f 77       	andi	r24, 0x7F	; 127
    2372:	8c 83       	std	Y+4, r24	; 0x04
    2374:	df 91       	pop	r29
    2376:	cf 91       	pop	r28
    2378:	1f 91       	pop	r17
    237a:	0f 91       	pop	r16
    237c:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <_ZN8SdVolume10cacheFlushEv>
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	df 91       	pop	r29
    2384:	cf 91       	pop	r28
    2386:	1f 91       	pop	r17
    2388:	0f 91       	pop	r16
    238a:	08 95       	ret

0000238c <_ZN6SdFile5closeEv>:
    238c:	cf 93       	push	r28
    238e:	df 93       	push	r29
    2390:	ec 01       	movw	r28, r24
    2392:	0e 94 7f 11 	call	0x22fe	; 0x22fe <_ZN6SdFile4syncEv>
    2396:	88 23       	and	r24, r24
    2398:	11 f0       	breq	.+4      	; 0x239e <_ZN6SdFile5closeEv+0x12>
    239a:	1d 82       	std	Y+5, r1	; 0x05
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	df 91       	pop	r29
    23a0:	cf 91       	pop	r28
    23a2:	08 95       	ret

000023a4 <_ZN6SdFile8truncateEm>:
    23a4:	4f 92       	push	r4
    23a6:	5f 92       	push	r5
    23a8:	6f 92       	push	r6
    23aa:	7f 92       	push	r7
    23ac:	8f 92       	push	r8
    23ae:	9f 92       	push	r9
    23b0:	af 92       	push	r10
    23b2:	bf 92       	push	r11
    23b4:	ef 92       	push	r14
    23b6:	ff 92       	push	r15
    23b8:	0f 93       	push	r16
    23ba:	1f 93       	push	r17
    23bc:	cf 93       	push	r28
    23be:	df 93       	push	r29
    23c0:	00 d0       	rcall	.+0      	; 0x23c2 <_ZN6SdFile8truncateEm+0x1e>
    23c2:	00 d0       	rcall	.+0      	; 0x23c4 <_ZN6SdFile8truncateEm+0x20>
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
    23c8:	fc 01       	movw	r30, r24
    23ca:	85 81       	ldd	r24, Z+5	; 0x05
    23cc:	81 30       	cpi	r24, 0x01	; 1
    23ce:	e9 f4       	brne	.+58     	; 0x240a <_ZN6SdFile8truncateEm+0x66>
    23d0:	84 81       	ldd	r24, Z+4	; 0x04
    23d2:	81 ff       	sbrs	r24, 1
    23d4:	1a c0       	rjmp	.+52     	; 0x240a <_ZN6SdFile8truncateEm+0x66>
    23d6:	83 89       	ldd	r24, Z+19	; 0x13
    23d8:	94 89       	ldd	r25, Z+20	; 0x14
    23da:	a5 89       	ldd	r26, Z+21	; 0x15
    23dc:	b6 89       	ldd	r27, Z+22	; 0x16
    23de:	84 17       	cp	r24, r20
    23e0:	95 07       	cpc	r25, r21
    23e2:	a6 07       	cpc	r26, r22
    23e4:	b7 07       	cpc	r27, r23
    23e6:	88 f0       	brcs	.+34     	; 0x240a <_ZN6SdFile8truncateEm+0x66>
    23e8:	89 2b       	or	r24, r25
    23ea:	8a 2b       	or	r24, r26
    23ec:	8b 2b       	or	r24, r27
    23ee:	09 f4       	brne	.+2      	; 0x23f2 <_ZN6SdFile8truncateEm+0x4e>
    23f0:	79 c0       	rjmp	.+242    	; 0x24e4 <_ZN6SdFile8truncateEm+0x140>
    23f2:	4a 01       	movw	r8, r20
    23f4:	5b 01       	movw	r10, r22
    23f6:	7f 01       	movw	r14, r30
    23f8:	42 84       	ldd	r4, Z+10	; 0x0a
    23fa:	53 84       	ldd	r5, Z+11	; 0x0b
    23fc:	64 84       	ldd	r6, Z+12	; 0x0c
    23fe:	75 84       	ldd	r7, Z+13	; 0x0d
    2400:	cf 01       	movw	r24, r30
    2402:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <_ZN6SdFile7seekSetEm>
    2406:	81 11       	cpse	r24, r1
    2408:	02 c0       	rjmp	.+4      	; 0x240e <_ZN6SdFile8truncateEm+0x6a>
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	6c c0       	rjmp	.+216    	; 0x24e6 <_ZN6SdFile8truncateEm+0x142>
    240e:	f7 01       	movw	r30, r14
    2410:	83 8d       	ldd	r24, Z+27	; 0x1b
    2412:	94 8d       	ldd	r25, Z+28	; 0x1c
    2414:	81 14       	cp	r8, r1
    2416:	91 04       	cpc	r9, r1
    2418:	a1 04       	cpc	r10, r1
    241a:	b1 04       	cpc	r11, r1
    241c:	71 f4       	brne	.+28     	; 0x243a <_ZN6SdFile8truncateEm+0x96>
    241e:	47 89       	ldd	r20, Z+23	; 0x17
    2420:	50 8d       	ldd	r21, Z+24	; 0x18
    2422:	61 8d       	ldd	r22, Z+25	; 0x19
    2424:	72 8d       	ldd	r23, Z+26	; 0x1a
    2426:	0e 94 0b 19 	call	0x3216	; 0x3216 <_ZN8SdVolume9freeChainEm>
    242a:	88 23       	and	r24, r24
    242c:	71 f3       	breq	.-36     	; 0x240a <_ZN6SdFile8truncateEm+0x66>
    242e:	f7 01       	movw	r30, r14
    2430:	17 8a       	std	Z+23, r1	; 0x17
    2432:	10 8e       	std	Z+24, r1	; 0x18
    2434:	11 8e       	std	Z+25, r1	; 0x19
    2436:	12 8e       	std	Z+26, r1	; 0x1a
    2438:	3a c0       	rjmp	.+116    	; 0x24ae <_ZN6SdFile8truncateEm+0x10a>
    243a:	f7 01       	movw	r30, r14
    243c:	46 81       	ldd	r20, Z+6	; 0x06
    243e:	57 81       	ldd	r21, Z+7	; 0x07
    2440:	60 85       	ldd	r22, Z+8	; 0x08
    2442:	71 85       	ldd	r23, Z+9	; 0x09
    2444:	9e 01       	movw	r18, r28
    2446:	2f 5f       	subi	r18, 0xFF	; 255
    2448:	3f 4f       	sbci	r19, 0xFF	; 255
    244a:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZNK8SdVolume6fatGetEmPm>
    244e:	88 23       	and	r24, r24
    2450:	e1 f2       	breq	.-72     	; 0x240a <_ZN6SdFile8truncateEm+0x66>
    2452:	49 81       	ldd	r20, Y+1	; 0x01
    2454:	5a 81       	ldd	r21, Y+2	; 0x02
    2456:	6b 81       	ldd	r22, Y+3	; 0x03
    2458:	7c 81       	ldd	r23, Y+4	; 0x04
    245a:	f7 01       	movw	r30, r14
    245c:	83 8d       	ldd	r24, Z+27	; 0x1b
    245e:	94 8d       	ldd	r25, Z+28	; 0x1c
    2460:	fc 01       	movw	r30, r24
    2462:	27 89       	ldd	r18, Z+23	; 0x17
    2464:	20 31       	cpi	r18, 0x10	; 16
    2466:	29 f0       	breq	.+10     	; 0x2472 <_ZN6SdFile8truncateEm+0xce>
    2468:	08 ef       	ldi	r16, 0xF8	; 248
    246a:	1f ef       	ldi	r17, 0xFF	; 255
    246c:	2f ef       	ldi	r18, 0xFF	; 255
    246e:	3f e0       	ldi	r19, 0x0F	; 15
    2470:	04 c0       	rjmp	.+8      	; 0x247a <_ZN6SdFile8truncateEm+0xd6>
    2472:	08 ef       	ldi	r16, 0xF8	; 248
    2474:	1f ef       	ldi	r17, 0xFF	; 255
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	40 17       	cp	r20, r16
    247c:	51 07       	cpc	r21, r17
    247e:	62 07       	cpc	r22, r18
    2480:	73 07       	cpc	r23, r19
    2482:	a8 f4       	brcc	.+42     	; 0x24ae <_ZN6SdFile8truncateEm+0x10a>
    2484:	0e 94 0b 19 	call	0x3216	; 0x3216 <_ZN8SdVolume9freeChainEm>
    2488:	88 23       	and	r24, r24
    248a:	09 f4       	brne	.+2      	; 0x248e <_ZN6SdFile8truncateEm+0xea>
    248c:	be cf       	rjmp	.-132    	; 0x240a <_ZN6SdFile8truncateEm+0x66>
    248e:	f7 01       	movw	r30, r14
    2490:	46 81       	ldd	r20, Z+6	; 0x06
    2492:	57 81       	ldd	r21, Z+7	; 0x07
    2494:	60 85       	ldd	r22, Z+8	; 0x08
    2496:	71 85       	ldd	r23, Z+9	; 0x09
    2498:	0f ef       	ldi	r16, 0xFF	; 255
    249a:	1f ef       	ldi	r17, 0xFF	; 255
    249c:	2f ef       	ldi	r18, 0xFF	; 255
    249e:	3f e0       	ldi	r19, 0x0F	; 15
    24a0:	83 8d       	ldd	r24, Z+27	; 0x1b
    24a2:	94 8d       	ldd	r25, Z+28	; 0x1c
    24a4:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <_ZN8SdVolume6fatPutEmm>
    24a8:	88 23       	and	r24, r24
    24aa:	09 f4       	brne	.+2      	; 0x24ae <_ZN6SdFile8truncateEm+0x10a>
    24ac:	ae cf       	rjmp	.-164    	; 0x240a <_ZN6SdFile8truncateEm+0x66>
    24ae:	f7 01       	movw	r30, r14
    24b0:	83 8a       	std	Z+19, r8	; 0x13
    24b2:	94 8a       	std	Z+20, r9	; 0x14
    24b4:	a5 8a       	std	Z+21, r10	; 0x15
    24b6:	b6 8a       	std	Z+22, r11	; 0x16
    24b8:	84 81       	ldd	r24, Z+4	; 0x04
    24ba:	80 68       	ori	r24, 0x80	; 128
    24bc:	84 83       	std	Z+4, r24	; 0x04
    24be:	c7 01       	movw	r24, r14
    24c0:	0e 94 7f 11 	call	0x22fe	; 0x22fe <_ZN6SdFile4syncEv>
    24c4:	88 23       	and	r24, r24
    24c6:	09 f4       	brne	.+2      	; 0x24ca <_ZN6SdFile8truncateEm+0x126>
    24c8:	a0 cf       	rjmp	.-192    	; 0x240a <_ZN6SdFile8truncateEm+0x66>
    24ca:	b5 01       	movw	r22, r10
    24cc:	a4 01       	movw	r20, r8
    24ce:	48 14       	cp	r4, r8
    24d0:	59 04       	cpc	r5, r9
    24d2:	6a 04       	cpc	r6, r10
    24d4:	7b 04       	cpc	r7, r11
    24d6:	10 f4       	brcc	.+4      	; 0x24dc <_ZN6SdFile8truncateEm+0x138>
    24d8:	b3 01       	movw	r22, r6
    24da:	a2 01       	movw	r20, r4
    24dc:	c7 01       	movw	r24, r14
    24de:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <_ZN6SdFile7seekSetEm>
    24e2:	01 c0       	rjmp	.+2      	; 0x24e6 <_ZN6SdFile8truncateEm+0x142>
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	df 91       	pop	r29
    24f0:	cf 91       	pop	r28
    24f2:	1f 91       	pop	r17
    24f4:	0f 91       	pop	r16
    24f6:	ff 90       	pop	r15
    24f8:	ef 90       	pop	r14
    24fa:	bf 90       	pop	r11
    24fc:	af 90       	pop	r10
    24fe:	9f 90       	pop	r9
    2500:	8f 90       	pop	r8
    2502:	7f 90       	pop	r7
    2504:	6f 90       	pop	r6
    2506:	5f 90       	pop	r5
    2508:	4f 90       	pop	r4
    250a:	08 95       	ret

0000250c <_ZN6SdFile15openCachedEntryEhh>:
    250c:	1f 93       	push	r17
    250e:	cf 93       	push	r28
    2510:	df 93       	push	r29
    2512:	ec 01       	movw	r28, r24
    2514:	80 e2       	ldi	r24, 0x20	; 32
    2516:	68 9f       	mul	r22, r24
    2518:	f0 01       	movw	r30, r0
    251a:	11 24       	eor	r1, r1
    251c:	ea 5b       	subi	r30, 0xBA	; 186
    251e:	fa 4f       	sbci	r31, 0xFA	; 250
    2520:	93 85       	ldd	r25, Z+11	; 0x0b
    2522:	91 71       	andi	r25, 0x11	; 17
    2524:	29 f0       	breq	.+10     	; 0x2530 <_ZN6SdFile15openCachedEntryEhh+0x24>
    2526:	84 2f       	mov	r24, r20
    2528:	82 74       	andi	r24, 0x42	; 66
    252a:	11 f0       	breq	.+4      	; 0x2530 <_ZN6SdFile15openCachedEntryEhh+0x24>
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	52 c0       	rjmp	.+164    	; 0x25d4 <_ZN6SdFile15openCachedEntryEhh+0xc8>
    2530:	14 2f       	mov	r17, r20
    2532:	6a 8b       	std	Y+18, r22	; 0x12
    2534:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <_ZN8SdVolume17cacheBlockNumber_E>
    2538:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    253c:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2540:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2544:	8e 87       	std	Y+14, r24	; 0x0e
    2546:	9f 87       	std	Y+15, r25	; 0x0f
    2548:	a8 8b       	std	Y+16, r26	; 0x10
    254a:	b9 8b       	std	Y+17, r27	; 0x11
    254c:	44 89       	ldd	r20, Z+20	; 0x14
    254e:	55 89       	ldd	r21, Z+21	; 0x15
    2550:	60 e0       	ldi	r22, 0x00	; 0
    2552:	70 e0       	ldi	r23, 0x00	; 0
    2554:	ba 01       	movw	r22, r20
    2556:	55 27       	eor	r21, r21
    2558:	44 27       	eor	r20, r20
    255a:	82 8d       	ldd	r24, Z+26	; 0x1a
    255c:	93 8d       	ldd	r25, Z+27	; 0x1b
    255e:	a0 e0       	ldi	r26, 0x00	; 0
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	48 2b       	or	r20, r24
    2564:	59 2b       	or	r21, r25
    2566:	6a 2b       	or	r22, r26
    2568:	7b 2b       	or	r23, r27
    256a:	4f 8b       	std	Y+23, r20	; 0x17
    256c:	58 8f       	std	Y+24, r21	; 0x18
    256e:	69 8f       	std	Y+25, r22	; 0x19
    2570:	7a 8f       	std	Y+26, r23	; 0x1a
    2572:	83 85       	ldd	r24, Z+11	; 0x0b
    2574:	88 71       	andi	r24, 0x18	; 24
    2576:	51 f4       	brne	.+20     	; 0x258c <_ZN6SdFile15openCachedEntryEhh+0x80>
    2578:	84 8d       	ldd	r24, Z+28	; 0x1c
    257a:	95 8d       	ldd	r25, Z+29	; 0x1d
    257c:	a6 8d       	ldd	r26, Z+30	; 0x1e
    257e:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2580:	8b 8b       	std	Y+19, r24	; 0x13
    2582:	9c 8b       	std	Y+20, r25	; 0x14
    2584:	ad 8b       	std	Y+21, r26	; 0x15
    2586:	be 8b       	std	Y+22, r27	; 0x16
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	0c c0       	rjmp	.+24     	; 0x25a4 <_ZN6SdFile15openCachedEntryEhh+0x98>
    258c:	80 31       	cpi	r24, 0x10	; 16
    258e:	71 f6       	brne	.-100    	; 0x252c <_ZN6SdFile15openCachedEntryEhh+0x20>
    2590:	9e 01       	movw	r18, r28
    2592:	2d 5e       	subi	r18, 0xED	; 237
    2594:	3f 4f       	sbci	r19, 0xFF	; 255
    2596:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2598:	9c 8d       	ldd	r25, Y+28	; 0x1c
    259a:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <_ZNK8SdVolume9chainSizeEmPm>
    259e:	88 23       	and	r24, r24
    25a0:	29 f2       	breq	.-118    	; 0x252c <_ZN6SdFile15openCachedEntryEhh+0x20>
    25a2:	84 e0       	ldi	r24, 0x04	; 4
    25a4:	8d 83       	std	Y+5, r24	; 0x05
    25a6:	81 2f       	mov	r24, r17
    25a8:	8f 70       	andi	r24, 0x0F	; 15
    25aa:	8c 83       	std	Y+4, r24	; 0x04
    25ac:	1e 82       	std	Y+6, r1	; 0x06
    25ae:	1f 82       	std	Y+7, r1	; 0x07
    25b0:	18 86       	std	Y+8, r1	; 0x08
    25b2:	19 86       	std	Y+9, r1	; 0x09
    25b4:	1a 86       	std	Y+10, r1	; 0x0a
    25b6:	1b 86       	std	Y+11, r1	; 0x0b
    25b8:	1c 86       	std	Y+12, r1	; 0x0c
    25ba:	1d 86       	std	Y+13, r1	; 0x0d
    25bc:	16 ff       	sbrs	r17, 6
    25be:	09 c0       	rjmp	.+18     	; 0x25d2 <_ZN6SdFile15openCachedEntryEhh+0xc6>
    25c0:	40 e0       	ldi	r20, 0x00	; 0
    25c2:	50 e0       	ldi	r21, 0x00	; 0
    25c4:	ba 01       	movw	r22, r20
    25c6:	ce 01       	movw	r24, r28
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	1f 91       	pop	r17
    25ce:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <_ZN6SdFile8truncateEm>
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	df 91       	pop	r29
    25d6:	cf 91       	pop	r28
    25d8:	1f 91       	pop	r17
    25da:	08 95       	ret

000025dc <_ZN6SdFile4openEPS_PKch>:
    25dc:	bf 92       	push	r11
    25de:	cf 92       	push	r12
    25e0:	df 92       	push	r13
    25e2:	ef 92       	push	r14
    25e4:	ff 92       	push	r15
    25e6:	0f 93       	push	r16
    25e8:	1f 93       	push	r17
    25ea:	cf 93       	push	r28
    25ec:	df 93       	push	r29
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
    25f2:	2b 97       	sbiw	r28, 0x0b	; 11
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	f8 94       	cli
    25f8:	de bf       	out	0x3e, r29	; 62
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	cd bf       	out	0x3d, r28	; 61
    25fe:	fc 01       	movw	r30, r24
    2600:	35 81       	ldd	r19, Z+5	; 0x05
    2602:	31 11       	cpse	r19, r1
    2604:	bf c0       	rjmp	.+382    	; 0x2784 <_ZN6SdFile4openEPS_PKch+0x1a8>
    2606:	c2 2e       	mov	r12, r18
    2608:	8b 01       	movw	r16, r22
    260a:	7c 01       	movw	r14, r24
    260c:	be 01       	movw	r22, r28
    260e:	6f 5f       	subi	r22, 0xFF	; 255
    2610:	7f 4f       	sbci	r23, 0xFF	; 255
    2612:	ca 01       	movw	r24, r20
    2614:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_ZN6SdFile10make83NameEPKcPh>
    2618:	88 23       	and	r24, r24
    261a:	09 f4       	brne	.+2      	; 0x261e <_ZN6SdFile4openEPS_PKch+0x42>
    261c:	b3 c0       	rjmp	.+358    	; 0x2784 <_ZN6SdFile4openEPS_PKch+0x1a8>
    261e:	f8 01       	movw	r30, r16
    2620:	83 8d       	ldd	r24, Z+27	; 0x1b
    2622:	94 8d       	ldd	r25, Z+28	; 0x1c
    2624:	f7 01       	movw	r30, r14
    2626:	94 8f       	std	Z+28, r25	; 0x1c
    2628:	83 8f       	std	Z+27, r24	; 0x1b
    262a:	f8 01       	movw	r30, r16
    262c:	16 82       	std	Z+6, r1	; 0x06
    262e:	17 82       	std	Z+7, r1	; 0x07
    2630:	10 86       	std	Z+8, r1	; 0x08
    2632:	11 86       	std	Z+9, r1	; 0x09
    2634:	12 86       	std	Z+10, r1	; 0x0a
    2636:	13 86       	std	Z+11, r1	; 0x0b
    2638:	14 86       	std	Z+12, r1	; 0x0c
    263a:	15 86       	std	Z+13, r1	; 0x0d
    263c:	d1 2c       	mov	r13, r1
    263e:	f8 01       	movw	r30, r16
    2640:	82 85       	ldd	r24, Z+10	; 0x0a
    2642:	93 85       	ldd	r25, Z+11	; 0x0b
    2644:	a4 85       	ldd	r26, Z+12	; 0x0c
    2646:	b5 85       	ldd	r27, Z+13	; 0x0d
    2648:	43 89       	ldd	r20, Z+19	; 0x13
    264a:	54 89       	ldd	r21, Z+20	; 0x14
    264c:	65 89       	ldd	r22, Z+21	; 0x15
    264e:	76 89       	ldd	r23, Z+22	; 0x16
    2650:	84 17       	cp	r24, r20
    2652:	95 07       	cpc	r25, r21
    2654:	a6 07       	cpc	r26, r22
    2656:	b7 07       	cpc	r27, r23
    2658:	08 f0       	brcs	.+2      	; 0x265c <_ZN6SdFile4openEPS_PKch+0x80>
    265a:	3e c0       	rjmp	.+124    	; 0x26d8 <_ZN6SdFile4openEPS_PKch+0xfc>
    265c:	25 e0       	ldi	r18, 0x05	; 5
    265e:	b6 95       	lsr	r27
    2660:	a7 95       	ror	r26
    2662:	97 95       	ror	r25
    2664:	87 95       	ror	r24
    2666:	2a 95       	dec	r18
    2668:	d1 f7       	brne	.-12     	; 0x265e <_ZN6SdFile4openEPS_PKch+0x82>
    266a:	f8 2f       	mov	r31, r24
    266c:	ff 70       	andi	r31, 0x0F	; 15
    266e:	bf 2e       	mov	r11, r31
    2670:	c8 01       	movw	r24, r16
    2672:	0e 94 9f 10 	call	0x213e	; 0x213e <_ZN6SdFile12readDirCacheEv>
    2676:	00 97       	sbiw	r24, 0x00	; 0
    2678:	09 f4       	brne	.+2      	; 0x267c <_ZN6SdFile4openEPS_PKch+0xa0>
    267a:	84 c0       	rjmp	.+264    	; 0x2784 <_ZN6SdFile4openEPS_PKch+0x1a8>
    267c:	fc 01       	movw	r30, r24
    267e:	20 81       	ld	r18, Z
    2680:	22 23       	and	r18, r18
    2682:	a1 f0       	breq	.+40     	; 0x26ac <_ZN6SdFile4openEPS_PKch+0xd0>
    2684:	25 3e       	cpi	r18, 0xE5	; 229
    2686:	09 f4       	brne	.+2      	; 0x268a <_ZN6SdFile4openEPS_PKch+0xae>
    2688:	7f c0       	rjmp	.+254    	; 0x2788 <_ZN6SdFile4openEPS_PKch+0x1ac>
    268a:	4b e0       	ldi	r20, 0x0B	; 11
    268c:	50 e0       	ldi	r21, 0x00	; 0
    268e:	bc 01       	movw	r22, r24
    2690:	ce 01       	movw	r24, r28
    2692:	01 96       	adiw	r24, 0x01	; 1
    2694:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <memcmp>
    2698:	89 2b       	or	r24, r25
    269a:	89 f6       	brne	.-94     	; 0x263e <_ZN6SdFile4openEPS_PKch+0x62>
    269c:	8c 2d       	mov	r24, r12
    269e:	80 73       	andi	r24, 0x30	; 48
    26a0:	80 33       	cpi	r24, 0x30	; 48
    26a2:	09 f4       	brne	.+2      	; 0x26a6 <_ZN6SdFile4openEPS_PKch+0xca>
    26a4:	6f c0       	rjmp	.+222    	; 0x2784 <_ZN6SdFile4openEPS_PKch+0x1a8>
    26a6:	4c 2d       	mov	r20, r12
    26a8:	6b 2d       	mov	r22, r11
    26aa:	68 c0       	rjmp	.+208    	; 0x277c <_ZN6SdFile4openEPS_PKch+0x1a0>
    26ac:	d1 10       	cpse	r13, r1
    26ae:	12 c0       	rjmp	.+36     	; 0x26d4 <_ZN6SdFile4openEPS_PKch+0xf8>
    26b0:	f7 01       	movw	r30, r14
    26b2:	b2 8a       	std	Z+18, r11	; 0x12
    26b4:	40 91 51 01 	lds	r20, 0x0151	; 0x800151 <_ZN8SdVolume17cacheBlockNumber_E>
    26b8:	50 91 52 01 	lds	r21, 0x0152	; 0x800152 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    26bc:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    26c0:	70 91 54 01 	lds	r23, 0x0154	; 0x800154 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    26c4:	46 87       	std	Z+14, r20	; 0x0e
    26c6:	57 87       	std	Z+15, r21	; 0x0f
    26c8:	60 8b       	std	Z+16, r22	; 0x10
    26ca:	71 8b       	std	Z+17, r23	; 0x11
    26cc:	fc 01       	movw	r30, r24
    26ce:	80 81       	ld	r24, Z
    26d0:	81 11       	cpse	r24, r1
    26d2:	5d c0       	rjmp	.+186    	; 0x278e <_ZN6SdFile4openEPS_PKch+0x1b2>
    26d4:	dd 24       	eor	r13, r13
    26d6:	d3 94       	inc	r13
    26d8:	8c 2d       	mov	r24, r12
    26da:	82 71       	andi	r24, 0x12	; 18
    26dc:	82 31       	cpi	r24, 0x12	; 18
    26de:	09 f0       	breq	.+2      	; 0x26e2 <_ZN6SdFile4openEPS_PKch+0x106>
    26e0:	51 c0       	rjmp	.+162    	; 0x2784 <_ZN6SdFile4openEPS_PKch+0x1a8>
    26e2:	dd 20       	and	r13, r13
    26e4:	41 f0       	breq	.+16     	; 0x26f6 <_ZN6SdFile4openEPS_PKch+0x11a>
    26e6:	61 e0       	ldi	r22, 0x01	; 1
    26e8:	c7 01       	movw	r24, r14
    26ea:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <_ZN6SdFile13cacheDirEntryEh>
    26ee:	8c 01       	movw	r16, r24
    26f0:	89 2b       	or	r24, r25
    26f2:	79 f4       	brne	.+30     	; 0x2712 <_ZN6SdFile4openEPS_PKch+0x136>
    26f4:	47 c0       	rjmp	.+142    	; 0x2784 <_ZN6SdFile4openEPS_PKch+0x1a8>
    26f6:	f8 01       	movw	r30, r16
    26f8:	85 81       	ldd	r24, Z+5	; 0x05
    26fa:	82 30       	cpi	r24, 0x02	; 2
    26fc:	09 f4       	brne	.+2      	; 0x2700 <_ZN6SdFile4openEPS_PKch+0x124>
    26fe:	42 c0       	rjmp	.+132    	; 0x2784 <_ZN6SdFile4openEPS_PKch+0x1a8>
    2700:	c8 01       	movw	r24, r16
    2702:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <_ZN6SdFile13addDirClusterEv>
    2706:	88 23       	and	r24, r24
    2708:	e9 f1       	breq	.+122    	; 0x2784 <_ZN6SdFile4openEPS_PKch+0x1a8>
    270a:	f7 01       	movw	r30, r14
    270c:	12 8a       	std	Z+18, r1	; 0x12
    270e:	06 e4       	ldi	r16, 0x46	; 70
    2710:	15 e0       	ldi	r17, 0x05	; 5
    2712:	80 e2       	ldi	r24, 0x20	; 32
    2714:	f8 01       	movw	r30, r16
    2716:	11 92       	st	Z+, r1
    2718:	8a 95       	dec	r24
    271a:	e9 f7       	brne	.-6      	; 0x2716 <_ZN6SdFile4openEPS_PKch+0x13a>
    271c:	8b e0       	ldi	r24, 0x0B	; 11
    271e:	fe 01       	movw	r30, r28
    2720:	31 96       	adiw	r30, 0x01	; 1
    2722:	d8 01       	movw	r26, r16
    2724:	01 90       	ld	r0, Z+
    2726:	0d 92       	st	X+, r0
    2728:	8a 95       	dec	r24
    272a:	e1 f7       	brne	.-8      	; 0x2724 <_ZN6SdFile4openEPS_PKch+0x148>
    272c:	e0 91 3d 05 	lds	r30, 0x053D	; 0x80053d <_ZN6SdFile9dateTime_E>
    2730:	f0 91 3e 05 	lds	r31, 0x053E	; 0x80053e <_ZN6SdFile9dateTime_E+0x1>
    2734:	30 97       	sbiw	r30, 0x00	; 0
    2736:	39 f0       	breq	.+14     	; 0x2746 <_ZN6SdFile4openEPS_PKch+0x16a>
    2738:	b8 01       	movw	r22, r16
    273a:	62 5f       	subi	r22, 0xF2	; 242
    273c:	7f 4f       	sbci	r23, 0xFF	; 255
    273e:	c8 01       	movw	r24, r16
    2740:	40 96       	adiw	r24, 0x10	; 16
    2742:	09 95       	icall
    2744:	09 c0       	rjmp	.+18     	; 0x2758 <_ZN6SdFile4openEPS_PKch+0x17c>
    2746:	81 e2       	ldi	r24, 0x21	; 33
    2748:	98 e2       	ldi	r25, 0x28	; 40
    274a:	f8 01       	movw	r30, r16
    274c:	91 8b       	std	Z+17, r25	; 0x11
    274e:	80 8b       	std	Z+16, r24	; 0x10
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	98 e0       	ldi	r25, 0x08	; 8
    2754:	97 87       	std	Z+15, r25	; 0x0f
    2756:	86 87       	std	Z+14, r24	; 0x0e
    2758:	f8 01       	movw	r30, r16
    275a:	80 89       	ldd	r24, Z+16	; 0x10
    275c:	91 89       	ldd	r25, Z+17	; 0x11
    275e:	93 8b       	std	Z+19, r25	; 0x13
    2760:	82 8b       	std	Z+18, r24	; 0x12
    2762:	91 8f       	std	Z+25, r25	; 0x19
    2764:	80 8f       	std	Z+24, r24	; 0x18
    2766:	86 85       	ldd	r24, Z+14	; 0x0e
    2768:	97 85       	ldd	r25, Z+15	; 0x0f
    276a:	97 8b       	std	Z+23, r25	; 0x17
    276c:	86 8b       	std	Z+22, r24	; 0x16
    276e:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <_ZN8SdVolume10cacheFlushEv>
    2772:	88 23       	and	r24, r24
    2774:	39 f0       	breq	.+14     	; 0x2784 <_ZN6SdFile4openEPS_PKch+0x1a8>
    2776:	4c 2d       	mov	r20, r12
    2778:	f7 01       	movw	r30, r14
    277a:	62 89       	ldd	r22, Z+18	; 0x12
    277c:	c7 01       	movw	r24, r14
    277e:	0e 94 86 12 	call	0x250c	; 0x250c <_ZN6SdFile15openCachedEntryEhh>
    2782:	08 c0       	rjmp	.+16     	; 0x2794 <_ZN6SdFile4openEPS_PKch+0x1b8>
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	06 c0       	rjmp	.+12     	; 0x2794 <_ZN6SdFile4openEPS_PKch+0x1b8>
    2788:	dd 20       	and	r13, r13
    278a:	09 f4       	brne	.+2      	; 0x278e <_ZN6SdFile4openEPS_PKch+0x1b2>
    278c:	91 cf       	rjmp	.-222    	; 0x26b0 <_ZN6SdFile4openEPS_PKch+0xd4>
    278e:	dd 24       	eor	r13, r13
    2790:	d3 94       	inc	r13
    2792:	55 cf       	rjmp	.-342    	; 0x263e <_ZN6SdFile4openEPS_PKch+0x62>
    2794:	2b 96       	adiw	r28, 0x0b	; 11
    2796:	0f b6       	in	r0, 0x3f	; 63
    2798:	f8 94       	cli
    279a:	de bf       	out	0x3e, r29	; 62
    279c:	0f be       	out	0x3f, r0	; 63
    279e:	cd bf       	out	0x3d, r28	; 61
    27a0:	df 91       	pop	r29
    27a2:	cf 91       	pop	r28
    27a4:	1f 91       	pop	r17
    27a6:	0f 91       	pop	r16
    27a8:	ff 90       	pop	r15
    27aa:	ef 90       	pop	r14
    27ac:	df 90       	pop	r13
    27ae:	cf 90       	pop	r12
    27b0:	bf 90       	pop	r11
    27b2:	08 95       	ret

000027b4 <_ZN6SdFile6removeEv>:
    27b4:	cf 93       	push	r28
    27b6:	df 93       	push	r29
    27b8:	ec 01       	movw	r28, r24
    27ba:	40 e0       	ldi	r20, 0x00	; 0
    27bc:	50 e0       	ldi	r21, 0x00	; 0
    27be:	ba 01       	movw	r22, r20
    27c0:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <_ZN6SdFile8truncateEm>
    27c4:	88 23       	and	r24, r24
    27c6:	71 f0       	breq	.+28     	; 0x27e4 <_ZN6SdFile6removeEv+0x30>
    27c8:	61 e0       	ldi	r22, 0x01	; 1
    27ca:	ce 01       	movw	r24, r28
    27cc:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <_ZN6SdFile13cacheDirEntryEh>
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	41 f0       	breq	.+16     	; 0x27e4 <_ZN6SdFile6removeEv+0x30>
    27d4:	25 ee       	ldi	r18, 0xE5	; 229
    27d6:	fc 01       	movw	r30, r24
    27d8:	20 83       	st	Z, r18
    27da:	1d 82       	std	Y+5, r1	; 0x05
    27dc:	df 91       	pop	r29
    27de:	cf 91       	pop	r28
    27e0:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <_ZN8SdVolume10cacheFlushEv>
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	df 91       	pop	r29
    27e8:	cf 91       	pop	r28
    27ea:	08 95       	ret

000027ec <_ZN6SdFile6removeEPS_PKc>:
    27ec:	cf 93       	push	r28
    27ee:	df 93       	push	r29
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62
    27f4:	6d 97       	sbiw	r28, 0x1d	; 29
    27f6:	0f b6       	in	r0, 0x3f	; 63
    27f8:	f8 94       	cli
    27fa:	de bf       	out	0x3e, r29	; 62
    27fc:	0f be       	out	0x3f, r0	; 63
    27fe:	cd bf       	out	0x3d, r28	; 61
    2800:	ab 01       	movw	r20, r22
    2802:	1c 82       	std	Y+4, r1	; 0x04
    2804:	1b 82       	std	Y+3, r1	; 0x03
    2806:	2a e1       	ldi	r18, 0x1A	; 26
    2808:	32 e0       	ldi	r19, 0x02	; 2
    280a:	3a 83       	std	Y+2, r19	; 0x02
    280c:	29 83       	std	Y+1, r18	; 0x01
    280e:	1e 82       	std	Y+6, r1	; 0x06
    2810:	22 e0       	ldi	r18, 0x02	; 2
    2812:	bc 01       	movw	r22, r24
    2814:	ce 01       	movw	r24, r28
    2816:	01 96       	adiw	r24, 0x01	; 1
    2818:	0e 94 ee 12 	call	0x25dc	; 0x25dc <_ZN6SdFile4openEPS_PKch>
    281c:	88 23       	and	r24, r24
    281e:	21 f0       	breq	.+8      	; 0x2828 <_ZN6SdFile6removeEPS_PKc+0x3c>
    2820:	ce 01       	movw	r24, r28
    2822:	01 96       	adiw	r24, 0x01	; 1
    2824:	0e 94 da 13 	call	0x27b4	; 0x27b4 <_ZN6SdFile6removeEv>
    2828:	6d 96       	adiw	r28, 0x1d	; 29
    282a:	0f b6       	in	r0, 0x3f	; 63
    282c:	f8 94       	cli
    282e:	de bf       	out	0x3e, r29	; 62
    2830:	0f be       	out	0x3f, r0	; 63
    2832:	cd bf       	out	0x3d, r28	; 61
    2834:	df 91       	pop	r29
    2836:	cf 91       	pop	r28
    2838:	08 95       	ret

0000283a <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    283a:	2f 92       	push	r2
    283c:	3f 92       	push	r3
    283e:	4f 92       	push	r4
    2840:	5f 92       	push	r5
    2842:	6f 92       	push	r6
    2844:	7f 92       	push	r7
    2846:	8f 92       	push	r8
    2848:	9f 92       	push	r9
    284a:	af 92       	push	r10
    284c:	bf 92       	push	r11
    284e:	cf 92       	push	r12
    2850:	df 92       	push	r13
    2852:	ef 92       	push	r14
    2854:	ff 92       	push	r15
    2856:	0f 93       	push	r16
    2858:	1f 93       	push	r17
    285a:	cf 93       	push	r28
    285c:	df 93       	push	r29
    285e:	00 d0       	rcall	.+0      	; 0x2860 <_ZN6SdFile5writeEPKvj+0x26>
    2860:	00 d0       	rcall	.+0      	; 0x2862 <_ZN6SdFile5writeEPKvj+0x28>
    2862:	cd b7       	in	r28, 0x3d	; 61
    2864:	de b7       	in	r29, 0x3e	; 62
    2866:	8c 01       	movw	r16, r24
    2868:	6b 01       	movw	r12, r22
    286a:	1a 01       	movw	r2, r20

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    286c:	dc 01       	movw	r26, r24
    286e:	15 96       	adiw	r26, 0x05	; 5
    2870:	8c 91       	ld	r24, X
    2872:	15 97       	sbiw	r26, 0x05	; 5
    2874:	81 30       	cpi	r24, 0x01	; 1
    2876:	c9 f4       	brne	.+50     	; 0x28aa <_ZN6SdFile5writeEPKvj+0x70>
    2878:	14 96       	adiw	r26, 0x04	; 4
    287a:	8c 91       	ld	r24, X
    287c:	81 ff       	sbrs	r24, 1
    287e:	15 c0       	rjmp	.+42     	; 0x28aa <_ZN6SdFile5writeEPKvj+0x70>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    2880:	82 ff       	sbrs	r24, 2
    2882:	1d c0       	rjmp	.+58     	; 0x28be <_ZN6SdFile5writeEPKvj+0x84>
    2884:	f8 01       	movw	r30, r16
    2886:	43 89       	ldd	r20, Z+19	; 0x13
    2888:	54 89       	ldd	r21, Z+20	; 0x14
    288a:	65 89       	ldd	r22, Z+21	; 0x15
    288c:	76 89       	ldd	r23, Z+22	; 0x16
    288e:	82 85       	ldd	r24, Z+10	; 0x0a
    2890:	93 85       	ldd	r25, Z+11	; 0x0b
    2892:	a4 85       	ldd	r26, Z+12	; 0x0c
    2894:	b5 85       	ldd	r27, Z+13	; 0x0d
    2896:	84 17       	cp	r24, r20
    2898:	95 07       	cpc	r25, r21
    289a:	a6 07       	cpc	r26, r22
    289c:	b7 07       	cpc	r27, r23
    289e:	79 f0       	breq	.+30     	; 0x28be <_ZN6SdFile5writeEPKvj+0x84>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    28a0:	c8 01       	movw	r24, r16
    28a2:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
    28a6:	81 11       	cpse	r24, r1
    28a8:	0a c0       	rjmp	.+20     	; 0x28be <_ZN6SdFile5writeEPKvj+0x84>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	d8 01       	movw	r26, r16
    28b0:	13 96       	adiw	r26, 0x03	; 3
    28b2:	9c 93       	st	X, r25
    28b4:	8e 93       	st	-X, r24
    28b6:	12 97       	sbiw	r26, 0x02	; 2

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	48 c1       	rjmp	.+656    	; 0x2b4e <_ZN6SdFile5writeEPKvj+0x314>
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    28be:	41 01       	movw	r8, r2
    28c0:	83 c0       	rjmp	.+262    	; 0x29c8 <_ZN6SdFile5writeEPKvj+0x18e>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    28c2:	5b 96       	adiw	r26, 0x1b	; 27
    28c4:	8d 91       	ld	r24, X+
    28c6:	9c 91       	ld	r25, X
    28c8:	5c 97       	sbiw	r26, 0x1c	; 28
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    28ca:	fc 01       	movw	r30, r24
    28cc:	74 80       	ldd	r7, Z+4	; 0x04
    28ce:	2f ef       	ldi	r18, 0xFF	; 255
    28d0:	27 0d       	add	r18, r7
    28d2:	2a 01       	movw	r4, r20
    28d4:	3b 01       	movw	r6, r22
    28d6:	39 e0       	ldi	r19, 0x09	; 9
    28d8:	76 94       	lsr	r7
    28da:	67 94       	ror	r6
    28dc:	57 94       	ror	r5
    28de:	47 94       	ror	r4
    28e0:	3a 95       	dec	r19
    28e2:	d1 f7       	brne	.-12     	; 0x28d8 <_ZN6SdFile5writeEPKvj+0x9e>
    28e4:	72 2e       	mov	r7, r18
    28e6:	74 20       	and	r7, r4
    uint16_t blockOffset = curPosition_ & 0X1FF;
    28e8:	7a 01       	movw	r14, r20
    28ea:	f1 e0       	ldi	r31, 0x01	; 1
    28ec:	ff 22       	and	r15, r31
    if (blockOfCluster == 0 && blockOffset == 0) {
    28ee:	77 20       	and	r7, r7
    28f0:	09 f4       	brne	.+2      	; 0x28f4 <_ZN6SdFile5writeEPKvj+0xba>
    28f2:	76 c0       	rjmp	.+236    	; 0x29e0 <_ZN6SdFile5writeEPKvj+0x1a6>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	92 e0       	ldi	r25, 0x02	; 2
    28f8:	8e 19       	sub	r24, r14
    28fa:	9f 09       	sbc	r25, r15
    28fc:	54 01       	movw	r10, r8
    28fe:	88 15       	cp	r24, r8
    2900:	99 05       	cpc	r25, r9
    2902:	08 f4       	brcc	.+2      	; 0x2906 <_ZN6SdFile5writeEPKvj+0xcc>
    2904:	5c 01       	movw	r10, r24

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2906:	d8 01       	movw	r26, r16
    2908:	5b 96       	adiw	r26, 0x1b	; 27
    290a:	2d 91       	ld	r18, X+
    290c:	3c 91       	ld	r19, X
    290e:	5c 97       	sbiw	r26, 0x1c	; 28
    2910:	16 96       	adiw	r26, 0x06	; 6
    2912:	8d 91       	ld	r24, X+
    2914:	9d 91       	ld	r25, X+
    2916:	0d 90       	ld	r0, X+
    2918:	bc 91       	ld	r27, X
    291a:	a0 2d       	mov	r26, r0
    291c:	02 97       	sbiw	r24, 0x02	; 2
    291e:	a1 09       	sbc	r26, r1
    2920:	b1 09       	sbc	r27, r1
    2922:	f9 01       	movw	r30, r18
    2924:	05 84       	ldd	r0, Z+13	; 0x0d
    2926:	04 c0       	rjmp	.+8      	; 0x2930 <_ZN6SdFile5writeEPKvj+0xf6>
    2928:	88 0f       	add	r24, r24
    292a:	99 1f       	adc	r25, r25
    292c:	aa 1f       	adc	r26, r26
    292e:	bb 1f       	adc	r27, r27
    2930:	0a 94       	dec	r0
    2932:	d2 f7       	brpl	.-12     	; 0x2928 <_ZN6SdFile5writeEPKvj+0xee>
    2934:	46 85       	ldd	r20, Z+14	; 0x0e
    2936:	57 85       	ldd	r21, Z+15	; 0x0f
    2938:	60 89       	ldd	r22, Z+16	; 0x10
    293a:	71 89       	ldd	r23, Z+17	; 0x11
    293c:	84 0f       	add	r24, r20
    293e:	95 1f       	adc	r25, r21
    2940:	a6 1f       	adc	r26, r22
    2942:	b7 1f       	adc	r27, r23
    2944:	9c 01       	movw	r18, r24
    2946:	ad 01       	movw	r20, r26
    2948:	27 0d       	add	r18, r7
    294a:	31 1d       	adc	r19, r1
    294c:	41 1d       	adc	r20, r1
    294e:	51 1d       	adc	r21, r1
    2950:	29 01       	movw	r4, r18
    2952:	3a 01       	movw	r6, r20
    if (n == 512) {
    2954:	a1 14       	cp	r10, r1
    2956:	32 e0       	ldi	r19, 0x02	; 2
    2958:	b3 06       	cpc	r11, r19
    295a:	09 f0       	breq	.+2      	; 0x295e <_ZN6SdFile5writeEPKvj+0x124>
    295c:	88 c0       	rjmp	.+272    	; 0x2a6e <_ZN6SdFile5writeEPKvj+0x234>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    295e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <_ZN8SdVolume17cacheBlockNumber_E>
    2962:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2966:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    296a:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    296e:	48 16       	cp	r4, r24
    2970:	59 06       	cpc	r5, r25
    2972:	6a 06       	cpc	r6, r26
    2974:	7b 06       	cpc	r7, r27
    2976:	59 f4       	brne	.+22     	; 0x298e <_ZN6SdFile5writeEPKvj+0x154>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    2978:	8f ef       	ldi	r24, 0xFF	; 255
    297a:	9f ef       	ldi	r25, 0xFF	; 255
    297c:	dc 01       	movw	r26, r24
    297e:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <_ZN8SdVolume17cacheBlockNumber_E>
    2982:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2986:	a0 93 53 01 	sts	0x0153, r26	; 0x800153 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    298a:	b0 93 54 01 	sts	0x0154, r27	; 0x800154 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    298e:	96 01       	movw	r18, r12
    2990:	b3 01       	movw	r22, r6
    2992:	a2 01       	movw	r20, r4
    2994:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <_ZN8SdVolume7sdCard_E>
    2998:	90 91 45 05 	lds	r25, 0x0545	; 0x800545 <_ZN8SdVolume7sdCard_E+0x1>
    299c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    29a0:	88 23       	and	r24, r24
    29a2:	09 f4       	brne	.+2      	; 0x29a6 <_ZN6SdFile5writeEPKvj+0x16c>
    29a4:	82 cf       	rjmp	.-252    	; 0x28aa <_ZN6SdFile5writeEPKvj+0x70>
      src += 512;
    29a6:	9e ef       	ldi	r25, 0xFE	; 254
    29a8:	d9 1a       	sub	r13, r25
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    29aa:	8a 18       	sub	r8, r10
    29ac:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    29ae:	f8 01       	movw	r30, r16
    29b0:	82 85       	ldd	r24, Z+10	; 0x0a
    29b2:	93 85       	ldd	r25, Z+11	; 0x0b
    29b4:	a4 85       	ldd	r26, Z+12	; 0x0c
    29b6:	b5 85       	ldd	r27, Z+13	; 0x0d
    29b8:	8a 0d       	add	r24, r10
    29ba:	9b 1d       	adc	r25, r11
    29bc:	a1 1d       	adc	r26, r1
    29be:	b1 1d       	adc	r27, r1
    29c0:	82 87       	std	Z+10, r24	; 0x0a
    29c2:	93 87       	std	Z+11, r25	; 0x0b
    29c4:	a4 87       	std	Z+12, r26	; 0x0c
    29c6:	b5 87       	std	Z+13, r27	; 0x0d
    29c8:	d8 01       	movw	r26, r16
    29ca:	1a 96       	adiw	r26, 0x0a	; 10
    29cc:	4d 91       	ld	r20, X+
    29ce:	5d 91       	ld	r21, X+
    29d0:	6d 91       	ld	r22, X+
    29d2:	7c 91       	ld	r23, X
    29d4:	1d 97       	sbiw	r26, 0x0d	; 13
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    29d6:	81 14       	cp	r8, r1
    29d8:	91 04       	cpc	r9, r1
    29da:	09 f0       	breq	.+2      	; 0x29de <_ZN6SdFile5writeEPKvj+0x1a4>
    29dc:	72 cf       	rjmp	.-284    	; 0x28c2 <_ZN6SdFile5writeEPKvj+0x88>
    29de:	87 c0       	rjmp	.+270    	; 0x2aee <_ZN6SdFile5writeEPKvj+0x2b4>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    29e0:	e1 14       	cp	r14, r1
    29e2:	f1 04       	cpc	r15, r1
    29e4:	09 f0       	breq	.+2      	; 0x29e8 <_ZN6SdFile5writeEPKvj+0x1ae>
    29e6:	86 cf       	rjmp	.-244    	; 0x28f4 <_ZN6SdFile5writeEPKvj+0xba>
      // start of new cluster
      if (curCluster_ == 0) {
    29e8:	16 96       	adiw	r26, 0x06	; 6
    29ea:	4d 91       	ld	r20, X+
    29ec:	5d 91       	ld	r21, X+
    29ee:	6d 91       	ld	r22, X+
    29f0:	7c 91       	ld	r23, X
    29f2:	19 97       	sbiw	r26, 0x09	; 9
    29f4:	41 15       	cp	r20, r1
    29f6:	51 05       	cpc	r21, r1
    29f8:	61 05       	cpc	r22, r1
    29fa:	71 05       	cpc	r23, r1
    29fc:	59 f4       	brne	.+22     	; 0x2a14 <_ZN6SdFile5writeEPKvj+0x1da>
        if (firstCluster_ == 0) {
    29fe:	57 96       	adiw	r26, 0x17	; 23
    2a00:	8d 91       	ld	r24, X+
    2a02:	9d 91       	ld	r25, X+
    2a04:	0d 90       	ld	r0, X+
    2a06:	bc 91       	ld	r27, X
    2a08:	a0 2d       	mov	r26, r0
    2a0a:	00 97       	sbiw	r24, 0x00	; 0
    2a0c:	a1 05       	cpc	r26, r1
    2a0e:	b1 05       	cpc	r27, r1
    2a10:	41 f5       	brne	.+80     	; 0x2a62 <_ZN6SdFile5writeEPKvj+0x228>
    2a12:	21 c0       	rjmp	.+66     	; 0x2a56 <_ZN6SdFile5writeEPKvj+0x21c>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2a14:	9e 01       	movw	r18, r28
    2a16:	2f 5f       	subi	r18, 0xFF	; 255
    2a18:	3f 4f       	sbci	r19, 0xFF	; 255
    2a1a:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZNK8SdVolume6fatGetEmPm>
    2a1e:	88 23       	and	r24, r24
    2a20:	09 f4       	brne	.+2      	; 0x2a24 <_ZN6SdFile5writeEPKvj+0x1ea>
    2a22:	4b cf       	rjmp	.-362    	; 0x28ba <_ZN6SdFile5writeEPKvj+0x80>
        if (vol_->isEOC(next)) {
    2a24:	89 81       	ldd	r24, Y+1	; 0x01
    2a26:	9a 81       	ldd	r25, Y+2	; 0x02
    2a28:	ab 81       	ldd	r26, Y+3	; 0x03
    2a2a:	bc 81       	ldd	r27, Y+4	; 0x04
    2a2c:	f8 01       	movw	r30, r16
    2a2e:	23 8d       	ldd	r18, Z+27	; 0x1b
    2a30:	34 8d       	ldd	r19, Z+28	; 0x1c
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2a32:	f9 01       	movw	r30, r18
    2a34:	27 89       	ldd	r18, Z+23	; 0x17
    2a36:	20 31       	cpi	r18, 0x10	; 16
    2a38:	29 f0       	breq	.+10     	; 0x2a44 <_ZN6SdFile5writeEPKvj+0x20a>
    2a3a:	48 ef       	ldi	r20, 0xF8	; 248
    2a3c:	5f ef       	ldi	r21, 0xFF	; 255
    2a3e:	6f ef       	ldi	r22, 0xFF	; 255
    2a40:	7f e0       	ldi	r23, 0x0F	; 15
    2a42:	04 c0       	rjmp	.+8      	; 0x2a4c <_ZN6SdFile5writeEPKvj+0x212>
    2a44:	48 ef       	ldi	r20, 0xF8	; 248
    2a46:	5f ef       	ldi	r21, 0xFF	; 255
    2a48:	60 e0       	ldi	r22, 0x00	; 0
    2a4a:	70 e0       	ldi	r23, 0x00	; 0
    2a4c:	84 17       	cp	r24, r20
    2a4e:	95 07       	cpc	r25, r21
    2a50:	a6 07       	cpc	r26, r22
    2a52:	b7 07       	cpc	r27, r23
    2a54:	30 f0       	brcs	.+12     	; 0x2a62 <_ZN6SdFile5writeEPKvj+0x228>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    2a56:	c8 01       	movw	r24, r16
    2a58:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <_ZN6SdFile10addClusterEv>
    2a5c:	81 11       	cpse	r24, r1
    2a5e:	4a cf       	rjmp	.-364    	; 0x28f4 <_ZN6SdFile5writeEPKvj+0xba>
    2a60:	24 cf       	rjmp	.-440    	; 0x28aa <_ZN6SdFile5writeEPKvj+0x70>
        } else {
          curCluster_ = next;
    2a62:	f8 01       	movw	r30, r16
    2a64:	86 83       	std	Z+6, r24	; 0x06
    2a66:	97 83       	std	Z+7, r25	; 0x07
    2a68:	a0 87       	std	Z+8, r26	; 0x08
    2a6a:	b1 87       	std	Z+9, r27	; 0x09
    2a6c:	43 cf       	rjmp	.-378    	; 0x28f4 <_ZN6SdFile5writeEPKvj+0xba>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    2a6e:	e1 14       	cp	r14, r1
    2a70:	f1 04       	cpc	r15, r1
    2a72:	29 f5       	brne	.+74     	; 0x2abe <_ZN6SdFile5writeEPKvj+0x284>
    2a74:	d8 01       	movw	r26, r16
    2a76:	1a 96       	adiw	r26, 0x0a	; 10
    2a78:	4d 91       	ld	r20, X+
    2a7a:	5d 91       	ld	r21, X+
    2a7c:	6d 91       	ld	r22, X+
    2a7e:	7c 91       	ld	r23, X
    2a80:	1d 97       	sbiw	r26, 0x0d	; 13
    2a82:	53 96       	adiw	r26, 0x13	; 19
    2a84:	8d 91       	ld	r24, X+
    2a86:	9d 91       	ld	r25, X+
    2a88:	0d 90       	ld	r0, X+
    2a8a:	bc 91       	ld	r27, X
    2a8c:	a0 2d       	mov	r26, r0
    2a8e:	48 17       	cp	r20, r24
    2a90:	59 07       	cpc	r21, r25
    2a92:	6a 07       	cpc	r22, r26
    2a94:	7b 07       	cpc	r23, r27
    2a96:	98 f0       	brcs	.+38     	; 0x2abe <_ZN6SdFile5writeEPKvj+0x284>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    2a98:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <_ZN8SdVolume10cacheFlushEv>
    2a9c:	88 23       	and	r24, r24
    2a9e:	09 f4       	brne	.+2      	; 0x2aa2 <_ZN6SdFile5writeEPKvj+0x268>
    2aa0:	04 cf       	rjmp	.-504    	; 0x28aa <_ZN6SdFile5writeEPKvj+0x70>
        SdVolume::cacheBlockNumber_ = block;
    2aa2:	40 92 51 01 	sts	0x0151, r4	; 0x800151 <_ZN8SdVolume17cacheBlockNumber_E>
    2aa6:	50 92 52 01 	sts	0x0152, r5	; 0x800152 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2aaa:	60 92 53 01 	sts	0x0153, r6	; 0x800153 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2aae:	70 92 54 01 	sts	0x0154, r7	; 0x800154 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2ab2:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <_ZN8SdVolume11cacheDirty_E>
    2ab6:	81 60       	ori	r24, 0x01	; 1
    2ab8:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <_ZN8SdVolume11cacheDirty_E>
    2abc:	08 c0       	rjmp	.+16     	; 0x2ace <_ZN6SdFile5writeEPKvj+0x294>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    2abe:	41 e0       	ldi	r20, 0x01	; 1
    2ac0:	c3 01       	movw	r24, r6
    2ac2:	b2 01       	movw	r22, r4
    2ac4:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <_ZN8SdVolume13cacheRawBlockEmh>
    2ac8:	88 23       	and	r24, r24
    2aca:	09 f4       	brne	.+2      	; 0x2ace <_ZN6SdFile5writeEPKvj+0x294>
    2acc:	ee ce       	rjmp	.-548    	; 0x28aa <_ZN6SdFile5writeEPKvj+0x70>
    2ace:	d6 01       	movw	r26, r12
    2ad0:	f7 01       	movw	r30, r14
    2ad2:	ea 5b       	subi	r30, 0xBA	; 186
    2ad4:	fa 4f       	sbci	r31, 0xFA	; 250
    2ad6:	9f 01       	movw	r18, r30
    2ad8:	2a 0d       	add	r18, r10
    2ada:	3b 1d       	adc	r19, r11
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    2adc:	2e 17       	cp	r18, r30
    2ade:	3f 07       	cpc	r19, r31
    2ae0:	19 f0       	breq	.+6      	; 0x2ae8 <_ZN6SdFile5writeEPKvj+0x2ae>
    2ae2:	8d 91       	ld	r24, X+
    2ae4:	81 93       	st	Z+, r24
    2ae6:	fa cf       	rjmp	.-12     	; 0x2adc <_ZN6SdFile5writeEPKvj+0x2a2>
    2ae8:	ca 0c       	add	r12, r10
    2aea:	db 1c       	adc	r13, r11
    2aec:	5e cf       	rjmp	.-324    	; 0x29aa <_ZN6SdFile5writeEPKvj+0x170>
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    2aee:	d8 01       	movw	r26, r16
    2af0:	53 96       	adiw	r26, 0x13	; 19
    2af2:	cd 90       	ld	r12, X+
    2af4:	dd 90       	ld	r13, X+
    2af6:	ed 90       	ld	r14, X+
    2af8:	fc 90       	ld	r15, X
    2afa:	56 97       	sbiw	r26, 0x16	; 22
    2afc:	14 96       	adiw	r26, 0x04	; 4
    2afe:	8c 91       	ld	r24, X
    2b00:	c4 16       	cp	r12, r20
    2b02:	d5 06       	cpc	r13, r21
    2b04:	e6 06       	cpc	r14, r22
    2b06:	f7 06       	cpc	r15, r23
    2b08:	40 f4       	brcc	.+16     	; 0x2b1a <_ZN6SdFile5writeEPKvj+0x2e0>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    2b0a:	f8 01       	movw	r30, r16
    2b0c:	43 8b       	std	Z+19, r20	; 0x13
    2b0e:	54 8b       	std	Z+20, r21	; 0x14
    2b10:	65 8b       	std	Z+21, r22	; 0x15
    2b12:	76 8b       	std	Z+22, r23	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    2b14:	80 68       	ori	r24, 0x80	; 128
    2b16:	84 83       	std	Z+4, r24	; 0x04
    2b18:	0d c0       	rjmp	.+26     	; 0x2b34 <_ZN6SdFile5writeEPKvj+0x2fa>
  } else if (dateTime_ && nbyte) {
    2b1a:	20 91 3d 05 	lds	r18, 0x053D	; 0x80053d <_ZN6SdFile9dateTime_E>
    2b1e:	30 91 3e 05 	lds	r19, 0x053E	; 0x80053e <_ZN6SdFile9dateTime_E+0x1>
    2b22:	23 2b       	or	r18, r19
    2b24:	39 f0       	breq	.+14     	; 0x2b34 <_ZN6SdFile5writeEPKvj+0x2fa>
    2b26:	21 14       	cp	r2, r1
    2b28:	31 04       	cpc	r3, r1
    2b2a:	21 f0       	breq	.+8      	; 0x2b34 <_ZN6SdFile5writeEPKvj+0x2fa>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    2b2c:	80 68       	ori	r24, 0x80	; 128
    2b2e:	d8 01       	movw	r26, r16
    2b30:	14 96       	adiw	r26, 0x04	; 4
    2b32:	8c 93       	st	X, r24
  }

  if (flags_ & O_SYNC) {
    2b34:	f8 01       	movw	r30, r16
    2b36:	84 81       	ldd	r24, Z+4	; 0x04
    2b38:	83 fd       	sbrc	r24, 3
    2b3a:	02 c0       	rjmp	.+4      	; 0x2b40 <_ZN6SdFile5writeEPKvj+0x306>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2b3c:	c1 01       	movw	r24, r2
    2b3e:	07 c0       	rjmp	.+14     	; 0x2b4e <_ZN6SdFile5writeEPKvj+0x314>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    2b40:	c8 01       	movw	r24, r16
    2b42:	0e 94 7f 11 	call	0x22fe	; 0x22fe <_ZN6SdFile4syncEv>
    2b46:	88 23       	and	r24, r24
    2b48:	09 f4       	brne	.+2      	; 0x2b4c <_ZN6SdFile5writeEPKvj+0x312>
    2b4a:	af ce       	rjmp	.-674    	; 0x28aa <_ZN6SdFile5writeEPKvj+0x70>
    2b4c:	f7 cf       	rjmp	.-18     	; 0x2b3c <_ZN6SdFile5writeEPKvj+0x302>
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    2b4e:	0f 90       	pop	r0
    2b50:	0f 90       	pop	r0
    2b52:	0f 90       	pop	r0
    2b54:	0f 90       	pop	r0
    2b56:	df 91       	pop	r29
    2b58:	cf 91       	pop	r28
    2b5a:	1f 91       	pop	r17
    2b5c:	0f 91       	pop	r16
    2b5e:	ff 90       	pop	r15
    2b60:	ef 90       	pop	r14
    2b62:	df 90       	pop	r13
    2b64:	cf 90       	pop	r12
    2b66:	bf 90       	pop	r11
    2b68:	af 90       	pop	r10
    2b6a:	9f 90       	pop	r9
    2b6c:	8f 90       	pop	r8
    2b6e:	7f 90       	pop	r7
    2b70:	6f 90       	pop	r6
    2b72:	5f 90       	pop	r5
    2b74:	4f 90       	pop	r4
    2b76:	3f 90       	pop	r3
    2b78:	2f 90       	pop	r2
    2b7a:	08 95       	ret

00002b7c <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    2b7c:	cf 93       	push	r28
    2b7e:	df 93       	push	r29
    2b80:	1f 92       	push	r1
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
    2b86:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    2b88:	41 e0       	ldi	r20, 0x01	; 1
    2b8a:	50 e0       	ldi	r21, 0x00	; 0
    2b8c:	be 01       	movw	r22, r28
    2b8e:	6f 5f       	subi	r22, 0xFF	; 255
    2b90:	7f 4f       	sbci	r23, 0xFF	; 255
    2b92:	0e 94 1d 14 	call	0x283a	; 0x283a <_ZN6SdFile5writeEPKvj>
}
    2b96:	0f 90       	pop	r0
    2b98:	df 91       	pop	r29
    2b9a:	cf 91       	pop	r28
    2b9c:	08 95       	ret

00002b9e <_ZN8SdVolume10cacheFlushEv>:

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    2b9e:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <_ZN8SdVolume11cacheDirty_E>
    2ba2:	88 23       	and	r24, r24
    2ba4:	a9 f1       	breq	.+106    	; 0x2c10 <_ZN8SdVolume10cacheFlushEv+0x72>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    2ba6:	40 91 51 01 	lds	r20, 0x0151	; 0x800151 <_ZN8SdVolume17cacheBlockNumber_E>
    2baa:	50 91 52 01 	lds	r21, 0x0152	; 0x800152 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2bae:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2bb2:	70 91 54 01 	lds	r23, 0x0154	; 0x800154 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2bb6:	26 e4       	ldi	r18, 0x46	; 70
    2bb8:	35 e0       	ldi	r19, 0x05	; 5
    2bba:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <_ZN8SdVolume7sdCard_E>
    2bbe:	90 91 45 05 	lds	r25, 0x0545	; 0x800545 <_ZN8SdVolume7sdCard_E+0x1>
    2bc2:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN7Sd2Card10writeBlockEmPKh>
    2bc6:	81 11       	cpse	r24, r1
    2bc8:	02 c0       	rjmp	.+4      	; 0x2bce <_ZN8SdVolume10cacheFlushEv+0x30>
      return false;
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	08 95       	ret
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    2bce:	40 91 3f 05 	lds	r20, 0x053F	; 0x80053f <_ZN8SdVolume17cacheMirrorBlock_E>
    2bd2:	50 91 40 05 	lds	r21, 0x0540	; 0x800540 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2bd6:	60 91 41 05 	lds	r22, 0x0541	; 0x800541 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2bda:	70 91 42 05 	lds	r23, 0x0542	; 0x800542 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    2bde:	41 15       	cp	r20, r1
    2be0:	51 05       	cpc	r21, r1
    2be2:	61 05       	cpc	r22, r1
    2be4:	71 05       	cpc	r23, r1
    2be6:	91 f0       	breq	.+36     	; 0x2c0c <_ZN8SdVolume10cacheFlushEv+0x6e>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    2be8:	26 e4       	ldi	r18, 0x46	; 70
    2bea:	35 e0       	ldi	r19, 0x05	; 5
    2bec:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <_ZN8SdVolume7sdCard_E>
    2bf0:	90 91 45 05 	lds	r25, 0x0545	; 0x800545 <_ZN8SdVolume7sdCard_E+0x1>
    2bf4:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <_ZN7Sd2Card10writeBlockEmPKh>
    2bf8:	88 23       	and	r24, r24
    2bfa:	39 f3       	breq	.-50     	; 0x2bca <_ZN8SdVolume10cacheFlushEv+0x2c>
        return false;
      }
      cacheMirrorBlock_ = 0;
    2bfc:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <_ZN8SdVolume17cacheMirrorBlock_E>
    2c00:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2c04:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2c08:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    }
    cacheDirty_ = 0;
    2c0c:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <_ZN8SdVolume11cacheDirty_E>
  }
  return true;
    2c10:	81 e0       	ldi	r24, 0x01	; 1
}
    2c12:	08 95       	ret

00002c14 <_ZN8SdVolume13cacheRawBlockEmh>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    2c14:	cf 92       	push	r12
    2c16:	df 92       	push	r13
    2c18:	ef 92       	push	r14
    2c1a:	ff 92       	push	r15
    2c1c:	cf 93       	push	r28
    2c1e:	6b 01       	movw	r12, r22
    2c20:	7c 01       	movw	r14, r24
    2c22:	c4 2f       	mov	r28, r20
  if (cacheBlockNumber_ != blockNumber) {
    2c24:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <_ZN8SdVolume17cacheBlockNumber_E>
    2c28:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2c2c:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2c30:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2c34:	8c 15       	cp	r24, r12
    2c36:	9d 05       	cpc	r25, r13
    2c38:	ae 05       	cpc	r26, r14
    2c3a:	bf 05       	cpc	r27, r15
    2c3c:	d1 f0       	breq	.+52     	; 0x2c72 <_ZN8SdVolume13cacheRawBlockEmh+0x5e>
    if (!cacheFlush()) return false;
    2c3e:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <_ZN8SdVolume10cacheFlushEv>
    2c42:	81 11       	cpse	r24, r1
    2c44:	02 c0       	rjmp	.+4      	; 0x2c4a <_ZN8SdVolume13cacheRawBlockEmh+0x36>
    2c46:	80 e0       	ldi	r24, 0x00	; 0
    2c48:	1a c0       	rjmp	.+52     	; 0x2c7e <_ZN8SdVolume13cacheRawBlockEmh+0x6a>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    2c4a:	26 e4       	ldi	r18, 0x46	; 70
    2c4c:	35 e0       	ldi	r19, 0x05	; 5
    2c4e:	b7 01       	movw	r22, r14
    2c50:	a6 01       	movw	r20, r12
    2c52:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <_ZN8SdVolume7sdCard_E>
    2c56:	90 91 45 05 	lds	r25, 0x0545	; 0x800545 <_ZN8SdVolume7sdCard_E+0x1>
    2c5a:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <_ZN7Sd2Card9readBlockEmPh>
    2c5e:	88 23       	and	r24, r24
    2c60:	91 f3       	breq	.-28     	; 0x2c46 <_ZN8SdVolume13cacheRawBlockEmh+0x32>
    cacheBlockNumber_ = blockNumber;
    2c62:	c0 92 51 01 	sts	0x0151, r12	; 0x800151 <_ZN8SdVolume17cacheBlockNumber_E>
    2c66:	d0 92 52 01 	sts	0x0152, r13	; 0x800152 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2c6a:	e0 92 53 01 	sts	0x0153, r14	; 0x800153 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2c6e:	f0 92 54 01 	sts	0x0154, r15	; 0x800154 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  }
  cacheDirty_ |= action;
    2c72:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <_ZN8SdVolume11cacheDirty_E>
    2c76:	c8 2b       	or	r28, r24
    2c78:	c0 93 43 05 	sts	0x0543, r28	; 0x800543 <_ZN8SdVolume11cacheDirty_E>
  return true;
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
}
    2c7e:	cf 91       	pop	r28
    2c80:	ff 90       	pop	r15
    2c82:	ef 90       	pop	r14
    2c84:	df 90       	pop	r13
    2c86:	cf 90       	pop	r12
    2c88:	08 95       	ret

00002c8a <_ZN8SdVolume14cacheZeroBlockEm>:
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    2c8a:	cf 92       	push	r12
    2c8c:	df 92       	push	r13
    2c8e:	ef 92       	push	r14
    2c90:	ff 92       	push	r15
    2c92:	6b 01       	movw	r12, r22
    2c94:	7c 01       	movw	r14, r24
  if (!cacheFlush()) return false;
    2c96:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <_ZN8SdVolume10cacheFlushEv>
    2c9a:	88 23       	and	r24, r24
    2c9c:	a9 f0       	breq	.+42     	; 0x2cc8 <_ZN8SdVolume14cacheZeroBlockEm+0x3e>
    2c9e:	e6 e4       	ldi	r30, 0x46	; 70
    2ca0:	f5 e0       	ldi	r31, 0x05	; 5

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
    2ca2:	11 92       	st	Z+, r1
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    2ca4:	87 e0       	ldi	r24, 0x07	; 7
    2ca6:	e6 34       	cpi	r30, 0x46	; 70
    2ca8:	f8 07       	cpc	r31, r24
    2caa:	d9 f7       	brne	.-10     	; 0x2ca2 <_ZN8SdVolume14cacheZeroBlockEm+0x18>
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    2cac:	c0 92 51 01 	sts	0x0151, r12	; 0x800151 <_ZN8SdVolume17cacheBlockNumber_E>
    2cb0:	d0 92 52 01 	sts	0x0152, r13	; 0x800152 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2cb4:	e0 92 53 01 	sts	0x0153, r14	; 0x800153 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2cb8:	f0 92 54 01 	sts	0x0154, r15	; 0x800154 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2cbc:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <_ZN8SdVolume11cacheDirty_E>
    2cc0:	81 60       	ori	r24, 0x01	; 1
    2cc2:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <_ZN8SdVolume11cacheDirty_E>
  cacheSetDirty();
  return true;
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
}
    2cc8:	ff 90       	pop	r15
    2cca:	ef 90       	pop	r14
    2ccc:	df 90       	pop	r13
    2cce:	cf 90       	pop	r12
    2cd0:	08 95       	ret

00002cd2 <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    2cd2:	8f 92       	push	r8
    2cd4:	9f 92       	push	r9
    2cd6:	af 92       	push	r10
    2cd8:	bf 92       	push	r11
    2cda:	cf 92       	push	r12
    2cdc:	df 92       	push	r13
    2cde:	ef 92       	push	r14
    2ce0:	ff 92       	push	r15
    2ce2:	0f 93       	push	r16
    2ce4:	1f 93       	push	r17
    2ce6:	cf 93       	push	r28
    2ce8:	df 93       	push	r29
    2cea:	fc 01       	movw	r30, r24
  if (cluster > (clusterCount_ + 1)) return false;
    2cec:	81 85       	ldd	r24, Z+9	; 0x09
    2cee:	92 85       	ldd	r25, Z+10	; 0x0a
    2cf0:	a3 85       	ldd	r26, Z+11	; 0x0b
    2cf2:	b4 85       	ldd	r27, Z+12	; 0x0c
    2cf4:	01 96       	adiw	r24, 0x01	; 1
    2cf6:	a1 1d       	adc	r26, r1
    2cf8:	b1 1d       	adc	r27, r1
    2cfa:	84 17       	cp	r24, r20
    2cfc:	95 07       	cpc	r25, r21
    2cfe:	a6 07       	cpc	r26, r22
    2d00:	b7 07       	cpc	r27, r23
    2d02:	10 f4       	brcc	.+4      	; 0x2d08 <_ZNK8SdVolume6fatGetEmPm+0x36>
    2d04:	80 e0       	ldi	r24, 0x00	; 0
    2d06:	5b c0       	rjmp	.+182    	; 0x2dbe <_ZNK8SdVolume6fatGetEmPm+0xec>
  uint32_t lba = fatStartBlock_;
    2d08:	83 88       	ldd	r8, Z+19	; 0x13
    2d0a:	94 88       	ldd	r9, Z+20	; 0x14
    2d0c:	a5 88       	ldd	r10, Z+21	; 0x15
    2d0e:	b6 88       	ldd	r11, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2d10:	87 89       	ldd	r24, Z+23	; 0x17
    2d12:	80 31       	cpi	r24, 0x10	; 16
    2d14:	29 f4       	brne	.+10     	; 0x2d20 <_ZNK8SdVolume6fatGetEmPm+0x4e>
    2d16:	bb 27       	eor	r27, r27
    2d18:	a7 2f       	mov	r26, r23
    2d1a:	96 2f       	mov	r25, r22
    2d1c:	85 2f       	mov	r24, r21
    2d1e:	09 c0       	rjmp	.+18     	; 0x2d32 <_ZNK8SdVolume6fatGetEmPm+0x60>
    2d20:	db 01       	movw	r26, r22
    2d22:	ca 01       	movw	r24, r20
    2d24:	c7 e0       	ldi	r28, 0x07	; 7
    2d26:	b6 95       	lsr	r27
    2d28:	a7 95       	ror	r26
    2d2a:	97 95       	ror	r25
    2d2c:	87 95       	ror	r24
    2d2e:	ca 95       	dec	r28
    2d30:	d1 f7       	brne	.-12     	; 0x2d26 <_ZNK8SdVolume6fatGetEmPm+0x54>
    2d32:	e9 01       	movw	r28, r18
    2d34:	6a 01       	movw	r12, r20
    2d36:	7b 01       	movw	r14, r22
    2d38:	8f 01       	movw	r16, r30
    2d3a:	bc 01       	movw	r22, r24
    2d3c:	cd 01       	movw	r24, r26
    2d3e:	68 0d       	add	r22, r8
    2d40:	79 1d       	adc	r23, r9
    2d42:	8a 1d       	adc	r24, r10
    2d44:	9b 1d       	adc	r25, r11
  if (lba != cacheBlockNumber_) {
    2d46:	80 90 51 01 	lds	r8, 0x0151	; 0x800151 <_ZN8SdVolume17cacheBlockNumber_E>
    2d4a:	90 90 52 01 	lds	r9, 0x0152	; 0x800152 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2d4e:	a0 90 53 01 	lds	r10, 0x0153	; 0x800153 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2d52:	b0 90 54 01 	lds	r11, 0x0154	; 0x800154 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2d56:	68 15       	cp	r22, r8
    2d58:	79 05       	cpc	r23, r9
    2d5a:	8a 05       	cpc	r24, r10
    2d5c:	9b 05       	cpc	r25, r11
    2d5e:	91 f4       	brne	.+36     	; 0x2d84 <_ZNK8SdVolume6fatGetEmPm+0xb2>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    2d60:	f8 01       	movw	r30, r16
    2d62:	87 89       	ldd	r24, Z+23	; 0x17
    2d64:	80 31       	cpi	r24, 0x10	; 16
    2d66:	a1 f4       	brne	.+40     	; 0x2d90 <_ZNK8SdVolume6fatGetEmPm+0xbe>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    2d68:	dd 24       	eor	r13, r13
    2d6a:	ee 24       	eor	r14, r14
    2d6c:	ff 24       	eor	r15, r15
    2d6e:	c6 01       	movw	r24, r12
    2d70:	88 0f       	add	r24, r24
    2d72:	99 1f       	adc	r25, r25
    2d74:	fc 01       	movw	r30, r24
    2d76:	ea 5b       	subi	r30, 0xBA	; 186
    2d78:	fa 4f       	sbci	r31, 0xFA	; 250
    2d7a:	80 81       	ld	r24, Z
    2d7c:	91 81       	ldd	r25, Z+1	; 0x01
    2d7e:	a0 e0       	ldi	r26, 0x00	; 0
    2d80:	b0 e0       	ldi	r27, 0x00	; 0
    2d82:	18 c0       	rjmp	.+48     	; 0x2db4 <_ZNK8SdVolume6fatGetEmPm+0xe2>
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2d84:	40 e0       	ldi	r20, 0x00	; 0
    2d86:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <_ZN8SdVolume13cacheRawBlockEmh>
    2d8a:	81 11       	cpse	r24, r1
    2d8c:	e9 cf       	rjmp	.-46     	; 0x2d60 <_ZNK8SdVolume6fatGetEmPm+0x8e>
    2d8e:	ba cf       	rjmp	.-140    	; 0x2d04 <_ZNK8SdVolume6fatGetEmPm+0x32>
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    2d90:	e8 94       	clt
    2d92:	c7 f8       	bld	r12, 7
    2d94:	dd 24       	eor	r13, r13
    2d96:	ee 24       	eor	r14, r14
    2d98:	ff 24       	eor	r15, r15
    2d9a:	c6 01       	movw	r24, r12
    2d9c:	88 0f       	add	r24, r24
    2d9e:	99 1f       	adc	r25, r25
    2da0:	88 0f       	add	r24, r24
    2da2:	99 1f       	adc	r25, r25
    2da4:	fc 01       	movw	r30, r24
    2da6:	ea 5b       	subi	r30, 0xBA	; 186
    2da8:	fa 4f       	sbci	r31, 0xFA	; 250
    2daa:	80 81       	ld	r24, Z
    2dac:	91 81       	ldd	r25, Z+1	; 0x01
    2dae:	a2 81       	ldd	r26, Z+2	; 0x02
    2db0:	b3 81       	ldd	r27, Z+3	; 0x03
    2db2:	bf 70       	andi	r27, 0x0F	; 15
    2db4:	88 83       	st	Y, r24
    2db6:	99 83       	std	Y+1, r25	; 0x01
    2db8:	aa 83       	std	Y+2, r26	; 0x02
    2dba:	bb 83       	std	Y+3, r27	; 0x03
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
  }
  return true;
}
    2dbe:	df 91       	pop	r29
    2dc0:	cf 91       	pop	r28
    2dc2:	1f 91       	pop	r17
    2dc4:	0f 91       	pop	r16
    2dc6:	ff 90       	pop	r15
    2dc8:	ef 90       	pop	r14
    2dca:	df 90       	pop	r13
    2dcc:	cf 90       	pop	r12
    2dce:	bf 90       	pop	r11
    2dd0:	af 90       	pop	r10
    2dd2:	9f 90       	pop	r9
    2dd4:	8f 90       	pop	r8
    2dd6:	08 95       	ret

00002dd8 <_ZNK8SdVolume9chainSizeEmPm>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    2dd8:	4f 92       	push	r4
    2dda:	5f 92       	push	r5
    2ddc:	6f 92       	push	r6
    2dde:	7f 92       	push	r7
    2de0:	af 92       	push	r10
    2de2:	bf 92       	push	r11
    2de4:	cf 92       	push	r12
    2de6:	df 92       	push	r13
    2de8:	ef 92       	push	r14
    2dea:	ff 92       	push	r15
    2dec:	0f 93       	push	r16
    2dee:	1f 93       	push	r17
    2df0:	cf 93       	push	r28
    2df2:	df 93       	push	r29
    2df4:	00 d0       	rcall	.+0      	; 0x2df6 <_ZNK8SdVolume9chainSizeEmPm+0x1e>
    2df6:	00 d0       	rcall	.+0      	; 0x2df8 <_ZNK8SdVolume9chainSizeEmPm+0x20>
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
    2dfc:	8c 01       	movw	r16, r24
    2dfe:	49 83       	std	Y+1, r20	; 0x01
    2e00:	5a 83       	std	Y+2, r21	; 0x02
    2e02:	6b 83       	std	Y+3, r22	; 0x03
    2e04:	7c 83       	std	Y+4, r23	; 0x04
    2e06:	59 01       	movw	r10, r18
  uint32_t s = 0;
    2e08:	c1 2c       	mov	r12, r1
    2e0a:	d1 2c       	mov	r13, r1
    2e0c:	76 01       	movw	r14, r12
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    2e0e:	41 2c       	mov	r4, r1
    2e10:	82 e0       	ldi	r24, 0x02	; 2
    2e12:	58 2e       	mov	r5, r24
    2e14:	61 2c       	mov	r6, r1
    2e16:	71 2c       	mov	r7, r1
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    2e18:	49 81       	ldd	r20, Y+1	; 0x01
    2e1a:	5a 81       	ldd	r21, Y+2	; 0x02
    2e1c:	6b 81       	ldd	r22, Y+3	; 0x03
    2e1e:	7c 81       	ldd	r23, Y+4	; 0x04
    2e20:	9e 01       	movw	r18, r28
    2e22:	2f 5f       	subi	r18, 0xFF	; 255
    2e24:	3f 4f       	sbci	r19, 0xFF	; 255
    2e26:	c8 01       	movw	r24, r16
    2e28:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZNK8SdVolume6fatGetEmPm>
    2e2c:	88 23       	and	r24, r24
    2e2e:	51 f1       	breq	.+84     	; 0x2e84 <_ZNK8SdVolume9chainSizeEmPm+0xac>
    s += 512UL << clusterSizeShift_;
    2e30:	d3 01       	movw	r26, r6
    2e32:	c2 01       	movw	r24, r4
    2e34:	f8 01       	movw	r30, r16
    2e36:	05 84       	ldd	r0, Z+13	; 0x0d
    2e38:	04 c0       	rjmp	.+8      	; 0x2e42 <_ZNK8SdVolume9chainSizeEmPm+0x6a>
    2e3a:	88 0f       	add	r24, r24
    2e3c:	99 1f       	adc	r25, r25
    2e3e:	aa 1f       	adc	r26, r26
    2e40:	bb 1f       	adc	r27, r27
    2e42:	0a 94       	dec	r0
    2e44:	d2 f7       	brpl	.-12     	; 0x2e3a <_ZNK8SdVolume9chainSizeEmPm+0x62>
    2e46:	c8 0e       	add	r12, r24
    2e48:	d9 1e       	adc	r13, r25
    2e4a:	ea 1e       	adc	r14, r26
    2e4c:	fb 1e       	adc	r15, r27
  } while (!isEOC(cluster));
    2e4e:	49 81       	ldd	r20, Y+1	; 0x01
    2e50:	5a 81       	ldd	r21, Y+2	; 0x02
    2e52:	6b 81       	ldd	r22, Y+3	; 0x03
    2e54:	7c 81       	ldd	r23, Y+4	; 0x04
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2e56:	87 89       	ldd	r24, Z+23	; 0x17
    2e58:	80 31       	cpi	r24, 0x10	; 16
    2e5a:	29 f0       	breq	.+10     	; 0x2e66 <_ZNK8SdVolume9chainSizeEmPm+0x8e>
    2e5c:	88 ef       	ldi	r24, 0xF8	; 248
    2e5e:	9f ef       	ldi	r25, 0xFF	; 255
    2e60:	af ef       	ldi	r26, 0xFF	; 255
    2e62:	bf e0       	ldi	r27, 0x0F	; 15
    2e64:	04 c0       	rjmp	.+8      	; 0x2e6e <_ZNK8SdVolume9chainSizeEmPm+0x96>
    2e66:	88 ef       	ldi	r24, 0xF8	; 248
    2e68:	9f ef       	ldi	r25, 0xFF	; 255
    2e6a:	a0 e0       	ldi	r26, 0x00	; 0
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    2e6e:	48 17       	cp	r20, r24
    2e70:	59 07       	cpc	r21, r25
    2e72:	6a 07       	cpc	r22, r26
    2e74:	7b 07       	cpc	r23, r27
    2e76:	80 f2       	brcs	.-96     	; 0x2e18 <_ZNK8SdVolume9chainSizeEmPm+0x40>
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    2e78:	f5 01       	movw	r30, r10
    2e7a:	c0 82       	st	Z, r12
    2e7c:	d1 82       	std	Z+1, r13	; 0x01
    2e7e:	e2 82       	std	Z+2, r14	; 0x02
    2e80:	f3 82       	std	Z+3, r15	; 0x03
  return true;
    2e82:	81 e0       	ldi	r24, 0x01	; 1
}
    2e84:	0f 90       	pop	r0
    2e86:	0f 90       	pop	r0
    2e88:	0f 90       	pop	r0
    2e8a:	0f 90       	pop	r0
    2e8c:	df 91       	pop	r29
    2e8e:	cf 91       	pop	r28
    2e90:	1f 91       	pop	r17
    2e92:	0f 91       	pop	r16
    2e94:	ff 90       	pop	r15
    2e96:	ef 90       	pop	r14
    2e98:	df 90       	pop	r13
    2e9a:	cf 90       	pop	r12
    2e9c:	bf 90       	pop	r11
    2e9e:	af 90       	pop	r10
    2ea0:	7f 90       	pop	r7
    2ea2:	6f 90       	pop	r6
    2ea4:	5f 90       	pop	r5
    2ea6:	4f 90       	pop	r4
    2ea8:	08 95       	ret

00002eaa <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    2eaa:	4f 92       	push	r4
    2eac:	5f 92       	push	r5
    2eae:	6f 92       	push	r6
    2eb0:	7f 92       	push	r7
    2eb2:	8f 92       	push	r8
    2eb4:	9f 92       	push	r9
    2eb6:	af 92       	push	r10
    2eb8:	bf 92       	push	r11
    2eba:	cf 92       	push	r12
    2ebc:	df 92       	push	r13
    2ebe:	ef 92       	push	r14
    2ec0:	ff 92       	push	r15
    2ec2:	0f 93       	push	r16
    2ec4:	1f 93       	push	r17
    2ec6:	cf 93       	push	r28
    2ec8:	df 93       	push	r29
    2eca:	ec 01       	movw	r28, r24
  // error if reserved cluster
  if (cluster < 2) return false;
    2ecc:	42 30       	cpi	r20, 0x02	; 2
    2ece:	51 05       	cpc	r21, r1
    2ed0:	61 05       	cpc	r22, r1
    2ed2:	71 05       	cpc	r23, r1
    2ed4:	10 f4       	brcc	.+4      	; 0x2eda <_ZN8SdVolume6fatPutEmm+0x30>
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	78 c0       	rjmp	.+240    	; 0x2fca <_ZN8SdVolume6fatPutEmm+0x120>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2eda:	89 85       	ldd	r24, Y+9	; 0x09
    2edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ede:	ab 85       	ldd	r26, Y+11	; 0x0b
    2ee0:	bc 85       	ldd	r27, Y+12	; 0x0c
    2ee2:	01 96       	adiw	r24, 0x01	; 1
    2ee4:	a1 1d       	adc	r26, r1
    2ee6:	b1 1d       	adc	r27, r1
    2ee8:	84 17       	cp	r24, r20
    2eea:	95 07       	cpc	r25, r21
    2eec:	a6 07       	cpc	r26, r22
    2eee:	b7 07       	cpc	r27, r23
    2ef0:	90 f3       	brcs	.-28     	; 0x2ed6 <_ZN8SdVolume6fatPutEmm+0x2c>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    2ef2:	cb 88       	ldd	r12, Y+19	; 0x13
    2ef4:	dc 88       	ldd	r13, Y+20	; 0x14
    2ef6:	ed 88       	ldd	r14, Y+21	; 0x15
    2ef8:	fe 88       	ldd	r15, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2efa:	8f 89       	ldd	r24, Y+23	; 0x17
    2efc:	80 31       	cpi	r24, 0x10	; 16
    2efe:	29 f4       	brne	.+10     	; 0x2f0a <_ZN8SdVolume6fatPutEmm+0x60>
    2f00:	bb 27       	eor	r27, r27
    2f02:	a7 2f       	mov	r26, r23
    2f04:	96 2f       	mov	r25, r22
    2f06:	85 2f       	mov	r24, r21
    2f08:	09 c0       	rjmp	.+18     	; 0x2f1c <_ZN8SdVolume6fatPutEmm+0x72>
    2f0a:	db 01       	movw	r26, r22
    2f0c:	ca 01       	movw	r24, r20
    2f0e:	e7 e0       	ldi	r30, 0x07	; 7
    2f10:	b6 95       	lsr	r27
    2f12:	a7 95       	ror	r26
    2f14:	97 95       	ror	r25
    2f16:	87 95       	ror	r24
    2f18:	ea 95       	dec	r30
    2f1a:	d1 f7       	brne	.-12     	; 0x2f10 <_ZN8SdVolume6fatPutEmm+0x66>
    2f1c:	48 01       	movw	r8, r16
    2f1e:	59 01       	movw	r10, r18
    2f20:	2a 01       	movw	r4, r20
    2f22:	3b 01       	movw	r6, r22
    2f24:	c8 0e       	add	r12, r24
    2f26:	d9 1e       	adc	r13, r25
    2f28:	ea 1e       	adc	r14, r26
    2f2a:	fb 1e       	adc	r15, r27

  if (lba != cacheBlockNumber_) {
    2f2c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <_ZN8SdVolume17cacheBlockNumber_E>
    2f30:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2f34:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2f38:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2f3c:	c8 16       	cp	r12, r24
    2f3e:	d9 06       	cpc	r13, r25
    2f40:	ea 06       	cpc	r14, r26
    2f42:	fb 06       	cpc	r15, r27
    2f44:	81 f4       	brne	.+32     	; 0x2f66 <_ZN8SdVolume6fatPutEmm+0xbc>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    2f46:	8f 89       	ldd	r24, Y+23	; 0x17
    2f48:	80 31       	cpi	r24, 0x10	; 16
    2f4a:	a9 f4       	brne	.+42     	; 0x2f76 <_ZN8SdVolume6fatPutEmm+0xcc>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    2f4c:	b3 01       	movw	r22, r6
    2f4e:	a2 01       	movw	r20, r4
    2f50:	55 27       	eor	r21, r21
    2f52:	66 27       	eor	r22, r22
    2f54:	77 27       	eor	r23, r23
    2f56:	44 0f       	add	r20, r20
    2f58:	55 1f       	adc	r21, r21
    2f5a:	fa 01       	movw	r30, r20
    2f5c:	ea 5b       	subi	r30, 0xBA	; 186
    2f5e:	fa 4f       	sbci	r31, 0xFA	; 250
    2f60:	91 82       	std	Z+1, r9	; 0x01
    2f62:	80 82       	st	Z, r8
    2f64:	19 c0       	rjmp	.+50     	; 0x2f98 <_ZN8SdVolume6fatPutEmm+0xee>
  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2f66:	40 e0       	ldi	r20, 0x00	; 0
    2f68:	c7 01       	movw	r24, r14
    2f6a:	b6 01       	movw	r22, r12
    2f6c:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <_ZN8SdVolume13cacheRawBlockEmh>
    2f70:	81 11       	cpse	r24, r1
    2f72:	e9 cf       	rjmp	.-46     	; 0x2f46 <_ZN8SdVolume6fatPutEmm+0x9c>
    2f74:	b0 cf       	rjmp	.-160    	; 0x2ed6 <_ZN8SdVolume6fatPutEmm+0x2c>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    2f76:	b3 01       	movw	r22, r6
    2f78:	a2 01       	movw	r20, r4
    2f7a:	4f 77       	andi	r20, 0x7F	; 127
    2f7c:	55 27       	eor	r21, r21
    2f7e:	66 27       	eor	r22, r22
    2f80:	77 27       	eor	r23, r23
    2f82:	44 0f       	add	r20, r20
    2f84:	55 1f       	adc	r21, r21
    2f86:	44 0f       	add	r20, r20
    2f88:	55 1f       	adc	r21, r21
    2f8a:	fa 01       	movw	r30, r20
    2f8c:	ea 5b       	subi	r30, 0xBA	; 186
    2f8e:	fa 4f       	sbci	r31, 0xFA	; 250
    2f90:	80 82       	st	Z, r8
    2f92:	91 82       	std	Z+1, r9	; 0x01
    2f94:	a2 82       	std	Z+2, r10	; 0x02
    2f96:	b3 82       	std	Z+3, r11	; 0x03
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2f98:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <_ZN8SdVolume11cacheDirty_E>
    2f9c:	81 60       	ori	r24, 0x01	; 1
    2f9e:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <_ZN8SdVolume11cacheDirty_E>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    2fa2:	8a 89       	ldd	r24, Y+18	; 0x12
    2fa4:	82 30       	cpi	r24, 0x02	; 2
    2fa6:	80 f0       	brcs	.+32     	; 0x2fc8 <_ZN8SdVolume6fatPutEmm+0x11e>
    2fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    2faa:	9e 81       	ldd	r25, Y+6	; 0x06
    2fac:	af 81       	ldd	r26, Y+7	; 0x07
    2fae:	b8 85       	ldd	r27, Y+8	; 0x08
    2fb0:	c8 0e       	add	r12, r24
    2fb2:	d9 1e       	adc	r13, r25
    2fb4:	ea 1e       	adc	r14, r26
    2fb6:	fb 1e       	adc	r15, r27
    2fb8:	c0 92 3f 05 	sts	0x053F, r12	; 0x80053f <_ZN8SdVolume17cacheMirrorBlock_E>
    2fbc:	d0 92 40 05 	sts	0x0540, r13	; 0x800540 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2fc0:	e0 92 41 05 	sts	0x0541, r14	; 0x800541 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2fc4:	f0 92 42 05 	sts	0x0542, r15	; 0x800542 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  return true;
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
}
    2fca:	df 91       	pop	r29
    2fcc:	cf 91       	pop	r28
    2fce:	1f 91       	pop	r17
    2fd0:	0f 91       	pop	r16
    2fd2:	ff 90       	pop	r15
    2fd4:	ef 90       	pop	r14
    2fd6:	df 90       	pop	r13
    2fd8:	cf 90       	pop	r12
    2fda:	bf 90       	pop	r11
    2fdc:	af 90       	pop	r10
    2fde:	9f 90       	pop	r9
    2fe0:	8f 90       	pop	r8
    2fe2:	7f 90       	pop	r7
    2fe4:	6f 90       	pop	r6
    2fe6:	5f 90       	pop	r5
    2fe8:	4f 90       	pop	r4
    2fea:	08 95       	ret

00002fec <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    2fec:	2f 92       	push	r2
    2fee:	3f 92       	push	r3
    2ff0:	4f 92       	push	r4
    2ff2:	5f 92       	push	r5
    2ff4:	6f 92       	push	r6
    2ff6:	7f 92       	push	r7
    2ff8:	9f 92       	push	r9
    2ffa:	af 92       	push	r10
    2ffc:	bf 92       	push	r11
    2ffe:	cf 92       	push	r12
    3000:	df 92       	push	r13
    3002:	ef 92       	push	r14
    3004:	ff 92       	push	r15
    3006:	0f 93       	push	r16
    3008:	1f 93       	push	r17
    300a:	cf 93       	push	r28
    300c:	df 93       	push	r29
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
    3012:	60 97       	sbiw	r28, 0x10	; 16
    3014:	0f b6       	in	r0, 0x3f	; 63
    3016:	f8 94       	cli
    3018:	de bf       	out	0x3e, r29	; 62
    301a:	0f be       	out	0x3f, r0	; 63
    301c:	cd bf       	out	0x3d, r28	; 61
    301e:	5c 01       	movw	r10, r24
    3020:	49 87       	std	Y+9, r20	; 0x09
    3022:	5a 87       	std	Y+10, r21	; 0x0a
    3024:	6b 87       	std	Y+11, r22	; 0x0b
    3026:	7c 87       	std	Y+12, r23	; 0x0c
    3028:	19 01       	movw	r2, r18

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    302a:	d9 01       	movw	r26, r18
    302c:	cd 90       	ld	r12, X+
    302e:	dd 90       	ld	r13, X+
    3030:	ed 90       	ld	r14, X+
    3032:	fc 90       	ld	r15, X
    3034:	c1 14       	cp	r12, r1
    3036:	d1 04       	cpc	r13, r1
    3038:	e1 04       	cpc	r14, r1
    303a:	f1 04       	cpc	r15, r1
    303c:	31 f0       	breq	.+12     	; 0x304a <_ZN8SdVolume15allocContiguousEmPm+0x5e>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    303e:	bf ef       	ldi	r27, 0xFF	; 255
    3040:	cb 1a       	sub	r12, r27
    3042:	db 0a       	sbc	r13, r27
    3044:	eb 0a       	sbc	r14, r27
    3046:	fb 0a       	sbc	r15, r27
    3048:	10 c0       	rjmp	.+32     	; 0x306a <_ZN8SdVolume15allocContiguousEmPm+0x7e>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    304a:	fc 01       	movw	r30, r24
    304c:	c0 80       	ld	r12, Z
    304e:	d1 80       	ldd	r13, Z+1	; 0x01
    3050:	e2 80       	ldd	r14, Z+2	; 0x02
    3052:	f3 80       	ldd	r15, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    3054:	99 24       	eor	r9, r9
    3056:	93 94       	inc	r9
    3058:	09 85       	ldd	r16, Y+9	; 0x09
    305a:	1a 85       	ldd	r17, Y+10	; 0x0a
    305c:	2b 85       	ldd	r18, Y+11	; 0x0b
    305e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3060:	01 30       	cpi	r16, 0x01	; 1
    3062:	11 05       	cpc	r17, r1
    3064:	21 05       	cpc	r18, r1
    3066:	31 05       	cpc	r19, r1
    3068:	09 f0       	breq	.+2      	; 0x306c <_ZN8SdVolume15allocContiguousEmPm+0x80>
    306a:	91 2c       	mov	r9, r1
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    306c:	f5 01       	movw	r30, r10
    306e:	81 85       	ldd	r24, Z+9	; 0x09
    3070:	92 85       	ldd	r25, Z+10	; 0x0a
    3072:	a3 85       	ldd	r26, Z+11	; 0x0b
    3074:	b4 85       	ldd	r27, Z+12	; 0x0c
    3076:	8c 01       	movw	r16, r24
    3078:	9d 01       	movw	r18, r26
    307a:	0f 5f       	subi	r16, 0xFF	; 255
    307c:	1f 4f       	sbci	r17, 0xFF	; 255
    307e:	2f 4f       	sbci	r18, 0xFF	; 255
    3080:	3f 4f       	sbci	r19, 0xFF	; 255
    3082:	0d 87       	std	Y+13, r16	; 0x0d
    3084:	1e 87       	std	Y+14, r17	; 0x0e
    3086:	2f 87       	std	Y+15, r18	; 0x0f
    3088:	38 8b       	std	Y+16, r19	; 0x10

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    308a:	26 01       	movw	r4, r12
    308c:	37 01       	movw	r6, r14

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    308e:	1d 82       	std	Y+5, r1	; 0x05
    3090:	1e 82       	std	Y+6, r1	; 0x06
    3092:	1f 82       	std	Y+7, r1	; 0x07
    3094:	18 86       	std	Y+8, r1	; 0x08
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    3096:	f5 01       	movw	r30, r10
    3098:	81 85       	ldd	r24, Z+9	; 0x09
    309a:	92 85       	ldd	r25, Z+10	; 0x0a
    309c:	a3 85       	ldd	r26, Z+11	; 0x0b
    309e:	b4 85       	ldd	r27, Z+12	; 0x0c
    30a0:	0d 81       	ldd	r16, Y+5	; 0x05
    30a2:	1e 81       	ldd	r17, Y+6	; 0x06
    30a4:	2f 81       	ldd	r18, Y+7	; 0x07
    30a6:	38 85       	ldd	r19, Y+8	; 0x08
    30a8:	08 17       	cp	r16, r24
    30aa:	19 07       	cpc	r17, r25
    30ac:	2a 07       	cpc	r18, r26
    30ae:	3b 07       	cpc	r19, r27
    30b0:	08 f0       	brcs	.+2      	; 0x30b4 <_ZN8SdVolume15allocContiguousEmPm+0xc8>
    30b2:	56 c0       	rjmp	.+172    	; 0x3160 <_ZN8SdVolume15allocContiguousEmPm+0x174>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    30b4:	2d 85       	ldd	r18, Y+13	; 0x0d
    30b6:	3e 85       	ldd	r19, Y+14	; 0x0e
    30b8:	4f 85       	ldd	r20, Y+15	; 0x0f
    30ba:	58 89       	ldd	r21, Y+16	; 0x10
    30bc:	24 15       	cp	r18, r4
    30be:	35 05       	cpc	r19, r5
    30c0:	46 05       	cpc	r20, r6
    30c2:	57 05       	cpc	r21, r7
    30c4:	50 f4       	brcc	.+20     	; 0x30da <_ZN8SdVolume15allocContiguousEmPm+0xee>
      bgnCluster = endCluster = 2;
    30c6:	82 e0       	ldi	r24, 0x02	; 2
    30c8:	48 2e       	mov	r4, r24
    30ca:	51 2c       	mov	r5, r1
    30cc:	61 2c       	mov	r6, r1
    30ce:	71 2c       	mov	r7, r1
    30d0:	92 e0       	ldi	r25, 0x02	; 2
    30d2:	c9 2e       	mov	r12, r25
    30d4:	d1 2c       	mov	r13, r1
    30d6:	e1 2c       	mov	r14, r1
    30d8:	f1 2c       	mov	r15, r1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    30da:	9e 01       	movw	r18, r28
    30dc:	2f 5f       	subi	r18, 0xFF	; 255
    30de:	3f 4f       	sbci	r19, 0xFF	; 255
    30e0:	b3 01       	movw	r22, r6
    30e2:	a2 01       	movw	r20, r4
    30e4:	c5 01       	movw	r24, r10
    30e6:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZNK8SdVolume6fatGetEmPm>
    30ea:	88 23       	and	r24, r24
    30ec:	c9 f1       	breq	.+114    	; 0x3160 <_ZN8SdVolume15allocContiguousEmPm+0x174>

    if (f != 0) {
    30ee:	49 81       	ldd	r20, Y+1	; 0x01
    30f0:	5a 81       	ldd	r21, Y+2	; 0x02
    30f2:	6b 81       	ldd	r22, Y+3	; 0x03
    30f4:	7c 81       	ldd	r23, Y+4	; 0x04
    30f6:	d3 01       	movw	r26, r6
    30f8:	c2 01       	movw	r24, r4
    30fa:	01 96       	adiw	r24, 0x01	; 1
    30fc:	a1 1d       	adc	r26, r1
    30fe:	b1 1d       	adc	r27, r1
    3100:	45 2b       	or	r20, r21
    3102:	46 2b       	or	r20, r22
    3104:	47 2b       	or	r20, r23
    3106:	19 f0       	breq	.+6      	; 0x310e <_ZN8SdVolume15allocContiguousEmPm+0x122>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    3108:	6c 01       	movw	r12, r24
    310a:	7d 01       	movw	r14, r26
    310c:	0f c0       	rjmp	.+30     	; 0x312c <_ZN8SdVolume15allocContiguousEmPm+0x140>
    } else if ((endCluster - bgnCluster + 1) == count) {
    310e:	ac 01       	movw	r20, r24
    3110:	bd 01       	movw	r22, r26
    3112:	4c 19       	sub	r20, r12
    3114:	5d 09       	sbc	r21, r13
    3116:	6e 09       	sbc	r22, r14
    3118:	7f 09       	sbc	r23, r15
    311a:	09 85       	ldd	r16, Y+9	; 0x09
    311c:	1a 85       	ldd	r17, Y+10	; 0x0a
    311e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3120:	3c 85       	ldd	r19, Y+12	; 0x0c
    3122:	04 17       	cp	r16, r20
    3124:	15 07       	cpc	r17, r21
    3126:	26 07       	cpc	r18, r22
    3128:	37 07       	cpc	r19, r23
    312a:	79 f0       	breq	.+30     	; 0x314a <_ZN8SdVolume15allocContiguousEmPm+0x15e>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    312c:	2d 81       	ldd	r18, Y+5	; 0x05
    312e:	3e 81       	ldd	r19, Y+6	; 0x06
    3130:	4f 81       	ldd	r20, Y+7	; 0x07
    3132:	58 85       	ldd	r21, Y+8	; 0x08
    3134:	2f 5f       	subi	r18, 0xFF	; 255
    3136:	3f 4f       	sbci	r19, 0xFF	; 255
    3138:	4f 4f       	sbci	r20, 0xFF	; 255
    313a:	5f 4f       	sbci	r21, 0xFF	; 255
    313c:	2d 83       	std	Y+5, r18	; 0x05
    313e:	3e 83       	std	Y+6, r19	; 0x06
    3140:	4f 83       	std	Y+7, r20	; 0x07
    3142:	58 87       	std	Y+8, r21	; 0x08
    3144:	2c 01       	movw	r4, r24
    3146:	3d 01       	movw	r6, r26
    3148:	a6 cf       	rjmp	.-180    	; 0x3096 <_ZN8SdVolume15allocContiguousEmPm+0xaa>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    314a:	0f ef       	ldi	r16, 0xFF	; 255
    314c:	1f ef       	ldi	r17, 0xFF	; 255
    314e:	2f ef       	ldi	r18, 0xFF	; 255
    3150:	3f e0       	ldi	r19, 0x0F	; 15
    3152:	b3 01       	movw	r22, r6
    3154:	a2 01       	movw	r20, r4
    3156:	c5 01       	movw	r24, r10
    3158:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    315c:	81 11       	cpse	r24, r1
    315e:	18 c0       	rjmp	.+48     	; 0x3190 <_ZN8SdVolume15allocContiguousEmPm+0x1a4>
    3160:	80 e0       	ldi	r24, 0x00	; 0
    3162:	41 c0       	rjmp	.+130    	; 0x31e6 <_ZN8SdVolume15allocContiguousEmPm+0x1fa>

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    3164:	d3 01       	movw	r26, r6
    3166:	c2 01       	movw	r24, r4
    3168:	01 97       	sbiw	r24, 0x01	; 1
    316a:	a1 09       	sbc	r26, r1
    316c:	b1 09       	sbc	r27, r1
    316e:	8d 83       	std	Y+5, r24	; 0x05
    3170:	9e 83       	std	Y+6, r25	; 0x06
    3172:	af 83       	std	Y+7, r26	; 0x07
    3174:	b8 87       	std	Y+8, r27	; 0x08
    3176:	93 01       	movw	r18, r6
    3178:	82 01       	movw	r16, r4
    317a:	ac 01       	movw	r20, r24
    317c:	bd 01       	movw	r22, r26
    317e:	c5 01       	movw	r24, r10
    3180:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <_ZN8SdVolume6fatPutEmm>
    3184:	88 23       	and	r24, r24
    3186:	61 f3       	breq	.-40     	; 0x3160 <_ZN8SdVolume15allocContiguousEmPm+0x174>
    endCluster--;
    3188:	4d 80       	ldd	r4, Y+5	; 0x05
    318a:	5e 80       	ldd	r5, Y+6	; 0x06
    318c:	6f 80       	ldd	r6, Y+7	; 0x07
    318e:	78 84       	ldd	r7, Y+8	; 0x08
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    3190:	c4 14       	cp	r12, r4
    3192:	d5 04       	cpc	r13, r5
    3194:	e6 04       	cpc	r14, r6
    3196:	f7 04       	cpc	r15, r7
    3198:	28 f3       	brcs	.-54     	; 0x3164 <_ZN8SdVolume15allocContiguousEmPm+0x178>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    319a:	d1 01       	movw	r26, r2
    319c:	4d 91       	ld	r20, X+
    319e:	5d 91       	ld	r21, X+
    31a0:	6d 91       	ld	r22, X+
    31a2:	7c 91       	ld	r23, X
    31a4:	41 15       	cp	r20, r1
    31a6:	51 05       	cpc	r21, r1
    31a8:	61 05       	cpc	r22, r1
    31aa:	71 05       	cpc	r23, r1
    31ac:	99 f4       	brne	.+38     	; 0x31d4 <_ZN8SdVolume15allocContiguousEmPm+0x1e8>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    31ae:	f1 01       	movw	r30, r2
    31b0:	c0 82       	st	Z, r12
    31b2:	d1 82       	std	Z+1, r13	; 0x01
    31b4:	e2 82       	std	Z+2, r14	; 0x02
    31b6:	f3 82       	std	Z+3, r15	; 0x03

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    31b8:	99 20       	and	r9, r9
    31ba:	a1 f0       	breq	.+40     	; 0x31e4 <_ZN8SdVolume15allocContiguousEmPm+0x1f8>
    31bc:	ff ef       	ldi	r31, 0xFF	; 255
    31be:	cf 1a       	sub	r12, r31
    31c0:	df 0a       	sbc	r13, r31
    31c2:	ef 0a       	sbc	r14, r31
    31c4:	ff 0a       	sbc	r15, r31
    31c6:	d5 01       	movw	r26, r10
    31c8:	cd 92       	st	X+, r12
    31ca:	dd 92       	st	X+, r13
    31cc:	ed 92       	st	X+, r14
    31ce:	fc 92       	st	X, r15
    31d0:	13 97       	sbiw	r26, 0x03	; 3
    31d2:	08 c0       	rjmp	.+16     	; 0x31e4 <_ZN8SdVolume15allocContiguousEmPm+0x1f8>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    31d4:	97 01       	movw	r18, r14
    31d6:	86 01       	movw	r16, r12
    31d8:	c5 01       	movw	r24, r10
    31da:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <_ZN8SdVolume6fatPutEmm>
    31de:	81 11       	cpse	r24, r1
    31e0:	e6 cf       	rjmp	.-52     	; 0x31ae <_ZN8SdVolume15allocContiguousEmPm+0x1c2>
    31e2:	be cf       	rjmp	.-132    	; 0x3160 <_ZN8SdVolume15allocContiguousEmPm+0x174>
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
    31e4:	81 e0       	ldi	r24, 0x01	; 1
}
    31e6:	60 96       	adiw	r28, 0x10	; 16
    31e8:	0f b6       	in	r0, 0x3f	; 63
    31ea:	f8 94       	cli
    31ec:	de bf       	out	0x3e, r29	; 62
    31ee:	0f be       	out	0x3f, r0	; 63
    31f0:	cd bf       	out	0x3d, r28	; 61
    31f2:	df 91       	pop	r29
    31f4:	cf 91       	pop	r28
    31f6:	1f 91       	pop	r17
    31f8:	0f 91       	pop	r16
    31fa:	ff 90       	pop	r15
    31fc:	ef 90       	pop	r14
    31fe:	df 90       	pop	r13
    3200:	cf 90       	pop	r12
    3202:	bf 90       	pop	r11
    3204:	af 90       	pop	r10
    3206:	9f 90       	pop	r9
    3208:	7f 90       	pop	r7
    320a:	6f 90       	pop	r6
    320c:	5f 90       	pop	r5
    320e:	4f 90       	pop	r4
    3210:	3f 90       	pop	r3
    3212:	2f 90       	pop	r2
    3214:	08 95       	ret

00003216 <_ZN8SdVolume9freeChainEm>:
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    3216:	af 92       	push	r10
    3218:	bf 92       	push	r11
    321a:	cf 92       	push	r12
    321c:	df 92       	push	r13
    321e:	ef 92       	push	r14
    3220:	ff 92       	push	r15
    3222:	0f 93       	push	r16
    3224:	1f 93       	push	r17
    3226:	cf 93       	push	r28
    3228:	df 93       	push	r29
    322a:	00 d0       	rcall	.+0      	; 0x322c <_ZN8SdVolume9freeChainEm+0x16>
    322c:	00 d0       	rcall	.+0      	; 0x322e <_ZN8SdVolume9freeChainEm+0x18>
    322e:	cd b7       	in	r28, 0x3d	; 61
    3230:	de b7       	in	r29, 0x3e	; 62
    3232:	5c 01       	movw	r10, r24
    3234:	6a 01       	movw	r12, r20
    3236:	7b 01       	movw	r14, r22
  // clear free cluster location
  allocSearchStart_ = 2;
    3238:	82 e0       	ldi	r24, 0x02	; 2
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	a0 e0       	ldi	r26, 0x00	; 0
    323e:	b0 e0       	ldi	r27, 0x00	; 0
    3240:	f5 01       	movw	r30, r10
    3242:	80 83       	st	Z, r24
    3244:	91 83       	std	Z+1, r25	; 0x01
    3246:	a2 83       	std	Z+2, r26	; 0x02
    3248:	b3 83       	std	Z+3, r27	; 0x03

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    324a:	9e 01       	movw	r18, r28
    324c:	2f 5f       	subi	r18, 0xFF	; 255
    324e:	3f 4f       	sbci	r19, 0xFF	; 255
    3250:	b7 01       	movw	r22, r14
    3252:	a6 01       	movw	r20, r12
    3254:	c5 01       	movw	r24, r10
    3256:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZNK8SdVolume6fatGetEmPm>
    325a:	88 23       	and	r24, r24
    325c:	11 f1       	breq	.+68     	; 0x32a2 <_ZN8SdVolume9freeChainEm+0x8c>

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    325e:	00 e0       	ldi	r16, 0x00	; 0
    3260:	10 e0       	ldi	r17, 0x00	; 0
    3262:	98 01       	movw	r18, r16
    3264:	b7 01       	movw	r22, r14
    3266:	a6 01       	movw	r20, r12
    3268:	c5 01       	movw	r24, r10
    326a:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <_ZN8SdVolume6fatPutEmm>
    326e:	88 23       	and	r24, r24
    3270:	c1 f0       	breq	.+48     	; 0x32a2 <_ZN8SdVolume9freeChainEm+0x8c>

    cluster = next;
    3272:	c9 80       	ldd	r12, Y+1	; 0x01
    3274:	da 80       	ldd	r13, Y+2	; 0x02
    3276:	eb 80       	ldd	r14, Y+3	; 0x03
    3278:	fc 80       	ldd	r15, Y+4	; 0x04
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    327a:	f5 01       	movw	r30, r10
    327c:	87 89       	ldd	r24, Z+23	; 0x17
    327e:	80 31       	cpi	r24, 0x10	; 16
    3280:	29 f0       	breq	.+10     	; 0x328c <_ZN8SdVolume9freeChainEm+0x76>
    3282:	88 ef       	ldi	r24, 0xF8	; 248
    3284:	9f ef       	ldi	r25, 0xFF	; 255
    3286:	af ef       	ldi	r26, 0xFF	; 255
    3288:	bf e0       	ldi	r27, 0x0F	; 15
    328a:	04 c0       	rjmp	.+8      	; 0x3294 <_ZN8SdVolume9freeChainEm+0x7e>
    328c:	88 ef       	ldi	r24, 0xF8	; 248
    328e:	9f ef       	ldi	r25, 0xFF	; 255
    3290:	a0 e0       	ldi	r26, 0x00	; 0
    3292:	b0 e0       	ldi	r27, 0x00	; 0
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    3294:	c8 16       	cp	r12, r24
    3296:	d9 06       	cpc	r13, r25
    3298:	ea 06       	cpc	r14, r26
    329a:	fb 06       	cpc	r15, r27
    329c:	b0 f2       	brcs	.-84     	; 0x324a <_ZN8SdVolume9freeChainEm+0x34>
    if (!fatPut(cluster, 0)) return false;

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	01 c0       	rjmp	.+2      	; 0x32a4 <_ZN8SdVolume9freeChainEm+0x8e>
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    32a2:	80 e0       	ldi	r24, 0x00	; 0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    32a4:	0f 90       	pop	r0
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	0f 90       	pop	r0
    32ac:	df 91       	pop	r29
    32ae:	cf 91       	pop	r28
    32b0:	1f 91       	pop	r17
    32b2:	0f 91       	pop	r16
    32b4:	ff 90       	pop	r15
    32b6:	ef 90       	pop	r14
    32b8:	df 90       	pop	r13
    32ba:	cf 90       	pop	r12
    32bc:	bf 90       	pop	r11
    32be:	af 90       	pop	r10
    32c0:	08 95       	ret

000032c2 <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    32c2:	8f 92       	push	r8
    32c4:	9f 92       	push	r9
    32c6:	af 92       	push	r10
    32c8:	bf 92       	push	r11
    32ca:	cf 92       	push	r12
    32cc:	df 92       	push	r13
    32ce:	ef 92       	push	r14
    32d0:	ff 92       	push	r15
    32d2:	0f 93       	push	r16
    32d4:	1f 93       	push	r17
    32d6:	cf 93       	push	r28
    32d8:	df 93       	push	r29
    32da:	ec 01       	movw	r28, r24
    32dc:	14 2f       	mov	r17, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    32de:	70 93 45 05 	sts	0x0545, r23	; 0x800545 <_ZN8SdVolume7sdCard_E+0x1>
    32e2:	60 93 44 05 	sts	0x0544, r22	; 0x800544 <_ZN8SdVolume7sdCard_E>
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    32e6:	44 23       	and	r20, r20
    32e8:	69 f1       	breq	.+90     	; 0x3344 <_ZN8SdVolume4initEP7Sd2Cardh+0x82>
    if (part > 4)return false;
    32ea:	45 30       	cpi	r20, 0x05	; 5
    32ec:	10 f0       	brcs	.+4      	; 0x32f2 <_ZN8SdVolume4initEP7Sd2Cardh+0x30>
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	f2 c0       	rjmp	.+484    	; 0x34d6 <_ZN8SdVolume4initEP7Sd2Cardh+0x214>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    32f2:	40 e0       	ldi	r20, 0x00	; 0
    32f4:	60 e0       	ldi	r22, 0x00	; 0
    32f6:	70 e0       	ldi	r23, 0x00	; 0
    32f8:	cb 01       	movw	r24, r22
    32fa:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <_ZN8SdVolume13cacheRawBlockEmh>
    32fe:	88 23       	and	r24, r24
    3300:	b1 f3       	breq	.-20     	; 0x32ee <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    3302:	20 e1       	ldi	r18, 0x10	; 16
    3304:	12 9f       	mul	r17, r18
    3306:	a0 01       	movw	r20, r0
    3308:	11 24       	eor	r1, r1
    330a:	4a 5c       	subi	r20, 0xCA	; 202
    330c:	5a 4f       	sbci	r21, 0xFA	; 250
    330e:	fa 01       	movw	r30, r20
    3310:	e2 54       	subi	r30, 0x42	; 66
    3312:	fe 4f       	sbci	r31, 0xFE	; 254
    3314:	80 81       	ld	r24, Z
    3316:	8f 77       	andi	r24, 0x7F	; 127
    3318:	51 f7       	brne	.-44     	; 0x32ee <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
    331a:	3c 96       	adiw	r30, 0x0c	; 12
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    331c:	80 81       	ld	r24, Z
    331e:	91 81       	ldd	r25, Z+1	; 0x01
    3320:	a2 81       	ldd	r26, Z+2	; 0x02
    3322:	b3 81       	ldd	r27, Z+3	; 0x03
    3324:	84 36       	cpi	r24, 0x64	; 100
    3326:	91 05       	cpc	r25, r1
    3328:	a1 05       	cpc	r26, r1
    332a:	b1 05       	cpc	r27, r1
    332c:	00 f3       	brcs	.-64     	; 0x32ee <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
      p->firstSector == 0) {
    332e:	34 97       	sbiw	r30, 0x04	; 4
    3330:	c0 80       	ld	r12, Z
    3332:	d1 80       	ldd	r13, Z+1	; 0x01
    3334:	e2 80       	ldd	r14, Z+2	; 0x02
    3336:	f3 80       	ldd	r15, Z+3	; 0x03
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
    3338:	c1 14       	cp	r12, r1
    333a:	d1 04       	cpc	r13, r1
    333c:	e1 04       	cpc	r14, r1
    333e:	f1 04       	cpc	r15, r1
    3340:	21 f4       	brne	.+8      	; 0x334a <_ZN8SdVolume4initEP7Sd2Cardh+0x88>
    3342:	d5 cf       	rjmp	.-86     	; 0x32ee <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    3344:	c1 2c       	mov	r12, r1
    3346:	d1 2c       	mov	r13, r1
    3348:	76 01       	movw	r14, r12
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    334a:	40 e0       	ldi	r20, 0x00	; 0
    334c:	c7 01       	movw	r24, r14
    334e:	b6 01       	movw	r22, r12
    3350:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <_ZN8SdVolume13cacheRawBlockEmh>
    3354:	88 23       	and	r24, r24
    3356:	59 f2       	breq	.-106    	; 0x32ee <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    3358:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <_ZN8SdVolume12cacheBuffer_E+0xb>
    335c:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <_ZN8SdVolume12cacheBuffer_E+0xc>
    3360:	81 15       	cp	r24, r1
    3362:	92 40       	sbci	r25, 0x02	; 2
    3364:	21 f6       	brne	.-120    	; 0x32ee <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    3366:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <_ZN8SdVolume12cacheBuffer_E+0x10>
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    336a:	99 23       	and	r25, r25
    336c:	09 f4       	brne	.+2      	; 0x3370 <_ZN8SdVolume4initEP7Sd2Cardh+0xae>
    336e:	bf cf       	rjmp	.-130    	; 0x32ee <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    3370:	20 91 54 05 	lds	r18, 0x0554	; 0x800554 <_ZN8SdVolume12cacheBuffer_E+0xe>
    3374:	30 91 55 05 	lds	r19, 0x0555	; 0x800555 <_ZN8SdVolume12cacheBuffer_E+0xf>
    3378:	23 2b       	or	r18, r19
    337a:	09 f4       	brne	.+2      	; 0x337e <_ZN8SdVolume4initEP7Sd2Cardh+0xbc>
    337c:	b8 cf       	rjmp	.-144    	; 0x32ee <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
    337e:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <_ZN8SdVolume12cacheBuffer_E+0xd>
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    3382:	88 23       	and	r24, r24
    3384:	09 f4       	brne	.+2      	; 0x3388 <_ZN8SdVolume4initEP7Sd2Cardh+0xc6>
    3386:	b3 cf       	rjmp	.-154    	; 0x32ee <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    3388:	9a 8b       	std	Y+18, r25	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    338a:	8c 83       	std	Y+4, r24	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    338c:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	41 e0       	ldi	r20, 0x01	; 1
    3392:	50 e0       	ldi	r21, 0x00	; 0
    3394:	2d 85       	ldd	r18, Y+13	; 0x0d
    3396:	e2 2f       	mov	r30, r18
    3398:	ba 01       	movw	r22, r20
    339a:	02 2e       	mov	r0, r18
    339c:	02 c0       	rjmp	.+4      	; 0x33a2 <_ZN8SdVolume4initEP7Sd2Cardh+0xe0>
    339e:	66 0f       	add	r22, r22
    33a0:	77 1f       	adc	r23, r23
    33a2:	0a 94       	dec	r0
    33a4:	e2 f7       	brpl	.-8      	; 0x339e <_ZN8SdVolume4initEP7Sd2Cardh+0xdc>
    33a6:	86 17       	cp	r24, r22
    33a8:	97 07       	cpc	r25, r23
    33aa:	31 f0       	breq	.+12     	; 0x33b8 <_ZN8SdVolume4initEP7Sd2Cardh+0xf6>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    33ac:	31 e0       	ldi	r19, 0x01	; 1
    33ae:	32 0f       	add	r19, r18
    33b0:	3d 87       	std	Y+13, r19	; 0x0d
    33b2:	28 30       	cpi	r18, 0x08	; 8
    33b4:	78 f3       	brcs	.-34     	; 0x3394 <_ZN8SdVolume4initEP7Sd2Cardh+0xd2>
    33b6:	9b cf       	rjmp	.-202    	; 0x32ee <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    33b8:	20 91 5c 05 	lds	r18, 0x055C	; 0x80055c <_ZN8SdVolume12cacheBuffer_E+0x16>
    33bc:	30 91 5d 05 	lds	r19, 0x055D	; 0x80055d <_ZN8SdVolume12cacheBuffer_E+0x17>
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    33c0:	21 15       	cp	r18, r1
    33c2:	31 05       	cpc	r19, r1
    33c4:	19 f0       	breq	.+6      	; 0x33cc <_ZN8SdVolume4initEP7Sd2Cardh+0x10a>
    33c6:	40 e0       	ldi	r20, 0x00	; 0
    33c8:	50 e0       	ldi	r21, 0x00	; 0
    33ca:	08 c0       	rjmp	.+16     	; 0x33dc <_ZN8SdVolume4initEP7Sd2Cardh+0x11a>
    33cc:	20 91 6a 05 	lds	r18, 0x056A	; 0x80056a <_ZN8SdVolume12cacheBuffer_E+0x24>
    33d0:	30 91 6b 05 	lds	r19, 0x056B	; 0x80056b <_ZN8SdVolume12cacheBuffer_E+0x25>
    33d4:	40 91 6c 05 	lds	r20, 0x056C	; 0x80056c <_ZN8SdVolume12cacheBuffer_E+0x26>
    33d8:	50 91 6d 05 	lds	r21, 0x056D	; 0x80056d <_ZN8SdVolume12cacheBuffer_E+0x27>
    33dc:	2d 83       	std	Y+5, r18	; 0x05
    33de:	3e 83       	std	Y+6, r19	; 0x06
    33e0:	4f 83       	std	Y+7, r20	; 0x07
    33e2:	58 87       	std	Y+8, r21	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    33e4:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <_ZN8SdVolume12cacheBuffer_E+0xe>
    33e8:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <_ZN8SdVolume12cacheBuffer_E+0xf>
    33ec:	46 01       	movw	r8, r12
    33ee:	57 01       	movw	r10, r14
    33f0:	88 0e       	add	r8, r24
    33f2:	99 1e       	adc	r9, r25
    33f4:	a1 1c       	adc	r10, r1
    33f6:	b1 1c       	adc	r11, r1
    33f8:	8b 8a       	std	Y+19, r8	; 0x13
    33fa:	9c 8a       	std	Y+20, r9	; 0x14
    33fc:	ad 8a       	std	Y+21, r10	; 0x15
    33fe:	be 8a       	std	Y+22, r11	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    3400:	00 91 57 05 	lds	r16, 0x0557	; 0x800557 <_ZN8SdVolume12cacheBuffer_E+0x11>
    3404:	10 91 58 05 	lds	r17, 0x0558	; 0x800558 <_ZN8SdVolume12cacheBuffer_E+0x12>
    3408:	19 8f       	std	Y+25, r17	; 0x19
    340a:	08 8f       	std	Y+24, r16	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    340c:	a0 91 56 05 	lds	r26, 0x0556	; 0x800556 <_ZN8SdVolume12cacheBuffer_E+0x10>
    3410:	b0 e0       	ldi	r27, 0x00	; 0
    3412:	0e 94 cb 1b 	call	0x3796	; 0x3796 <__muluhisi3>
    3416:	86 0e       	add	r8, r22
    3418:	97 1e       	adc	r9, r23
    341a:	a8 1e       	adc	r10, r24
    341c:	b9 1e       	adc	r11, r25
    341e:	8a 8e       	std	Y+26, r8	; 0x1a
    3420:	9b 8e       	std	Y+27, r9	; 0x1b
    3422:	ac 8e       	std	Y+28, r10	; 0x1c
    3424:	bd 8e       	std	Y+29, r11	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    3426:	85 e0       	ldi	r24, 0x05	; 5
    3428:	00 0f       	add	r16, r16
    342a:	11 1f       	adc	r17, r17
    342c:	8a 95       	dec	r24
    342e:	e1 f7       	brne	.-8      	; 0x3428 <_ZN8SdVolume4initEP7Sd2Cardh+0x166>
    3430:	01 50       	subi	r16, 0x01	; 1
    3432:	1e 4f       	sbci	r17, 0xFE	; 254
    3434:	01 2f       	mov	r16, r17
    3436:	11 27       	eor	r17, r17
    3438:	06 95       	lsr	r16
    343a:	80 0e       	add	r8, r16
    343c:	91 1e       	adc	r9, r17
    343e:	a1 1c       	adc	r10, r1
    3440:	b1 1c       	adc	r11, r1
    3442:	8e 86       	std	Y+14, r8	; 0x0e
    3444:	9f 86       	std	Y+15, r9	; 0x0f
    3446:	a8 8a       	std	Y+16, r10	; 0x10
    3448:	b9 8a       	std	Y+17, r11	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    344a:	20 91 59 05 	lds	r18, 0x0559	; 0x800559 <_ZN8SdVolume12cacheBuffer_E+0x13>
    344e:	30 91 5a 05 	lds	r19, 0x055A	; 0x80055a <_ZN8SdVolume12cacheBuffer_E+0x14>
                           bpb->totalSectors16 : bpb->totalSectors32;
    3452:	21 15       	cp	r18, r1
    3454:	31 05       	cpc	r19, r1
    3456:	21 f0       	breq	.+8      	; 0x3460 <_ZN8SdVolume4initEP7Sd2Cardh+0x19e>
    3458:	a9 01       	movw	r20, r18
    345a:	60 e0       	ldi	r22, 0x00	; 0
    345c:	70 e0       	ldi	r23, 0x00	; 0
    345e:	08 c0       	rjmp	.+16     	; 0x3470 <_ZN8SdVolume4initEP7Sd2Cardh+0x1ae>
    3460:	40 91 66 05 	lds	r20, 0x0566	; 0x800566 <_ZN8SdVolume12cacheBuffer_E+0x20>
    3464:	50 91 67 05 	lds	r21, 0x0567	; 0x800567 <_ZN8SdVolume12cacheBuffer_E+0x21>
    3468:	60 91 68 05 	lds	r22, 0x0568	; 0x800568 <_ZN8SdVolume12cacheBuffer_E+0x22>
    346c:	70 91 69 05 	lds	r23, 0x0569	; 0x800569 <_ZN8SdVolume12cacheBuffer_E+0x23>
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    3470:	d7 01       	movw	r26, r14
    3472:	c6 01       	movw	r24, r12
    3474:	88 19       	sub	r24, r8
    3476:	99 09       	sbc	r25, r9
    3478:	aa 09       	sbc	r26, r10
    347a:	bb 09       	sbc	r27, r11
    347c:	84 0f       	add	r24, r20
    347e:	95 1f       	adc	r25, r21
    3480:	a6 1f       	adc	r26, r22
    3482:	b7 1f       	adc	r27, r23
    3484:	04 c0       	rjmp	.+8      	; 0x348e <_ZN8SdVolume4initEP7Sd2Cardh+0x1cc>
    3486:	b6 95       	lsr	r27
    3488:	a7 95       	ror	r26
    348a:	97 95       	ror	r25
    348c:	87 95       	ror	r24
    348e:	ea 95       	dec	r30
    3490:	d2 f7       	brpl	.-12     	; 0x3486 <_ZN8SdVolume4initEP7Sd2Cardh+0x1c4>
    3492:	89 87       	std	Y+9, r24	; 0x09
    3494:	9a 87       	std	Y+10, r25	; 0x0a
    3496:	ab 87       	std	Y+11, r26	; 0x0b
    3498:	bc 87       	std	Y+12, r27	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    349a:	85 3f       	cpi	r24, 0xF5	; 245
    349c:	2f e0       	ldi	r18, 0x0F	; 15
    349e:	92 07       	cpc	r25, r18
    34a0:	a1 05       	cpc	r26, r1
    34a2:	b1 05       	cpc	r27, r1
    34a4:	10 f4       	brcc	.+4      	; 0x34aa <_ZN8SdVolume4initEP7Sd2Cardh+0x1e8>
    fatType_ = 12;
    34a6:	8c e0       	ldi	r24, 0x0C	; 12
    34a8:	14 c0       	rjmp	.+40     	; 0x34d2 <_ZN8SdVolume4initEP7Sd2Cardh+0x210>
  } else if (clusterCount_ < 65525) {
    34aa:	85 3f       	cpi	r24, 0xF5	; 245
    34ac:	9f 4f       	sbci	r25, 0xFF	; 255
    34ae:	a1 05       	cpc	r26, r1
    34b0:	b1 05       	cpc	r27, r1
    34b2:	10 f4       	brcc	.+4      	; 0x34b8 <_ZN8SdVolume4initEP7Sd2Cardh+0x1f6>
    fatType_ = 16;
    34b4:	80 e1       	ldi	r24, 0x10	; 16
    34b6:	0d c0       	rjmp	.+26     	; 0x34d2 <_ZN8SdVolume4initEP7Sd2Cardh+0x210>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    34b8:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <_ZN8SdVolume12cacheBuffer_E+0x2c>
    34bc:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <_ZN8SdVolume12cacheBuffer_E+0x2d>
    34c0:	a0 91 74 05 	lds	r26, 0x0574	; 0x800574 <_ZN8SdVolume12cacheBuffer_E+0x2e>
    34c4:	b0 91 75 05 	lds	r27, 0x0575	; 0x800575 <_ZN8SdVolume12cacheBuffer_E+0x2f>
    34c8:	8a 8f       	std	Y+26, r24	; 0x1a
    34ca:	9b 8f       	std	Y+27, r25	; 0x1b
    34cc:	ac 8f       	std	Y+28, r26	; 0x1c
    34ce:	bd 8f       	std	Y+29, r27	; 0x1d
    fatType_ = 32;
    34d0:	80 e2       	ldi	r24, 0x20	; 32
    34d2:	8f 8b       	std	Y+23, r24	; 0x17
  }
  return true;
    34d4:	81 e0       	ldi	r24, 0x01	; 1
}
    34d6:	df 91       	pop	r29
    34d8:	cf 91       	pop	r28
    34da:	1f 91       	pop	r17
    34dc:	0f 91       	pop	r16
    34de:	ff 90       	pop	r15
    34e0:	ef 90       	pop	r14
    34e2:	df 90       	pop	r13
    34e4:	cf 90       	pop	r12
    34e6:	bf 90       	pop	r11
    34e8:	af 90       	pop	r10
    34ea:	9f 90       	pop	r9
    34ec:	8f 90       	pop	r8
    34ee:	08 95       	ret

000034f0 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    34f0:	cf 93       	push	r28
  uint8_t sreg = SREG;
    34f2:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    34f4:	f8 94       	cli
  if (!initialized) {
    34f6:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <_ZN8SPIClass11initializedE>
    34fa:	81 11       	cpse	r24, r1
    34fc:	27 c0       	rjmp	.+78     	; 0x354c <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    34fe:	ea e9       	ldi	r30, 0x9A	; 154
    3500:	f0 e0       	ldi	r31, 0x00	; 0
    3502:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    3504:	e6 e8       	ldi	r30, 0x86	; 134
    3506:	f0 e0       	ldi	r31, 0x00	; 0
    3508:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    350a:	e8 2f       	mov	r30, r24
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	ee 0f       	add	r30, r30
    3510:	ff 1f       	adc	r31, r31
    3512:	e8 54       	subi	r30, 0x48	; 72
    3514:	ff 4f       	sbci	r31, 0xFF	; 255
    3516:	a5 91       	lpm	r26, Z+
    3518:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    351a:	ec 91       	ld	r30, X
    351c:	e9 23       	and	r30, r25
    351e:	21 f4       	brne	.+8      	; 0x3528 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    3520:	61 e0       	ldi	r22, 0x01	; 1
    3522:	8a e0       	ldi	r24, 0x0A	; 10
    3524:	0e 94 fe 05 	call	0xbfc	; 0xbfc <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    3528:	61 e0       	ldi	r22, 0x01	; 1
    352a:	8a e0       	ldi	r24, 0x0A	; 10
    352c:	0e 94 c2 05 	call	0xb84	; 0xb84 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    3530:	8c b5       	in	r24, 0x2c	; 44
    3532:	80 61       	ori	r24, 0x10	; 16
    3534:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    3536:	8c b5       	in	r24, 0x2c	; 44
    3538:	80 64       	ori	r24, 0x40	; 64
    353a:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    353c:	61 e0       	ldi	r22, 0x01	; 1
    353e:	8d e0       	ldi	r24, 0x0D	; 13
    3540:	0e 94 c2 05 	call	0xb84	; 0xb84 <pinMode>
    pinMode(MOSI, OUTPUT);
    3544:	61 e0       	ldi	r22, 0x01	; 1
    3546:	8b e0       	ldi	r24, 0x0B	; 11
    3548:	0e 94 c2 05 	call	0xb84	; 0xb84 <pinMode>
  }
  initialized++; // reference count
    354c:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <_ZN8SPIClass11initializedE>
    3550:	8f 5f       	subi	r24, 0xFF	; 255
    3552:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    3556:	cf bf       	out	0x3f, r28	; 63
}
    3558:	cf 91       	pop	r28
    355a:	08 95       	ret

0000355c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    355c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    355e:	91 8d       	ldd	r25, Z+25	; 0x19
    3560:	22 8d       	ldd	r18, Z+26	; 0x1a
    3562:	89 2f       	mov	r24, r25
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	80 5c       	subi	r24, 0xC0	; 192
    3568:	9f 4f       	sbci	r25, 0xFF	; 255
    356a:	82 1b       	sub	r24, r18
    356c:	91 09       	sbc	r25, r1
}
    356e:	8f 73       	andi	r24, 0x3F	; 63
    3570:	99 27       	eor	r25, r25
    3572:	08 95       	ret

00003574 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3574:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3576:	91 8d       	ldd	r25, Z+25	; 0x19
    3578:	82 8d       	ldd	r24, Z+26	; 0x1a
    357a:	98 17       	cp	r25, r24
    357c:	31 f0       	breq	.+12     	; 0x358a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    357e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3580:	e8 0f       	add	r30, r24
    3582:	f1 1d       	adc	r31, r1
    3584:	85 8d       	ldd	r24, Z+29	; 0x1d
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    358a:	8f ef       	ldi	r24, 0xFF	; 255
    358c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    358e:	08 95       	ret

00003590 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    3590:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3592:	91 8d       	ldd	r25, Z+25	; 0x19
    3594:	82 8d       	ldd	r24, Z+26	; 0x1a
    3596:	98 17       	cp	r25, r24
    3598:	61 f0       	breq	.+24     	; 0x35b2 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    359a:	82 8d       	ldd	r24, Z+26	; 0x1a
    359c:	df 01       	movw	r26, r30
    359e:	a8 0f       	add	r26, r24
    35a0:	b1 1d       	adc	r27, r1
    35a2:	5d 96       	adiw	r26, 0x1d	; 29
    35a4:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    35a6:	92 8d       	ldd	r25, Z+26	; 0x1a
    35a8:	9f 5f       	subi	r25, 0xFF	; 255
    35aa:	9f 73       	andi	r25, 0x3F	; 63
    35ac:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    35b2:	8f ef       	ldi	r24, 0xFF	; 255
    35b4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    35b6:	08 95       	ret

000035b8 <_ZN14HardwareSerial17availableForWriteEv>:
int HardwareSerial::availableForWrite(void)
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    35b8:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    35ba:	f8 94       	cli
    head = _tx_buffer_head;
    35bc:	fc 01       	movw	r30, r24
    35be:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    35c0:	44 8d       	ldd	r20, Z+28	; 0x1c
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    35c2:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    35c4:	25 2f       	mov	r18, r21
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	84 2f       	mov	r24, r20
    35ca:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    35cc:	82 1b       	sub	r24, r18
    35ce:	93 0b       	sbc	r25, r19
    35d0:	54 17       	cp	r21, r20
    35d2:	18 f0       	brcs	.+6      	; 0x35da <_ZN14HardwareSerial17availableForWriteEv+0x22>
    35d4:	81 50       	subi	r24, 0x01	; 1
    35d6:	9e 4f       	sbci	r25, 0xFE	; 254
    35d8:	08 95       	ret
  return tail - head - 1;
    35da:	01 97       	sbiw	r24, 0x01	; 1
}
    35dc:	08 95       	ret

000035de <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    35de:	80 e2       	ldi	r24, 0x20	; 32
    35e0:	94 e0       	ldi	r25, 0x04	; 4
    35e2:	89 2b       	or	r24, r25
    35e4:	49 f0       	breq	.+18     	; 0x35f8 <_Z14serialEventRunv+0x1a>
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	89 2b       	or	r24, r25
    35ec:	29 f0       	breq	.+10     	; 0x35f8 <_Z14serialEventRunv+0x1a>
    35ee:	0e 94 20 04 	call	0x840	; 0x840 <_Z17Serial0_availablev>
    35f2:	81 11       	cpse	r24, r1
    35f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    35f8:	08 95       	ret

000035fa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    35fa:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    35fc:	84 8d       	ldd	r24, Z+28	; 0x1c
    35fe:	df 01       	movw	r26, r30
    3600:	a8 0f       	add	r26, r24
    3602:	b1 1d       	adc	r27, r1
    3604:	a3 5a       	subi	r26, 0xA3	; 163
    3606:	bf 4f       	sbci	r27, 0xFF	; 255
    3608:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    360a:	84 8d       	ldd	r24, Z+28	; 0x1c
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	01 96       	adiw	r24, 0x01	; 1
    3610:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3612:	a6 89       	ldd	r26, Z+22	; 0x16
    3614:	b7 89       	ldd	r27, Z+23	; 0x17
    3616:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3618:	a0 89       	ldd	r26, Z+16	; 0x10
    361a:	b1 89       	ldd	r27, Z+17	; 0x11
    361c:	8c 91       	ld	r24, X
    361e:	83 70       	andi	r24, 0x03	; 3
    3620:	80 64       	ori	r24, 0x40	; 64
    3622:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    3624:	93 8d       	ldd	r25, Z+27	; 0x1b
    3626:	84 8d       	ldd	r24, Z+28	; 0x1c
    3628:	98 13       	cpse	r25, r24
    362a:	06 c0       	rjmp	.+12     	; 0x3638 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x3e>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    362c:	02 88       	ldd	r0, Z+18	; 0x12
    362e:	f3 89       	ldd	r31, Z+19	; 0x13
    3630:	e0 2d       	mov	r30, r0
    3632:	80 81       	ld	r24, Z
    3634:	8f 7d       	andi	r24, 0xDF	; 223
    3636:	80 83       	st	Z, r24
    3638:	08 95       	ret

0000363a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    363a:	ef 92       	push	r14
    363c:	ff 92       	push	r15
    363e:	0f 93       	push	r16
    3640:	1f 93       	push	r17
    3642:	cf 93       	push	r28
    3644:	df 93       	push	r29
    3646:	ec 01       	movw	r28, r24
  _written = true;
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    364c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    364e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3650:	98 13       	cpse	r25, r24
    3652:	05 c0       	rjmp	.+10     	; 0x365e <_ZN14HardwareSerial5writeEh+0x24>
    3654:	e8 89       	ldd	r30, Y+16	; 0x10
    3656:	f9 89       	ldd	r31, Y+17	; 0x11
    3658:	80 81       	ld	r24, Z
    365a:	85 fd       	sbrc	r24, 5
    365c:	24 c0       	rjmp	.+72     	; 0x36a6 <_ZN14HardwareSerial5writeEh+0x6c>
    365e:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3660:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3662:	10 e0       	ldi	r17, 0x00	; 0
    3664:	0f 5f       	subi	r16, 0xFF	; 255
    3666:	1f 4f       	sbci	r17, 0xFF	; 255
    3668:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    366a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    366c:	e8 12       	cpse	r14, r24
    366e:	0c c0       	rjmp	.+24     	; 0x3688 <_ZN14HardwareSerial5writeEh+0x4e>
    if (bit_is_clear(SREG, SREG_I)) {
    3670:	0f b6       	in	r0, 0x3f	; 63
    3672:	07 fc       	sbrc	r0, 7
    3674:	fa cf       	rjmp	.-12     	; 0x366a <_ZN14HardwareSerial5writeEh+0x30>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3676:	e8 89       	ldd	r30, Y+16	; 0x10
    3678:	f9 89       	ldd	r31, Y+17	; 0x11
    367a:	80 81       	ld	r24, Z
    367c:	85 ff       	sbrs	r24, 5
    367e:	f5 cf       	rjmp	.-22     	; 0x366a <_ZN14HardwareSerial5writeEh+0x30>
	_tx_udr_empty_irq();
    3680:	ce 01       	movw	r24, r28
    3682:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3686:	f1 cf       	rjmp	.-30     	; 0x366a <_ZN14HardwareSerial5writeEh+0x30>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3688:	8b 8d       	ldd	r24, Y+27	; 0x1b
    368a:	fe 01       	movw	r30, r28
    368c:	e8 0f       	add	r30, r24
    368e:	f1 1d       	adc	r31, r1
    3690:	e3 5a       	subi	r30, 0xA3	; 163
    3692:	ff 4f       	sbci	r31, 0xFF	; 255
    3694:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3696:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3698:	f8 94       	cli
    _tx_buffer_head = i;
    369a:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    369c:	ea 89       	ldd	r30, Y+18	; 0x12
    369e:	fb 89       	ldd	r31, Y+19	; 0x13
    36a0:	80 81       	ld	r24, Z
    36a2:	80 62       	ori	r24, 0x20	; 32
    36a4:	0a c0       	rjmp	.+20     	; 0x36ba <_ZN14HardwareSerial5writeEh+0x80>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    36a6:	9f b7       	in	r25, 0x3f	; 63
    36a8:	f8 94       	cli
      *_udr = c;
    36aa:	ee 89       	ldd	r30, Y+22	; 0x16
    36ac:	ff 89       	ldd	r31, Y+23	; 0x17
    36ae:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    36b0:	e8 89       	ldd	r30, Y+16	; 0x10
    36b2:	f9 89       	ldd	r31, Y+17	; 0x11
    36b4:	80 81       	ld	r24, Z
    36b6:	83 70       	andi	r24, 0x03	; 3
    36b8:	80 64       	ori	r24, 0x40	; 64
    36ba:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    36bc:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    36be:	81 e0       	ldi	r24, 0x01	; 1
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	df 91       	pop	r29
    36c4:	cf 91       	pop	r28
    36c6:	1f 91       	pop	r17
    36c8:	0f 91       	pop	r16
    36ca:	ff 90       	pop	r15
    36cc:	ef 90       	pop	r14
    36ce:	08 95       	ret

000036d0 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    36d0:	cf 93       	push	r28
    36d2:	df 93       	push	r29
    36d4:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    36d6:	88 8d       	ldd	r24, Y+24	; 0x18
    36d8:	88 23       	and	r24, r24
    36da:	c9 f0       	breq	.+50     	; 0x370e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    36dc:	ea 89       	ldd	r30, Y+18	; 0x12
    36de:	fb 89       	ldd	r31, Y+19	; 0x13
    36e0:	80 81       	ld	r24, Z
    36e2:	85 fd       	sbrc	r24, 5
    36e4:	05 c0       	rjmp	.+10     	; 0x36f0 <_ZN14HardwareSerial5flushEv+0x20>
    36e6:	a8 89       	ldd	r26, Y+16	; 0x10
    36e8:	b9 89       	ldd	r27, Y+17	; 0x11
    36ea:	8c 91       	ld	r24, X
    36ec:	86 fd       	sbrc	r24, 6
    36ee:	0f c0       	rjmp	.+30     	; 0x370e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    36f0:	0f b6       	in	r0, 0x3f	; 63
    36f2:	07 fc       	sbrc	r0, 7
    36f4:	f5 cf       	rjmp	.-22     	; 0x36e0 <_ZN14HardwareSerial5flushEv+0x10>
    36f6:	80 81       	ld	r24, Z
    36f8:	85 ff       	sbrs	r24, 5
    36fa:	f2 cf       	rjmp	.-28     	; 0x36e0 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    36fc:	a8 89       	ldd	r26, Y+16	; 0x10
    36fe:	b9 89       	ldd	r27, Y+17	; 0x11
    3700:	8c 91       	ld	r24, X
    3702:	85 ff       	sbrs	r24, 5
    3704:	ed cf       	rjmp	.-38     	; 0x36e0 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    3706:	ce 01       	movw	r24, r28
    3708:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    370c:	e7 cf       	rjmp	.-50     	; 0x36dc <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    370e:	df 91       	pop	r29
    3710:	cf 91       	pop	r28
    3712:	08 95       	ret

00003714 <__udivmodsi4>:
    3714:	a1 e2       	ldi	r26, 0x21	; 33
    3716:	1a 2e       	mov	r1, r26
    3718:	aa 1b       	sub	r26, r26
    371a:	bb 1b       	sub	r27, r27
    371c:	fd 01       	movw	r30, r26
    371e:	0d c0       	rjmp	.+26     	; 0x373a <__udivmodsi4_ep>

00003720 <__udivmodsi4_loop>:
    3720:	aa 1f       	adc	r26, r26
    3722:	bb 1f       	adc	r27, r27
    3724:	ee 1f       	adc	r30, r30
    3726:	ff 1f       	adc	r31, r31
    3728:	a2 17       	cp	r26, r18
    372a:	b3 07       	cpc	r27, r19
    372c:	e4 07       	cpc	r30, r20
    372e:	f5 07       	cpc	r31, r21
    3730:	20 f0       	brcs	.+8      	; 0x373a <__udivmodsi4_ep>
    3732:	a2 1b       	sub	r26, r18
    3734:	b3 0b       	sbc	r27, r19
    3736:	e4 0b       	sbc	r30, r20
    3738:	f5 0b       	sbc	r31, r21

0000373a <__udivmodsi4_ep>:
    373a:	66 1f       	adc	r22, r22
    373c:	77 1f       	adc	r23, r23
    373e:	88 1f       	adc	r24, r24
    3740:	99 1f       	adc	r25, r25
    3742:	1a 94       	dec	r1
    3744:	69 f7       	brne	.-38     	; 0x3720 <__udivmodsi4_loop>
    3746:	60 95       	com	r22
    3748:	70 95       	com	r23
    374a:	80 95       	com	r24
    374c:	90 95       	com	r25
    374e:	9b 01       	movw	r18, r22
    3750:	ac 01       	movw	r20, r24
    3752:	bd 01       	movw	r22, r26
    3754:	cf 01       	movw	r24, r30
    3756:	08 95       	ret

00003758 <__divmodsi4>:
    3758:	05 2e       	mov	r0, r21
    375a:	97 fb       	bst	r25, 7
    375c:	1e f4       	brtc	.+6      	; 0x3764 <__divmodsi4+0xc>
    375e:	00 94       	com	r0
    3760:	0e 94 c3 1b 	call	0x3786	; 0x3786 <__negsi2>
    3764:	57 fd       	sbrc	r21, 7
    3766:	07 d0       	rcall	.+14     	; 0x3776 <__divmodsi4_neg2>
    3768:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__udivmodsi4>
    376c:	07 fc       	sbrc	r0, 7
    376e:	03 d0       	rcall	.+6      	; 0x3776 <__divmodsi4_neg2>
    3770:	4e f4       	brtc	.+18     	; 0x3784 <__divmodsi4_exit>
    3772:	0c 94 c3 1b 	jmp	0x3786	; 0x3786 <__negsi2>

00003776 <__divmodsi4_neg2>:
    3776:	50 95       	com	r21
    3778:	40 95       	com	r20
    377a:	30 95       	com	r19
    377c:	21 95       	neg	r18
    377e:	3f 4f       	sbci	r19, 0xFF	; 255
    3780:	4f 4f       	sbci	r20, 0xFF	; 255
    3782:	5f 4f       	sbci	r21, 0xFF	; 255

00003784 <__divmodsi4_exit>:
    3784:	08 95       	ret

00003786 <__negsi2>:
    3786:	90 95       	com	r25
    3788:	80 95       	com	r24
    378a:	70 95       	com	r23
    378c:	61 95       	neg	r22
    378e:	7f 4f       	sbci	r23, 0xFF	; 255
    3790:	8f 4f       	sbci	r24, 0xFF	; 255
    3792:	9f 4f       	sbci	r25, 0xFF	; 255
    3794:	08 95       	ret

00003796 <__muluhisi3>:
    3796:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <__umulhisi3>
    379a:	a5 9f       	mul	r26, r21
    379c:	90 0d       	add	r25, r0
    379e:	b4 9f       	mul	r27, r20
    37a0:	90 0d       	add	r25, r0
    37a2:	a4 9f       	mul	r26, r20
    37a4:	80 0d       	add	r24, r0
    37a6:	91 1d       	adc	r25, r1
    37a8:	11 24       	eor	r1, r1
    37aa:	08 95       	ret

000037ac <__tablejump2__>:
    37ac:	ee 0f       	add	r30, r30
    37ae:	ff 1f       	adc	r31, r31
    37b0:	05 90       	lpm	r0, Z+
    37b2:	f4 91       	lpm	r31, Z
    37b4:	e0 2d       	mov	r30, r0
    37b6:	09 94       	ijmp

000037b8 <__umulhisi3>:
    37b8:	a2 9f       	mul	r26, r18
    37ba:	b0 01       	movw	r22, r0
    37bc:	b3 9f       	mul	r27, r19
    37be:	c0 01       	movw	r24, r0
    37c0:	a3 9f       	mul	r26, r19
    37c2:	70 0d       	add	r23, r0
    37c4:	81 1d       	adc	r24, r1
    37c6:	11 24       	eor	r1, r1
    37c8:	91 1d       	adc	r25, r1
    37ca:	b2 9f       	mul	r27, r18
    37cc:	70 0d       	add	r23, r0
    37ce:	81 1d       	adc	r24, r1
    37d0:	11 24       	eor	r1, r1
    37d2:	91 1d       	adc	r25, r1
    37d4:	08 95       	ret

000037d6 <malloc>:
    37d6:	0f 93       	push	r16
    37d8:	1f 93       	push	r17
    37da:	cf 93       	push	r28
    37dc:	df 93       	push	r29
    37de:	82 30       	cpi	r24, 0x02	; 2
    37e0:	91 05       	cpc	r25, r1
    37e2:	10 f4       	brcc	.+4      	; 0x37e8 <malloc+0x12>
    37e4:	82 e0       	ldi	r24, 0x02	; 2
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	e0 91 4c 07 	lds	r30, 0x074C	; 0x80074c <__flp>
    37ec:	f0 91 4d 07 	lds	r31, 0x074D	; 0x80074d <__flp+0x1>
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	a0 e0       	ldi	r26, 0x00	; 0
    37f6:	b0 e0       	ldi	r27, 0x00	; 0
    37f8:	30 97       	sbiw	r30, 0x00	; 0
    37fa:	19 f1       	breq	.+70     	; 0x3842 <malloc+0x6c>
    37fc:	40 81       	ld	r20, Z
    37fe:	51 81       	ldd	r21, Z+1	; 0x01
    3800:	02 81       	ldd	r16, Z+2	; 0x02
    3802:	13 81       	ldd	r17, Z+3	; 0x03
    3804:	48 17       	cp	r20, r24
    3806:	59 07       	cpc	r21, r25
    3808:	c8 f0       	brcs	.+50     	; 0x383c <malloc+0x66>
    380a:	84 17       	cp	r24, r20
    380c:	95 07       	cpc	r25, r21
    380e:	69 f4       	brne	.+26     	; 0x382a <malloc+0x54>
    3810:	10 97       	sbiw	r26, 0x00	; 0
    3812:	31 f0       	breq	.+12     	; 0x3820 <malloc+0x4a>
    3814:	12 96       	adiw	r26, 0x02	; 2
    3816:	0c 93       	st	X, r16
    3818:	12 97       	sbiw	r26, 0x02	; 2
    381a:	13 96       	adiw	r26, 0x03	; 3
    381c:	1c 93       	st	X, r17
    381e:	27 c0       	rjmp	.+78     	; 0x386e <malloc+0x98>
    3820:	00 93 4c 07 	sts	0x074C, r16	; 0x80074c <__flp>
    3824:	10 93 4d 07 	sts	0x074D, r17	; 0x80074d <__flp+0x1>
    3828:	22 c0       	rjmp	.+68     	; 0x386e <malloc+0x98>
    382a:	21 15       	cp	r18, r1
    382c:	31 05       	cpc	r19, r1
    382e:	19 f0       	breq	.+6      	; 0x3836 <malloc+0x60>
    3830:	42 17       	cp	r20, r18
    3832:	53 07       	cpc	r21, r19
    3834:	18 f4       	brcc	.+6      	; 0x383c <malloc+0x66>
    3836:	9a 01       	movw	r18, r20
    3838:	bd 01       	movw	r22, r26
    383a:	ef 01       	movw	r28, r30
    383c:	df 01       	movw	r26, r30
    383e:	f8 01       	movw	r30, r16
    3840:	db cf       	rjmp	.-74     	; 0x37f8 <malloc+0x22>
    3842:	21 15       	cp	r18, r1
    3844:	31 05       	cpc	r19, r1
    3846:	f9 f0       	breq	.+62     	; 0x3886 <malloc+0xb0>
    3848:	28 1b       	sub	r18, r24
    384a:	39 0b       	sbc	r19, r25
    384c:	24 30       	cpi	r18, 0x04	; 4
    384e:	31 05       	cpc	r19, r1
    3850:	80 f4       	brcc	.+32     	; 0x3872 <malloc+0x9c>
    3852:	8a 81       	ldd	r24, Y+2	; 0x02
    3854:	9b 81       	ldd	r25, Y+3	; 0x03
    3856:	61 15       	cp	r22, r1
    3858:	71 05       	cpc	r23, r1
    385a:	21 f0       	breq	.+8      	; 0x3864 <malloc+0x8e>
    385c:	fb 01       	movw	r30, r22
    385e:	93 83       	std	Z+3, r25	; 0x03
    3860:	82 83       	std	Z+2, r24	; 0x02
    3862:	04 c0       	rjmp	.+8      	; 0x386c <malloc+0x96>
    3864:	90 93 4d 07 	sts	0x074D, r25	; 0x80074d <__flp+0x1>
    3868:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <__flp>
    386c:	fe 01       	movw	r30, r28
    386e:	32 96       	adiw	r30, 0x02	; 2
    3870:	44 c0       	rjmp	.+136    	; 0x38fa <malloc+0x124>
    3872:	fe 01       	movw	r30, r28
    3874:	e2 0f       	add	r30, r18
    3876:	f3 1f       	adc	r31, r19
    3878:	81 93       	st	Z+, r24
    387a:	91 93       	st	Z+, r25
    387c:	22 50       	subi	r18, 0x02	; 2
    387e:	31 09       	sbc	r19, r1
    3880:	39 83       	std	Y+1, r19	; 0x01
    3882:	28 83       	st	Y, r18
    3884:	3a c0       	rjmp	.+116    	; 0x38fa <malloc+0x124>
    3886:	20 91 4a 07 	lds	r18, 0x074A	; 0x80074a <__brkval>
    388a:	30 91 4b 07 	lds	r19, 0x074B	; 0x80074b <__brkval+0x1>
    388e:	23 2b       	or	r18, r19
    3890:	41 f4       	brne	.+16     	; 0x38a2 <malloc+0xcc>
    3892:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3896:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    389a:	30 93 4b 07 	sts	0x074B, r19	; 0x80074b <__brkval+0x1>
    389e:	20 93 4a 07 	sts	0x074A, r18	; 0x80074a <__brkval>
    38a2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    38a6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    38aa:	21 15       	cp	r18, r1
    38ac:	31 05       	cpc	r19, r1
    38ae:	41 f4       	brne	.+16     	; 0x38c0 <malloc+0xea>
    38b0:	2d b7       	in	r18, 0x3d	; 61
    38b2:	3e b7       	in	r19, 0x3e	; 62
    38b4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    38b8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    38bc:	24 1b       	sub	r18, r20
    38be:	35 0b       	sbc	r19, r21
    38c0:	e0 91 4a 07 	lds	r30, 0x074A	; 0x80074a <__brkval>
    38c4:	f0 91 4b 07 	lds	r31, 0x074B	; 0x80074b <__brkval+0x1>
    38c8:	e2 17       	cp	r30, r18
    38ca:	f3 07       	cpc	r31, r19
    38cc:	a0 f4       	brcc	.+40     	; 0x38f6 <malloc+0x120>
    38ce:	2e 1b       	sub	r18, r30
    38d0:	3f 0b       	sbc	r19, r31
    38d2:	28 17       	cp	r18, r24
    38d4:	39 07       	cpc	r19, r25
    38d6:	78 f0       	brcs	.+30     	; 0x38f6 <malloc+0x120>
    38d8:	ac 01       	movw	r20, r24
    38da:	4e 5f       	subi	r20, 0xFE	; 254
    38dc:	5f 4f       	sbci	r21, 0xFF	; 255
    38de:	24 17       	cp	r18, r20
    38e0:	35 07       	cpc	r19, r21
    38e2:	48 f0       	brcs	.+18     	; 0x38f6 <malloc+0x120>
    38e4:	4e 0f       	add	r20, r30
    38e6:	5f 1f       	adc	r21, r31
    38e8:	50 93 4b 07 	sts	0x074B, r21	; 0x80074b <__brkval+0x1>
    38ec:	40 93 4a 07 	sts	0x074A, r20	; 0x80074a <__brkval>
    38f0:	81 93       	st	Z+, r24
    38f2:	91 93       	st	Z+, r25
    38f4:	02 c0       	rjmp	.+4      	; 0x38fa <malloc+0x124>
    38f6:	e0 e0       	ldi	r30, 0x00	; 0
    38f8:	f0 e0       	ldi	r31, 0x00	; 0
    38fa:	cf 01       	movw	r24, r30
    38fc:	df 91       	pop	r29
    38fe:	cf 91       	pop	r28
    3900:	1f 91       	pop	r17
    3902:	0f 91       	pop	r16
    3904:	08 95       	ret

00003906 <free>:
    3906:	cf 93       	push	r28
    3908:	df 93       	push	r29
    390a:	00 97       	sbiw	r24, 0x00	; 0
    390c:	09 f4       	brne	.+2      	; 0x3910 <free+0xa>
    390e:	81 c0       	rjmp	.+258    	; 0x3a12 <free+0x10c>
    3910:	fc 01       	movw	r30, r24
    3912:	32 97       	sbiw	r30, 0x02	; 2
    3914:	13 82       	std	Z+3, r1	; 0x03
    3916:	12 82       	std	Z+2, r1	; 0x02
    3918:	a0 91 4c 07 	lds	r26, 0x074C	; 0x80074c <__flp>
    391c:	b0 91 4d 07 	lds	r27, 0x074D	; 0x80074d <__flp+0x1>
    3920:	10 97       	sbiw	r26, 0x00	; 0
    3922:	81 f4       	brne	.+32     	; 0x3944 <free+0x3e>
    3924:	20 81       	ld	r18, Z
    3926:	31 81       	ldd	r19, Z+1	; 0x01
    3928:	82 0f       	add	r24, r18
    392a:	93 1f       	adc	r25, r19
    392c:	20 91 4a 07 	lds	r18, 0x074A	; 0x80074a <__brkval>
    3930:	30 91 4b 07 	lds	r19, 0x074B	; 0x80074b <__brkval+0x1>
    3934:	28 17       	cp	r18, r24
    3936:	39 07       	cpc	r19, r25
    3938:	51 f5       	brne	.+84     	; 0x398e <free+0x88>
    393a:	f0 93 4b 07 	sts	0x074B, r31	; 0x80074b <__brkval+0x1>
    393e:	e0 93 4a 07 	sts	0x074A, r30	; 0x80074a <__brkval>
    3942:	67 c0       	rjmp	.+206    	; 0x3a12 <free+0x10c>
    3944:	ed 01       	movw	r28, r26
    3946:	20 e0       	ldi	r18, 0x00	; 0
    3948:	30 e0       	ldi	r19, 0x00	; 0
    394a:	ce 17       	cp	r28, r30
    394c:	df 07       	cpc	r29, r31
    394e:	40 f4       	brcc	.+16     	; 0x3960 <free+0x5a>
    3950:	4a 81       	ldd	r20, Y+2	; 0x02
    3952:	5b 81       	ldd	r21, Y+3	; 0x03
    3954:	9e 01       	movw	r18, r28
    3956:	41 15       	cp	r20, r1
    3958:	51 05       	cpc	r21, r1
    395a:	f1 f0       	breq	.+60     	; 0x3998 <free+0x92>
    395c:	ea 01       	movw	r28, r20
    395e:	f5 cf       	rjmp	.-22     	; 0x394a <free+0x44>
    3960:	d3 83       	std	Z+3, r29	; 0x03
    3962:	c2 83       	std	Z+2, r28	; 0x02
    3964:	40 81       	ld	r20, Z
    3966:	51 81       	ldd	r21, Z+1	; 0x01
    3968:	84 0f       	add	r24, r20
    396a:	95 1f       	adc	r25, r21
    396c:	c8 17       	cp	r28, r24
    396e:	d9 07       	cpc	r29, r25
    3970:	59 f4       	brne	.+22     	; 0x3988 <free+0x82>
    3972:	88 81       	ld	r24, Y
    3974:	99 81       	ldd	r25, Y+1	; 0x01
    3976:	84 0f       	add	r24, r20
    3978:	95 1f       	adc	r25, r21
    397a:	02 96       	adiw	r24, 0x02	; 2
    397c:	91 83       	std	Z+1, r25	; 0x01
    397e:	80 83       	st	Z, r24
    3980:	8a 81       	ldd	r24, Y+2	; 0x02
    3982:	9b 81       	ldd	r25, Y+3	; 0x03
    3984:	93 83       	std	Z+3, r25	; 0x03
    3986:	82 83       	std	Z+2, r24	; 0x02
    3988:	21 15       	cp	r18, r1
    398a:	31 05       	cpc	r19, r1
    398c:	29 f4       	brne	.+10     	; 0x3998 <free+0x92>
    398e:	f0 93 4d 07 	sts	0x074D, r31	; 0x80074d <__flp+0x1>
    3992:	e0 93 4c 07 	sts	0x074C, r30	; 0x80074c <__flp>
    3996:	3d c0       	rjmp	.+122    	; 0x3a12 <free+0x10c>
    3998:	e9 01       	movw	r28, r18
    399a:	fb 83       	std	Y+3, r31	; 0x03
    399c:	ea 83       	std	Y+2, r30	; 0x02
    399e:	49 91       	ld	r20, Y+
    39a0:	59 91       	ld	r21, Y+
    39a2:	c4 0f       	add	r28, r20
    39a4:	d5 1f       	adc	r29, r21
    39a6:	ec 17       	cp	r30, r28
    39a8:	fd 07       	cpc	r31, r29
    39aa:	61 f4       	brne	.+24     	; 0x39c4 <free+0xbe>
    39ac:	80 81       	ld	r24, Z
    39ae:	91 81       	ldd	r25, Z+1	; 0x01
    39b0:	84 0f       	add	r24, r20
    39b2:	95 1f       	adc	r25, r21
    39b4:	02 96       	adiw	r24, 0x02	; 2
    39b6:	e9 01       	movw	r28, r18
    39b8:	99 83       	std	Y+1, r25	; 0x01
    39ba:	88 83       	st	Y, r24
    39bc:	82 81       	ldd	r24, Z+2	; 0x02
    39be:	93 81       	ldd	r25, Z+3	; 0x03
    39c0:	9b 83       	std	Y+3, r25	; 0x03
    39c2:	8a 83       	std	Y+2, r24	; 0x02
    39c4:	e0 e0       	ldi	r30, 0x00	; 0
    39c6:	f0 e0       	ldi	r31, 0x00	; 0
    39c8:	12 96       	adiw	r26, 0x02	; 2
    39ca:	8d 91       	ld	r24, X+
    39cc:	9c 91       	ld	r25, X
    39ce:	13 97       	sbiw	r26, 0x03	; 3
    39d0:	00 97       	sbiw	r24, 0x00	; 0
    39d2:	19 f0       	breq	.+6      	; 0x39da <free+0xd4>
    39d4:	fd 01       	movw	r30, r26
    39d6:	dc 01       	movw	r26, r24
    39d8:	f7 cf       	rjmp	.-18     	; 0x39c8 <free+0xc2>
    39da:	8d 91       	ld	r24, X+
    39dc:	9c 91       	ld	r25, X
    39de:	11 97       	sbiw	r26, 0x01	; 1
    39e0:	9d 01       	movw	r18, r26
    39e2:	2e 5f       	subi	r18, 0xFE	; 254
    39e4:	3f 4f       	sbci	r19, 0xFF	; 255
    39e6:	82 0f       	add	r24, r18
    39e8:	93 1f       	adc	r25, r19
    39ea:	20 91 4a 07 	lds	r18, 0x074A	; 0x80074a <__brkval>
    39ee:	30 91 4b 07 	lds	r19, 0x074B	; 0x80074b <__brkval+0x1>
    39f2:	28 17       	cp	r18, r24
    39f4:	39 07       	cpc	r19, r25
    39f6:	69 f4       	brne	.+26     	; 0x3a12 <free+0x10c>
    39f8:	30 97       	sbiw	r30, 0x00	; 0
    39fa:	29 f4       	brne	.+10     	; 0x3a06 <free+0x100>
    39fc:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <__flp+0x1>
    3a00:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <__flp>
    3a04:	02 c0       	rjmp	.+4      	; 0x3a0a <free+0x104>
    3a06:	13 82       	std	Z+3, r1	; 0x03
    3a08:	12 82       	std	Z+2, r1	; 0x02
    3a0a:	b0 93 4b 07 	sts	0x074B, r27	; 0x80074b <__brkval+0x1>
    3a0e:	a0 93 4a 07 	sts	0x074A, r26	; 0x80074a <__brkval>
    3a12:	df 91       	pop	r29
    3a14:	cf 91       	pop	r28
    3a16:	08 95       	ret

00003a18 <realloc>:
    3a18:	a0 e0       	ldi	r26, 0x00	; 0
    3a1a:	b0 e0       	ldi	r27, 0x00	; 0
    3a1c:	e2 e1       	ldi	r30, 0x12	; 18
    3a1e:	fd e1       	ldi	r31, 0x1D	; 29
    3a20:	0c 94 0d 1e 	jmp	0x3c1a	; 0x3c1a <__prologue_saves__+0x8>
    3a24:	ec 01       	movw	r28, r24
    3a26:	00 97       	sbiw	r24, 0x00	; 0
    3a28:	21 f4       	brne	.+8      	; 0x3a32 <realloc+0x1a>
    3a2a:	cb 01       	movw	r24, r22
    3a2c:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <malloc>
    3a30:	b4 c0       	rjmp	.+360    	; 0x3b9a <realloc+0x182>
    3a32:	fc 01       	movw	r30, r24
    3a34:	e6 0f       	add	r30, r22
    3a36:	f7 1f       	adc	r31, r23
    3a38:	9c 01       	movw	r18, r24
    3a3a:	22 50       	subi	r18, 0x02	; 2
    3a3c:	31 09       	sbc	r19, r1
    3a3e:	e2 17       	cp	r30, r18
    3a40:	f3 07       	cpc	r31, r19
    3a42:	08 f4       	brcc	.+2      	; 0x3a46 <realloc+0x2e>
    3a44:	a8 c0       	rjmp	.+336    	; 0x3b96 <realloc+0x17e>
    3a46:	d9 01       	movw	r26, r18
    3a48:	0d 91       	ld	r16, X+
    3a4a:	1c 91       	ld	r17, X
    3a4c:	11 97       	sbiw	r26, 0x01	; 1
    3a4e:	06 17       	cp	r16, r22
    3a50:	17 07       	cpc	r17, r23
    3a52:	b0 f0       	brcs	.+44     	; 0x3a80 <realloc+0x68>
    3a54:	05 30       	cpi	r16, 0x05	; 5
    3a56:	11 05       	cpc	r17, r1
    3a58:	08 f4       	brcc	.+2      	; 0x3a5c <realloc+0x44>
    3a5a:	9b c0       	rjmp	.+310    	; 0x3b92 <realloc+0x17a>
    3a5c:	c8 01       	movw	r24, r16
    3a5e:	04 97       	sbiw	r24, 0x04	; 4
    3a60:	86 17       	cp	r24, r22
    3a62:	97 07       	cpc	r25, r23
    3a64:	08 f4       	brcc	.+2      	; 0x3a68 <realloc+0x50>
    3a66:	95 c0       	rjmp	.+298    	; 0x3b92 <realloc+0x17a>
    3a68:	02 50       	subi	r16, 0x02	; 2
    3a6a:	11 09       	sbc	r17, r1
    3a6c:	06 1b       	sub	r16, r22
    3a6e:	17 0b       	sbc	r17, r23
    3a70:	01 93       	st	Z+, r16
    3a72:	11 93       	st	Z+, r17
    3a74:	6d 93       	st	X+, r22
    3a76:	7c 93       	st	X, r23
    3a78:	cf 01       	movw	r24, r30
    3a7a:	0e 94 83 1c 	call	0x3906	; 0x3906 <free>
    3a7e:	89 c0       	rjmp	.+274    	; 0x3b92 <realloc+0x17a>
    3a80:	5b 01       	movw	r10, r22
    3a82:	a0 1a       	sub	r10, r16
    3a84:	b1 0a       	sbc	r11, r17
    3a86:	4c 01       	movw	r8, r24
    3a88:	80 0e       	add	r8, r16
    3a8a:	91 1e       	adc	r9, r17
    3a8c:	a0 91 4c 07 	lds	r26, 0x074C	; 0x80074c <__flp>
    3a90:	b0 91 4d 07 	lds	r27, 0x074D	; 0x80074d <__flp+0x1>
    3a94:	61 2c       	mov	r6, r1
    3a96:	71 2c       	mov	r7, r1
    3a98:	e1 2c       	mov	r14, r1
    3a9a:	f1 2c       	mov	r15, r1
    3a9c:	10 97       	sbiw	r26, 0x00	; 0
    3a9e:	09 f4       	brne	.+2      	; 0x3aa2 <realloc+0x8a>
    3aa0:	46 c0       	rjmp	.+140    	; 0x3b2e <realloc+0x116>
    3aa2:	8d 91       	ld	r24, X+
    3aa4:	9c 91       	ld	r25, X
    3aa6:	11 97       	sbiw	r26, 0x01	; 1
    3aa8:	a8 15       	cp	r26, r8
    3aaa:	b9 05       	cpc	r27, r9
    3aac:	b1 f5       	brne	.+108    	; 0x3b1a <realloc+0x102>
    3aae:	6c 01       	movw	r12, r24
    3ab0:	42 e0       	ldi	r20, 0x02	; 2
    3ab2:	c4 0e       	add	r12, r20
    3ab4:	d1 1c       	adc	r13, r1
    3ab6:	ca 14       	cp	r12, r10
    3ab8:	db 04       	cpc	r13, r11
    3aba:	78 f1       	brcs	.+94     	; 0x3b1a <realloc+0x102>
    3abc:	4c 01       	movw	r8, r24
    3abe:	8a 18       	sub	r8, r10
    3ac0:	9b 08       	sbc	r9, r11
    3ac2:	64 01       	movw	r12, r8
    3ac4:	42 e0       	ldi	r20, 0x02	; 2
    3ac6:	c4 0e       	add	r12, r20
    3ac8:	d1 1c       	adc	r13, r1
    3aca:	12 96       	adiw	r26, 0x02	; 2
    3acc:	bc 90       	ld	r11, X
    3ace:	12 97       	sbiw	r26, 0x02	; 2
    3ad0:	13 96       	adiw	r26, 0x03	; 3
    3ad2:	ac 91       	ld	r26, X
    3ad4:	b5 e0       	ldi	r27, 0x05	; 5
    3ad6:	cb 16       	cp	r12, r27
    3ad8:	d1 04       	cpc	r13, r1
    3ada:	40 f0       	brcs	.+16     	; 0x3aec <realloc+0xd4>
    3adc:	b2 82       	std	Z+2, r11	; 0x02
    3ade:	a3 83       	std	Z+3, r26	; 0x03
    3ae0:	91 82       	std	Z+1, r9	; 0x01
    3ae2:	80 82       	st	Z, r8
    3ae4:	d9 01       	movw	r26, r18
    3ae6:	6d 93       	st	X+, r22
    3ae8:	7c 93       	st	X, r23
    3aea:	09 c0       	rjmp	.+18     	; 0x3afe <realloc+0xe6>
    3aec:	0e 5f       	subi	r16, 0xFE	; 254
    3aee:	1f 4f       	sbci	r17, 0xFF	; 255
    3af0:	80 0f       	add	r24, r16
    3af2:	91 1f       	adc	r25, r17
    3af4:	f9 01       	movw	r30, r18
    3af6:	91 83       	std	Z+1, r25	; 0x01
    3af8:	80 83       	st	Z, r24
    3afa:	eb 2d       	mov	r30, r11
    3afc:	fa 2f       	mov	r31, r26
    3afe:	e1 14       	cp	r14, r1
    3b00:	f1 04       	cpc	r15, r1
    3b02:	31 f0       	breq	.+12     	; 0x3b10 <realloc+0xf8>
    3b04:	d7 01       	movw	r26, r14
    3b06:	13 96       	adiw	r26, 0x03	; 3
    3b08:	fc 93       	st	X, r31
    3b0a:	ee 93       	st	-X, r30
    3b0c:	12 97       	sbiw	r26, 0x02	; 2
    3b0e:	41 c0       	rjmp	.+130    	; 0x3b92 <realloc+0x17a>
    3b10:	f0 93 4d 07 	sts	0x074D, r31	; 0x80074d <__flp+0x1>
    3b14:	e0 93 4c 07 	sts	0x074C, r30	; 0x80074c <__flp>
    3b18:	3c c0       	rjmp	.+120    	; 0x3b92 <realloc+0x17a>
    3b1a:	68 16       	cp	r6, r24
    3b1c:	79 06       	cpc	r7, r25
    3b1e:	08 f4       	brcc	.+2      	; 0x3b22 <realloc+0x10a>
    3b20:	3c 01       	movw	r6, r24
    3b22:	7d 01       	movw	r14, r26
    3b24:	12 96       	adiw	r26, 0x02	; 2
    3b26:	0d 90       	ld	r0, X+
    3b28:	bc 91       	ld	r27, X
    3b2a:	a0 2d       	mov	r26, r0
    3b2c:	b7 cf       	rjmp	.-146    	; 0x3a9c <realloc+0x84>
    3b2e:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__brkval>
    3b32:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__brkval+0x1>
    3b36:	88 16       	cp	r8, r24
    3b38:	99 06       	cpc	r9, r25
    3b3a:	e1 f4       	brne	.+56     	; 0x3b74 <realloc+0x15c>
    3b3c:	66 16       	cp	r6, r22
    3b3e:	77 06       	cpc	r7, r23
    3b40:	c8 f4       	brcc	.+50     	; 0x3b74 <realloc+0x15c>
    3b42:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    3b46:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    3b4a:	00 97       	sbiw	r24, 0x00	; 0
    3b4c:	41 f4       	brne	.+16     	; 0x3b5e <realloc+0x146>
    3b4e:	8d b7       	in	r24, 0x3d	; 61
    3b50:	9e b7       	in	r25, 0x3e	; 62
    3b52:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3b56:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3b5a:	84 1b       	sub	r24, r20
    3b5c:	95 0b       	sbc	r25, r21
    3b5e:	e8 17       	cp	r30, r24
    3b60:	f9 07       	cpc	r31, r25
    3b62:	c8 f4       	brcc	.+50     	; 0x3b96 <realloc+0x17e>
    3b64:	f0 93 4b 07 	sts	0x074B, r31	; 0x80074b <__brkval+0x1>
    3b68:	e0 93 4a 07 	sts	0x074A, r30	; 0x80074a <__brkval>
    3b6c:	f9 01       	movw	r30, r18
    3b6e:	71 83       	std	Z+1, r23	; 0x01
    3b70:	60 83       	st	Z, r22
    3b72:	0f c0       	rjmp	.+30     	; 0x3b92 <realloc+0x17a>
    3b74:	cb 01       	movw	r24, r22
    3b76:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <malloc>
    3b7a:	7c 01       	movw	r14, r24
    3b7c:	00 97       	sbiw	r24, 0x00	; 0
    3b7e:	59 f0       	breq	.+22     	; 0x3b96 <realloc+0x17e>
    3b80:	a8 01       	movw	r20, r16
    3b82:	be 01       	movw	r22, r28
    3b84:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <memcpy>
    3b88:	ce 01       	movw	r24, r28
    3b8a:	0e 94 83 1c 	call	0x3906	; 0x3906 <free>
    3b8e:	c7 01       	movw	r24, r14
    3b90:	04 c0       	rjmp	.+8      	; 0x3b9a <realloc+0x182>
    3b92:	ce 01       	movw	r24, r28
    3b94:	02 c0       	rjmp	.+4      	; 0x3b9a <realloc+0x182>
    3b96:	80 e0       	ldi	r24, 0x00	; 0
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	cd b7       	in	r28, 0x3d	; 61
    3b9c:	de b7       	in	r29, 0x3e	; 62
    3b9e:	ee e0       	ldi	r30, 0x0E	; 14
    3ba0:	0c 94 29 1e 	jmp	0x3c52	; 0x3c52 <__epilogue_restores__+0x8>

00003ba4 <memcmp>:
    3ba4:	fb 01       	movw	r30, r22
    3ba6:	dc 01       	movw	r26, r24
    3ba8:	04 c0       	rjmp	.+8      	; 0x3bb2 <memcmp+0xe>
    3baa:	8d 91       	ld	r24, X+
    3bac:	01 90       	ld	r0, Z+
    3bae:	80 19       	sub	r24, r0
    3bb0:	21 f4       	brne	.+8      	; 0x3bba <memcmp+0x16>
    3bb2:	41 50       	subi	r20, 0x01	; 1
    3bb4:	50 40       	sbci	r21, 0x00	; 0
    3bb6:	c8 f7       	brcc	.-14     	; 0x3baa <memcmp+0x6>
    3bb8:	88 1b       	sub	r24, r24
    3bba:	99 0b       	sbc	r25, r25
    3bbc:	08 95       	ret

00003bbe <memcpy>:
    3bbe:	fb 01       	movw	r30, r22
    3bc0:	dc 01       	movw	r26, r24
    3bc2:	02 c0       	rjmp	.+4      	; 0x3bc8 <memcpy+0xa>
    3bc4:	01 90       	ld	r0, Z+
    3bc6:	0d 92       	st	X+, r0
    3bc8:	41 50       	subi	r20, 0x01	; 1
    3bca:	50 40       	sbci	r21, 0x00	; 0
    3bcc:	d8 f7       	brcc	.-10     	; 0x3bc4 <memcpy+0x6>
    3bce:	08 95       	ret

00003bd0 <strchr>:
    3bd0:	fc 01       	movw	r30, r24
    3bd2:	81 91       	ld	r24, Z+
    3bd4:	86 17       	cp	r24, r22
    3bd6:	21 f0       	breq	.+8      	; 0x3be0 <strchr+0x10>
    3bd8:	88 23       	and	r24, r24
    3bda:	d9 f7       	brne	.-10     	; 0x3bd2 <strchr+0x2>
    3bdc:	99 27       	eor	r25, r25
    3bde:	08 95       	ret
    3be0:	31 97       	sbiw	r30, 0x01	; 1
    3be2:	cf 01       	movw	r24, r30
    3be4:	08 95       	ret

00003be6 <strcpy>:
    3be6:	fb 01       	movw	r30, r22
    3be8:	dc 01       	movw	r26, r24
    3bea:	01 90       	ld	r0, Z+
    3bec:	0d 92       	st	X+, r0
    3bee:	00 20       	and	r0, r0
    3bf0:	e1 f7       	brne	.-8      	; 0x3bea <strcpy+0x4>
    3bf2:	08 95       	ret

00003bf4 <strncpy>:
    3bf4:	fb 01       	movw	r30, r22
    3bf6:	dc 01       	movw	r26, r24
    3bf8:	41 50       	subi	r20, 0x01	; 1
    3bfa:	50 40       	sbci	r21, 0x00	; 0
    3bfc:	48 f0       	brcs	.+18     	; 0x3c10 <strncpy+0x1c>
    3bfe:	01 90       	ld	r0, Z+
    3c00:	0d 92       	st	X+, r0
    3c02:	00 20       	and	r0, r0
    3c04:	c9 f7       	brne	.-14     	; 0x3bf8 <strncpy+0x4>
    3c06:	01 c0       	rjmp	.+2      	; 0x3c0a <strncpy+0x16>
    3c08:	1d 92       	st	X+, r1
    3c0a:	41 50       	subi	r20, 0x01	; 1
    3c0c:	50 40       	sbci	r21, 0x00	; 0
    3c0e:	e0 f7       	brcc	.-8      	; 0x3c08 <strncpy+0x14>
    3c10:	08 95       	ret

00003c12 <__prologue_saves__>:
    3c12:	2f 92       	push	r2
    3c14:	3f 92       	push	r3
    3c16:	4f 92       	push	r4
    3c18:	5f 92       	push	r5
    3c1a:	6f 92       	push	r6
    3c1c:	7f 92       	push	r7
    3c1e:	8f 92       	push	r8
    3c20:	9f 92       	push	r9
    3c22:	af 92       	push	r10
    3c24:	bf 92       	push	r11
    3c26:	cf 92       	push	r12
    3c28:	df 92       	push	r13
    3c2a:	ef 92       	push	r14
    3c2c:	ff 92       	push	r15
    3c2e:	0f 93       	push	r16
    3c30:	1f 93       	push	r17
    3c32:	cf 93       	push	r28
    3c34:	df 93       	push	r29
    3c36:	cd b7       	in	r28, 0x3d	; 61
    3c38:	de b7       	in	r29, 0x3e	; 62
    3c3a:	ca 1b       	sub	r28, r26
    3c3c:	db 0b       	sbc	r29, r27
    3c3e:	0f b6       	in	r0, 0x3f	; 63
    3c40:	f8 94       	cli
    3c42:	de bf       	out	0x3e, r29	; 62
    3c44:	0f be       	out	0x3f, r0	; 63
    3c46:	cd bf       	out	0x3d, r28	; 61
    3c48:	09 94       	ijmp

00003c4a <__epilogue_restores__>:
    3c4a:	2a 88       	ldd	r2, Y+18	; 0x12
    3c4c:	39 88       	ldd	r3, Y+17	; 0x11
    3c4e:	48 88       	ldd	r4, Y+16	; 0x10
    3c50:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c52:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c54:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c56:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c58:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c5a:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c5c:	b9 84       	ldd	r11, Y+9	; 0x09
    3c5e:	c8 84       	ldd	r12, Y+8	; 0x08
    3c60:	df 80       	ldd	r13, Y+7	; 0x07
    3c62:	ee 80       	ldd	r14, Y+6	; 0x06
    3c64:	fd 80       	ldd	r15, Y+5	; 0x05
    3c66:	0c 81       	ldd	r16, Y+4	; 0x04
    3c68:	1b 81       	ldd	r17, Y+3	; 0x03
    3c6a:	aa 81       	ldd	r26, Y+2	; 0x02
    3c6c:	b9 81       	ldd	r27, Y+1	; 0x01
    3c6e:	ce 0f       	add	r28, r30
    3c70:	d1 1d       	adc	r29, r1
    3c72:	0f b6       	in	r0, 0x3f	; 63
    3c74:	f8 94       	cli
    3c76:	de bf       	out	0x3e, r29	; 62
    3c78:	0f be       	out	0x3f, r0	; 63
    3c7a:	cd bf       	out	0x3d, r28	; 61
    3c7c:	ed 01       	movw	r28, r26
    3c7e:	08 95       	ret

00003c80 <_exit>:
    3c80:	f8 94       	cli

00003c82 <__stop_program>:
    3c82:	ff cf       	rjmp	.-2      	; 0x3c82 <__stop_program>
